<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-acme-acme-latest" category="std">

  <front>
    <title abbrev="ACME">Automatic Certificate Management Environment (ACME)</title>

    <author initials="R." surname="Barnes" fullname="Richard Barnes">
      <organization>Cisco</organization>
      <address>
        <email>rlb@ipv.sx</email>
      </address>
    </author>
    <author initials="J." surname="Hoffman-Andrews" fullname="Jacob Hoffman-Andrews">
      <organization>EFF</organization>
      <address>
        <email>jsha@eff.org</email>
      </address>
    </author>
    <author initials="D." surname="McCarney" fullname="Daniel McCarney">
      <organization>Let's Encrypt</organization>
      <address>
        <email>cpu@letsencrypt.org</email>
      </address>
    </author>
    <author initials="J." surname="Kasten" fullname="James Kasten">
      <organization>University of Michigan</organization>
      <address>
        <email>jdkasten@umich.edu</email>
      </address>
    </author>

    <date year="2019" month="February"/>

    
    <workgroup>ACME Working Group</workgroup>
    <keyword>certificate</keyword> <keyword>HTTPS</keyword> <keyword>PKI</keyword> <keyword>X.509</keyword>

    <abstract>


<t>Public Key Infrastructure using X.509 (PKIX) certificates are used for a number of purposes,
the most significant of which is the authentication of domain names.  Thus,
certification authorities (CAs) in the Web PKI are trusted to verify that an applicant
for a certificate legitimately represents the domain name(s) in the certificate.
As of this writing, this verification is done through a collection of ad hoc mechanisms.
This document describes a protocol that a CA and an
applicant can use to automate the process of verification and certificate
issuance.  The protocol also provides facilities for other certificate
management functions, such as certificate revocation.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Certificates <xref target="RFC5280"/> in the Web PKI are most commonly used to authenticate
domain names.  Thus, certification authorities (CAs) in the Web PKI are trusted to
verify that an applicant for a certificate legitimately represents the domain
name(s) in the certificate.</t>

<t>Different types of certificates reflect different kinds of CA verification of
information about the certificate subject.  “Domain Validation” (DV)
certificates are by far the most common type.  The only validation
the CA is required to perform in the DV issuance process is to
verify that the requester has effective control of the domain <xref target="CABFBR"></xref>.  The CA is not
required to attempt to verify the requester’s
real-world identity.  (This is as opposed to “Organization Validation” (OV) and
“Extended Validation” (EV) certificates, where the process is intended to also
verify the real-world identity of the requester.)</t>

<t>Existing Web PKI certificate authorities tend to use a set of ad hoc
protocols for certificate issuance and identity verification.  In the case of DV
certificates, a typical user experience is something like:</t>

<t><list style="symbols">
  <t>Generate a PKCS#10 <xref target="RFC2986"/> Certificate Signing Request (CSR).</t>
  <t>Cut and paste the CSR into a CA’s web page.</t>
  <t>Prove ownership of the domain(s) in the CSR by one of the following methods:
  <list style="symbols">
      <t>Put a CA-provided challenge at a specific place on the web server.</t>
      <t>Put a CA-provided challenge in a DNS record corresponding to the target
domain.</t>
      <t>Receive a CA-provided challenge at (hopefully) an administrator-controlled email
address corresponding to the domain, and then respond to it on the CA’s web
page.</t>
    </list></t>
  <t>Download the issued certificate and install it on the user’s Web Server.</t>
</list></t>

<t>With the exception of the CSR itself and the certificates that are issued, these
are all completely ad hoc procedures and are accomplished by getting the human
user to follow interactive natural-language instructions from the CA rather than
by machine-implemented published protocols.  In many cases, the instructions are
difficult to follow and cause significant frustration and confusion.  Informal usability tests
by the authors indicate that webmasters often need 1-3 hours to obtain and
install a certificate for a domain.  Even in the best case, the lack of
published, standardized mechanisms presents an obstacle to the wide deployment
of HTTPS and other PKIX-dependent systems because it inhibits mechanization of
tasks related to certificate issuance, deployment, and revocation.</t>

<t>This document describes an extensible framework for automating the issuance and
domain validation procedure, thereby allowing servers and infrastructure
software to obtain certificates without user interaction.  Use of this protocol
should radically simplify the deployment of HTTPS and the practicality of PKIX-based
authentication for other protocols based on Transport Layer Security (TLS)
<xref target="RFC5246"/>.</t>

<t>It should be noted that while the focus of this document is on validating
domain names for purposes of issuing certificates in the Web PKI, ACME supports
extensions for uses with other identifiers in other PKI contexts.  For example,
as of this writing, there is ongoing work to use ACME for issuance of Web PKI
certificates attesting to IP addresses <xref target="I-D.ietf-acme-ip"/> and Secure Telephone Identity Revisited (STIR)
certificates attesting to telephone numbers <xref target="I-D.ietf-acme-telephone"/>.</t>

<t>ACME can also be used to automate some aspects of certificate management even
where non-automated processes are still needed.  For example, the external
account binding feature (see <xref target="external-account-binding"/>) can allow an ACME
account to use authorizations that have been granted to an external, non-ACME
account.  This allows ACME to address issuance scenarios that cannot yet be
fully automated, such as the issuance of “Extended Validation” certificates.</t>

</section>
<section anchor="deployment-model-and-operator-experience" title="Deployment Model and Operator Experience">

<t>The guiding use case for ACME is obtaining certificates for websites
(HTTPS <xref target="RFC2818"/>).  In this case, a web server is intended to speak
for one or more domains, and the process of certificate issuance is intended to
verify that this web server actually speaks for the domain(s).</t>

<t>DV certificate validation commonly checks claims about properties related to
control of a domain name – properties that can be observed by the certificate
issuer in an interactive process that can be conducted purely online.  That
means that under typical circumstances, all steps in the request, verification,
and issuance process can be represented and performed by Internet protocols with
no out-of-band human intervention.</t>

<t>Prior to ACME, when deploying an HTTPS server, a server operator typically gets a
prompt to generate a self-signed certificate.  If the operator were instead
deploying an HTTPS server using ACME, the experience would be something like this:</t>

<t><list style="symbols">
  <t>The operator’s ACME client prompts the operator for the intended domain name(s) that the
web server is to stand for.</t>
  <t>The ACME client presents the operator with a list of CAs from which it could
get a certificate.  (This list will change over time based on the capabilities
of CAs and updates to ACME configuration.) The ACME client might prompt the
operator for payment information at this point.</t>
  <t>The operator selects a CA.</t>
  <t>In the background, the ACME client contacts the CA and requests that it
issue a certificate for the intended domain name(s).</t>
  <t>The CA verifies that the client controls the requested domain name(s) by
having the ACME client perform some action(s) that can only be done
with control of the domain name(s).
For example, the CA might require a client requesting example.com
to provision a DNS record under example.com or an HTTP resource
under http://example.com.</t>
  <t>Once the CA is satisfied, it issues the certificate and the ACME client
automatically downloads and installs it, potentially notifying the operator
via email, SMS, etc.</t>
  <t>The ACME client periodically contacts the CA to get updated certificates,
stapled Online Certificate Status Protocol (OCSP) responses <xref target="RFC6960"/>, or whatever else would be required to keep the web server functional and its credentials up to date.</t>
</list></t>

<t>In this way, it would be nearly as easy to deploy with a CA-issued certificate
as with a self-signed certificate. Furthermore, the maintenance of that
CA-issued certificate would require minimal manual intervention.  Such close
integration of ACME with HTTPS servers allows the immediate and automated
deployment of certificates as they are issued, sparing the human administrator
from much of the time-consuming work described in the previous section.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>

<t>The two main roles in ACME are “client” and “server”.  The ACME client uses the
protocol to request certificate management actions, such as issuance or
revocation.  An ACME client may run on a web server, mail server, or some other
server system that requires valid X.509 certificates.  Or, it may run on a separate
server that does not consume the certificate but is authorized to respond to a
CA-provided challenge.  The ACME server runs at a certification authority
and responds to client requests, performing the requested actions if the client is
authorized.</t>

<t>An ACME client authenticates to the server by means of an “account key pair”.  The client uses the
private key of this key pair to sign all messages sent to the server.  The
server uses the public key to verify the authenticity and integrity of messages
from the client.</t>

</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>ACME allows a client to request certificate management actions using a set of
JavaScript Object Notation (JSON) messages <xref target="RFC8259"/> carried over HTTPS <xref target="RFC2818"/>.
Issuance using ACME resembles a traditional CA’s issuance process, in which a user creates an account,
requests a certificate, and proves control of the domain(s) in that certificate in
order for the CA to issue the requested certificate.</t>

<t>The first phase of ACME is for the client to request an account with the
ACME server.  The client generates an asymmetric key pair and requests a
new account, optionally providing contact information, agreeing to terms
of service (ToS), and/or associating the account with an existing account
in another system. The creation request is signed with the generated
private key to prove that the client controls it.</t>

<figure title="Account Creation"><artwork><![CDATA[
      Client                                                   Server

      [Contact Information]
      [ToS Agreement]
      [Additional Data]
      Signature                     ------->
                                                          Account URL
                                    <-------           Account Object


                [] Information covered by request signatures
]]></artwork></figure>

<t>Once an account is registered, there are four major steps the client needs to take to
get a certificate:</t>

<t><list style="numbers">
  <t>Submit an order for a certificate to be issued</t>
  <t>Prove control of any identifiers requested in the certificate</t>
  <t>Finalize the order by submitting a CSR</t>
  <t>Await issuance and download the issued certificate</t>
</list></t>

<t>The client’s order for a certificate describes the desired identifiers
plus a few additional fields that
capture semantics that are not supported in the CSR format.  If the server is
willing to consider issuing such a certificate, it responds with a list of
requirements that the client must satisfy before the certificate will be issued.</t>

<t>For example, in most cases, the server will require the client to demonstrate
that it controls the identifiers in the requested certificate.  Because there
are many different ways to validate possession of different types of
identifiers, the server will choose from an extensible set of challenges that
are appropriate for the identifier being claimed.  The client responds with a
set of responses that tell the server which challenges the client has completed.
The server then validates that the client has completed the challenges.</t>

<t>Once the validation process is complete and the server is satisfied that the
client has met its requirements, the client finalizes the order by submitting
a PKCS#10 Certificate Signing Request (CSR). The server will issue the requested
certificate and make it available to the client.</t>

<figure title="Certificate Issuance"><artwork><![CDATA[
      Client                                                   Server

      [Order]
      Signature                     ------->
                                    <-------  Required Authorizations

      [Responses]
      Signature                     ------->

                          <~~~~~~~~Validation~~~~~~~~>

      [CSR]
      Signature                     ------->
                                    <-------          Acknowledgement

                          <~~~~~~Await issuance~~~~~~>

      [POST-as-GET request]
      Signature                     ------->
                                    <-------              Certificate

                [] Information covered by request signatures
]]></artwork></figure>

<t>To revoke a certificate, the client sends a signed revocation request indicating
the certificate to be revoked:</t>

<figure title="Certificate Revocation"><artwork><![CDATA[
      Client                                                 Server

      [Revocation request]
      Signature                    -------->

                                   <--------                 Result

                [] Information covered by request signatures
]]></artwork></figure>

<t>Note that while ACME is defined with enough flexibility to handle different
types of identifiers in principle, the primary use case addressed by this
document is the case where domain names are used as identifiers.  For example,
all of the identifier validation challenges described in
<xref target="identifier-validation-challenges"/> address validation of domain names.
The use of ACME for other identifiers will require further specification in order
to describe how these identifiers are encoded in the protocol and what types of
validation challenges the server might require.</t>

</section>
<section anchor="character-encoding" title="Character Encoding">

<t>All requests and responses sent via HTTP by ACME clients, ACME servers, and
validation servers as well as any inputs for digest computations MUST be encoded
using the UTF-8 character set <xref target="RFC3629"/>. Note that identifiers that appear in
certificates may have their own encoding considerations (e.g., DNS names containing
non-ASCII characters are expressed as A-labels rather than U-labels). Any such
encoding considerations are to be applied prior to the aforementioned UTF-8
encoding.</t>

</section>
<section anchor="message-transport" title="Message Transport">

<t>Communications between an ACME client and an ACME server are done over HTTPS,
using JSON Web Signature (JWS) <xref target="RFC7515"/> to provide some additional security
properties for messages sent from
the client to the server.  HTTPS provides server authentication and
confidentiality.  With some ACME-specific extensions, JWS provides
authentication of the client’s request payloads, anti-replay protection, and
integrity for the HTTPS request URL.</t>

<section anchor="https-requests" title="HTTPS Requests">

<t>Each ACME function is accomplished by the client sending a sequence of HTTPS
requests to the server <xref target="RFC2818"/>, carrying JSON messages <xref target="RFC8259"/>.  Use of
HTTPS is REQUIRED. Each subsection of
<xref target="certificate-management"/> below describes the message formats used by the
function and the order in which messages are sent.</t>

<t>In most HTTPS transactions used by ACME, the ACME client is the HTTPS client
and the ACME server is the HTTPS server. The ACME server acts as a
client when validating challenges: an HTTP client when
validating an ‘http-01’ challenge, a DNS client with ‘dns-01’, etc.</t>

<t>ACME servers SHOULD follow the recommendations of <xref target="RFC7525"/> when configuring
their TLS implementations.  ACME servers that support TLS 1.3 MAY allow clients
to send early data (0-RTT).  This is safe because the ACME protocol itself
includes anti-replay protections (see <xref target="replay-protection"/>) in all cases where
they are required.  For this reason, there are no restrictions on what ACME
data can be carried in 0-RTT.</t>

<t>ACME clients MUST send a User-Agent header field, in accordance with
<xref target="RFC7231"/>. This header field SHOULD include the name and version of the
ACME software in addition to the name and version of the underlying
HTTP client software.</t>

<t>ACME clients SHOULD send an Accept-Language header field in accordance with
<xref target="RFC7231"/> to enable localization of error messages.</t>

<t>ACME servers that are intended to be generally accessible need to use
Cross-Origin Resource Sharing (CORS) in order to be accessible from
browser-based clients <xref target="W3C.REC-cors-20140116"/>.  Such servers SHOULD set the
Access-Control-Allow-Origin header field to the value “*”.</t>

<t>Binary fields in the JSON objects used by ACME are encoded using base64url
encoding described in Section 5 of <xref target="RFC4648"/> according to the profile specified
in JSON Web Signature in Section 2 of <xref target="RFC7515"/>. This encoding uses a URL safe
character set. Trailing ‘=’ characters MUST be stripped. Encoded
values that include trailing ‘=’ characters MUST be rejected as
improperly encoded.</t>

</section>
<section anchor="request-authentication" title="Request Authentication">

<t>All ACME requests with a non-empty body MUST encapsulate their payload
in a JSON Web Signature (JWS) <xref target="RFC7515"/> object, signed using the account’s
private key unless otherwise specified.  The server MUST verify the JWS before
processing the request. Encapsulating request bodies in JWS provides
authentication of requests.</t>

<t>A JWS object sent as the body of an ACME request MUST meet the following additional criteria:</t>

<t><list style="symbols">
  <t>The JWS MUST be in the  Flattened JSON Serialization <xref target="RFC7515"/></t>
  <t>The JWS MUST NOT have multiple signatures</t>
  <t>The JWS Unencoded Payload Option <xref target="RFC7797"/> MUST NOT be used</t>
  <t>The JWS Unprotected Header <xref target="RFC7515"/> MUST NOT be used</t>
  <t>The JWS Payload MUST NOT be detached</t>
  <t>The JWS Protected Header MUST include the following fields:
  <list style="symbols">
      <t>“alg” (Algorithm)
      <list style="symbols">
          <t>This field MUST NOT contain “none” or a Message Authentication Code (MAC) algorithm (e.g. one in which the algorithm registry description mentions MAC/HMAC).</t>
        </list></t>
      <t>“nonce” (defined in <xref target="replay-protection"/>)</t>
      <t>“url” (defined in <xref target="request-url-integrity"/>)</t>
      <t>Either “jwk” (JSON Web Key) or “kid” (Key ID) as specified below</t>
    </list></t>
</list></t>

<t>An ACME server MUST implement the “ES256” signature algorithm <xref target="RFC7518"/> and SHOULD implement the “EdDSA” signature algorithm using the “Ed25519” variant (indicated by “crv”) <xref target="RFC8037"/>.</t>

<t>The “jwk” and “kid” fields are mutually exclusive. Servers MUST reject requests
that contain both.</t>

<t>For newAccount requests, and for revokeCert requests authenticated by a certificate
key, there MUST be a “jwk” field. This field MUST contain the public key
corresponding to the private key used to sign the JWS.</t>

<t>For all other requests, the request is signed using an existing account, and
there MUST be a “kid” field. This field MUST contain the account URL received by
POSTing to the newAccount resource.</t>

<t>If the client sends a JWS signed with an algorithm that the server does not
support, then the server MUST return an error with status code 400 (Bad Request)
and type “urn:ietf:params:acme:error:badSignatureAlgorithm”.  The problem
document returned with the error MUST include an “algorithms” field with an
array of supported “alg” values.  See <xref target="errors"/> for more details on
the structure of error responses.</t>

<t>If the server supports the signature algorithm “alg” but either does not support
or chooses to reject the public key “jwk”, then the server MUST return an error
with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:badPublicKey”.  The problem document detail SHOULD
describe the reason for rejecting the public key; some example reasons are:</t>

<t><list style="symbols">
  <t>“alg” is “RS256” but the modulus “n” is too small (e.g., 512-bit)</t>
  <t>“alg” is “ES256” but “jwk” does not contain a valid P-256 public key</t>
  <t>“alg” is “EdDSA” and “crv” is “Ed448”, but the server only supports “EdDSA”
with “Ed25519”</t>
  <t>the corresponding private key is known to have been compromised</t>
</list></t>

<t>Because client requests in ACME carry JWS objects in the Flattened
JSON Serialization, they must have the Content-Type header field
set to “application/jose+json”.  If a request does not meet this
requirement, then the server MUST return a response with status code
415 (Unsupported Media Type).</t>

</section>
<section anchor="post-as-get" title="GET and POST-as-GET Requests">

<t>Note that authentication via signed JWS request bodies implies that
requests without an entity body are not authenticated, in particular
GET requests.  Except for the cases described in this section, if
the server receives a GET request, it MUST return an error with
status code 405 (Method Not Allowed) and type “malformed”.</t>

<t>If a client wishes to fetch a resource from the server (which would
otherwise be done with a GET), then it MUST send a POST request with
a JWS body as described above, where the payload of the JWS is a
zero-length octet string.  In other words, the “payload” field of the
JWS object MUST be present and set to the empty string (“”).</t>

<t>We will refer to these as “POST-as-GET” requests. On receiving a
request with a zero-length (and thus non-JSON) payload, the server
MUST authenticate the sender and verify any access control rules.
Otherwise, the server MUST treat this request as having the same
semantics as a GET request for the same resource.</t>

<t>The server MUST allow GET requests for the directory and newNonce
resources (see <xref target="resources"/>), in addition to POST-as-GET requests
for these resources.  This enables clients to bootstrap into the
ACME authentication system.</t>

</section>
<section anchor="request-url-integrity" title="Request URL Integrity">

<t>It is common in deployment for the entity terminating TLS for HTTPS to be different
from the entity operating the logical HTTPS server, with a “request routing”
layer in the middle.  For example, an ACME CA might have a content delivery
network terminate TLS connections from clients so that it can inspect client
requests for denial-of-service (DoS) protection.</t>

<t>These intermediaries can also change values in the request that are not signed
in the HTTPS request, e.g., the request URL and header fields.  ACME uses JWS to
provide an integrity mechanism, which protects against an intermediary
changing the request URL to another ACME URL.</t>

<t>As noted in <xref target="request-authentication"/>, all ACME request objects carry a
“url” header parameter in their protected header.  This header parameter encodes
the URL to which the client is directing the request.  On receiving such an
object in an HTTP request, the server MUST compare the “url” header parameter to
the request URL.  If the two do not match, then the server MUST reject the
request as unauthorized.</t>

<t>Except for the directory resource, all ACME resources are addressed with URLs
provided to the client by the server.  In POST requests sent to these resources, the client MUST set
the “url” header parameter to the exact string provided by the server (rather
than performing any re-encoding on the URL).  The server SHOULD perform the
corresponding string equality check, configuring each resource with the URL
string provided to clients and having the resource check that requests have the
same string in their “url” header parameter. The server MUST reject the request
as unauthorized if the string equality check fails.</t>

<section anchor="url-url-jws-header-parameter" title="&quot;url&quot; (URL) JWS Header Parameter">

<t>The “url” header parameter specifies the URL <xref target="RFC3986"/> to which this JWS
object is directed.  The “url” header parameter MUST be carried in the protected
header of the JWS.  The value of the “url” header parameter MUST be a string
representing the target URL.</t>

</section>
</section>
<section anchor="replay-protection" title="Replay Protection">

<t>In order to protect ACME resources from any possible replay attacks, ACME
POST requests have a mandatory anti-replay mechanism.  This mechanism is based on the
server maintaining a list of nonces that it has issued, and requiring
any signed request from the client to carry such a nonce.</t>

<t>An ACME server provides nonces to clients using the HTTP Replay-Nonce header field,
as specified in <xref target="replay-nonce"/>.  The server MUST include a Replay-Nonce
header field in every successful response to a POST request and SHOULD provide
it in error responses as well.</t>

<t>Every JWS sent by an ACME client MUST include, in its protected header, the
“nonce” header parameter, with contents as defined in
<xref target="nonce-nonce-jws-header-parameter"/>.  As part of JWS verification, the
ACME server MUST verify that the value of the “nonce” header is a value that the
server previously provided in a Replay-Nonce header field.  Once a nonce value
has appeared in an ACME request, the server MUST consider it invalid, in the same
way as a value it had never issued.</t>

<t>When a server rejects a request because its nonce value was unacceptable (or not
present), it MUST provide HTTP status code 400 (Bad Request), and indicate the
ACME error type “urn:ietf:params:acme:error:badNonce”.  An error response with
the “badNonce” error type MUST include a Replay-Nonce header field with a
fresh nonce that the server will accept in a retry of the original
query (and possibly in other requests, according to the server’s
nonce scoping policy).
On receiving such a response, a client SHOULD retry the request using the new
nonce.</t>

<t>The precise method used to generate and track nonces is up to the server.  For
example, the server could generate a random 128-bit value for each response,
keep a list of issued nonces, and strike nonces from this list as they are used.</t>

<t>Other than the constraint above with regard to nonces issued in
“badNonce” responses, ACME does not constrain how servers
scope nonces. Clients MAY assume that nonces have broad scope,
e.g., by having a single pool of nonces used for all requests.
However, when retrying in response to a “badNonce” error, the client
MUST use the nonce provided in the error response. Servers should
scope nonces broadly enough that retries are not needed very often.</t>

<section anchor="replay-nonce" title="Replay-Nonce">

<t>The Replay-Nonce HTTP header field includes a server-generated value that the
server can use to detect unauthorized replay in future client requests.  The
server MUST generate the values provided in Replay-Nonce header fields in such a way that
they are unique to each message, with high probability, and unpredictable to anyone besides the server. For instance, it is
acceptable to generate Replay-Nonces randomly.</t>

<t>The value of the Replay-Nonce header field MUST be an octet string encoded according to
the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  Clients MUST
ignore invalid Replay-Nonce values.  The ABNF <xref target="RFC5234"/> for the Replay-Nonce
header field follows:</t>

<figure><artwork><![CDATA[
  base64url = ALPHA / DIGIT / "-" / "_"

  Replay-Nonce = 1*base64url
]]></artwork></figure>

<t>The Replay-Nonce header field SHOULD NOT be included in HTTP request messages.</t>

</section>
<section anchor="nonce-nonce-jws-header-parameter" title="&quot;nonce&quot; (Nonce) JWS Header Parameter">

<t>The “nonce” header parameter provides a unique value that enables the verifier
of a JWS to recognize when replay has occurred. The “nonce” header parameter
MUST be carried in the protected header of the JWS.</t>

<t>The value of the “nonce” header parameter MUST be an octet string, encoded
according to the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  If
the value of a “nonce” header parameter is not valid according to this encoding,
then the verifier MUST reject the JWS as malformed.</t>

</section>
</section>
<section anchor="rate-limits" title="Rate Limits">

<t>Creation of resources can be rate limited by ACME servers to ensure fair usage and
prevent abuse.  Once the rate limit is exceeded, the server MUST respond
with an error with the type “urn:ietf:params:acme:error:rateLimited”.
Additionally, the server SHOULD send a Retry-After header field <xref target="RFC7231"/> indicating
when the current request may succeed again.  If multiple rate limits are
in place, that is the time where all rate limits allow access again for
the current request with exactly the same parameters.</t>

<t>In addition to the human-readable “detail” field of the error response, the
server MAY send one or multiple link relations in the Link header field <xref target="RFC8288"/> pointing to
documentation about the specific rate limit that was hit, using the “help” link relation type.</t>

</section>
<section anchor="errors" title="Errors">

<t>Errors can be reported in ACME both at the HTTP layer and within challenge
objects as defined in <xref target="identifier-validation-challenges"/>. ACME servers can
return responses with an HTTP error response code (4XX or 5XX). For example,
if the client submits a request using a method not allowed in this document,
then the server MAY return status code 405 (Method Not Allowed).</t>

<t>When the server responds with an error status, it SHOULD provide additional
information using a problem document <xref target="RFC7807"/>.  To facilitate automatic
response to errors, this document defines the following standard tokens for use
in the “type” field (within the ACME URN namespace “urn:ietf:params:acme:error:”):</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>accountDoesNotExist</c>
      <c>The request specified an account that does not exist</c>
      <c>alreadyRevoked</c>
      <c>The request specified a certificate to be revoked that has already been revoked</c>
      <c>badCSR</c>
      <c>The CSR is unacceptable (e.g., due to a short key)</c>
      <c>badNonce</c>
      <c>The client sent an unacceptable anti-replay nonce</c>
      <c>badPublicKey</c>
      <c>The JWS was signed by a public key the server does not support</c>
      <c>badRevocationReason</c>
      <c>The revocation reason provided is not allowed by the server</c>
      <c>badSignatureAlgorithm</c>
      <c>The JWS was signed with an algorithm the server does not support</c>
      <c>caa</c>
      <c>Certification Authority Authorization (CAA) records forbid the CA from issuing a certificate</c>
      <c>compound</c>
      <c>Specific error conditions are indicated in the “subproblems” array.</c>
      <c>connection</c>
      <c>The server could not connect to validation target</c>
      <c>dns</c>
      <c>There was a problem with a DNS query during identifier validation</c>
      <c>externalAccountRequired</c>
      <c>The request must include a value for the “externalAccountBinding” field</c>
      <c>incorrectResponse</c>
      <c>Response received didn’t match the challenge’s requirements</c>
      <c>invalidContact</c>
      <c>A contact URL for an account was invalid</c>
      <c>malformed</c>
      <c>The request message was malformed</c>
      <c>orderNotReady</c>
      <c>The request attempted to finalize an order that is not ready to be finalized</c>
      <c>rateLimited</c>
      <c>The request exceeds a rate limit</c>
      <c>rejectedIdentifier</c>
      <c>The server will not issue certificates for the identifier</c>
      <c>serverInternal</c>
      <c>The server experienced an internal error</c>
      <c>tls</c>
      <c>The server received a TLS error during validation</c>
      <c>unauthorized</c>
      <c>The client lacks sufficient authorization</c>
      <c>unsupportedContact</c>
      <c>A contact URL for an account used an unsupported protocol scheme</c>
      <c>unsupportedIdentifier</c>
      <c>An identifier is of an unsupported type</c>
      <c>userActionRequired</c>
      <c>Visit the “instance” URL and take actions specified there</c>
</texttable>

<t>This list is not exhaustive. The server MAY return errors whose “type” field is
set to a URI other than those defined above.  Servers MUST NOT use the ACME URN
namespace for errors not listed in the appropriate IANA registry (see <xref target="acme-urn-space"/>).  Clients SHOULD display the
“detail” field of all errors.</t>

<t>In the remainder of this document, we use the tokens in the table above to refer
to error types, rather than the full URNs.  For example, an “error of type
‘badCSR’” refers to an error document with “type” value
“urn:ietf:params:acme:error:badCSR”.</t>

<section anchor="subproblems" title="Subproblems">

<t>Sometimes a CA may need to return multiple errors in response to a request.
Additionally, the CA may need to attribute errors to specific
identifiers.  For instance, a newOrder request may contain multiple
identifiers for which the CA cannot issue. In this situation, an ACME
problem document MAY contain the “subproblems” field, containing a JSON
array of problem documents, each of which MAY contain an “identifier”
field. If present, the “identifier” field MUST contain an ACME identifier
(<xref target="iana-identifier"/>). The “identifier” field MUST NOT be present at
the top level in ACME problem documents. It can only be present in subproblems.
Subproblems need not all have the same type, and they do not need to match the top level type.</t>

<t>ACME clients may choose to use the “identifier” field of a subproblem
as a hint that an operation would succeed if that identifier were omitted. For
instance, if an order contains ten DNS identifiers, and the newOrder
request returns a problem document with two subproblems (referencing two
of those identifiers), the ACME client may choose to submit another order
containing only the eight identifiers not listed in the problem document.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
Link: <https://example.com/acme/directory>;rel="index"

{
    "type": "urn:ietf:params:acme:error:malformed",
    "detail": "Some of the identifiers requested were rejected",
    "subproblems": [
        {
            "type": "urn:ietf:params:acme:error:malformed",
            "detail": "Invalid underscore in DNS name \"_example.org\"",
            "identifier": {
                "type": "dns",
                "value": "_example.org"
            }
        },
        {
            "type": "urn:ietf:params:acme:error:rejectedIdentifier",
            "detail": "This CA will not issue for \"example.net\"",
            "identifier": {
                "type": "dns",
                "value": "example.net"
            }
        }
    ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="certificate-management" title="Certificate Management">

<t>In this section, we describe the certificate management functions that ACME
enables:</t>

<t><list style="symbols">
  <t>Account Creation</t>
  <t>Ordering a Certificate</t>
  <t>Identifier Authorization</t>
  <t>Certificate Issuance</t>
  <t>Certificate Revocation</t>
</list></t>

<section anchor="resources" title="Resources">

<t>ACME is structured as a HTTP-based application with the following types of resources:</t>

<t><list style="symbols">
  <t>Account resources, representing information about an account
(<xref target="account-objects"/>, <xref target="account-management"/>)</t>
  <t>Order resources, representing an account’s requests to issue certificates
(<xref target="order-objects"/>)</t>
  <t>Authorization resources, representing an account’s authorization to act for an
identifier (<xref target="authorization-objects"/>)</t>
  <t>Challenge resources, representing a challenge to prove control of an
identifier (<xref target="identifier-authorization"/>, <xref target="identifier-validation-challenges"/>)</t>
  <t>Certificate resources, representing issued certificates
(<xref target="downloading-the-certificate"/>)</t>
  <t>A “directory” resource (<xref target="directory"/>)</t>
  <t>A “newNonce” resource (<xref target="getting-a-nonce"/>)</t>
  <t>A “newAccount” resource (<xref target="account-management"/>)</t>
  <t>A “newOrder” resource (<xref target="applying-for-certificate-issuance"/>)</t>
  <t>A “revokeCert” resource (<xref target="certificate-revocation"/>)</t>
  <t>A “keyChange” resource (<xref target="account-key-roll-over"/>)</t>
</list></t>

<t>The server MUST provide “directory” and “newNonce” resources.</t>

<t>ACME uses different URLs for different management functions. Each function is
listed in a directory along with its corresponding URL, so clients only need to
be configured with the directory URL.  These URLs are connected by a few
different link relations <xref target="RFC5988"/>.</t>

<t>The “up” link relation is used with challenge resources to indicate the
authorization resource to which a challenge belongs.  It is also used, with some
media types, from certificate resources to indicate a resource from which the
client may fetch a chain of CA certificates that could be used to validate the
certificate in the original resource.</t>

<t>The “index” link relation is present on all resources other than the
directory and indicates the URL of the directory.</t>

<t>The following diagram illustrates the relations between resources on an ACME
server.  For the most part, these relations are expressed by URLs provided as
strings in the resources’ JSON representations.  Lines with labels in quotes
indicate HTTP link relations.</t>

<figure title="ACME Resources and Relationships"><artwork><![CDATA[
                               directory
                                   |
                                   +--> newNonce
                                   |
       +----------+----------+-----+-----+------------+
       |          |          |           |            |
       |          |          |           |            |
       V          V          V           V            V
  newAccount   newAuthz   newOrder   revokeCert   keyChange
       |          |          |
       |          |          |
       V          |          V
    account       |        order --+--> finalize
                  |          |     |
                  |          |     +--> cert
                  |          V
                  +---> authorization
                            | ^
                            | | "up"
                            V |
                          challenge
]]></artwork></figure>

<t>The following table illustrates a typical sequence of requests required to
establish a new account with the server, prove control of an identifier, issue a
certificate, and fetch an updated certificate some time after issuance.  The
“-&gt;” is a mnemonic for a Location header field pointing to a created resource.</t>

<texttable>
      <ttcol align='left'>Action</ttcol>
      <ttcol align='left'>Request</ttcol>
      <ttcol align='left'>Response</ttcol>
      <c>Get directory</c>
      <c>GET  directory</c>
      <c>200</c>
      <c>Get nonce</c>
      <c>HEAD newNonce</c>
      <c>200</c>
      <c>Create account</c>
      <c>POST newAccount</c>
      <c>201 -&gt; account</c>
      <c>Submit order</c>
      <c>POST newOrder</c>
      <c>201 -&gt; order</c>
      <c>Fetch challenges</c>
      <c>POST-as-GET order’s authorization urls</c>
      <c>200</c>
      <c>Respond to challenges</c>
      <c>POST authorization challenge urls</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Finalize order</c>
      <c>POST order’s finalize url</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Download certificate</c>
      <c>POST-as-GET order’s certificate url</c>
      <c>200</c>
</texttable>

<t>The remainder of this section provides the details of how these resources are
structured and how the ACME protocol makes use of them.</t>

<section anchor="directory" title="Directory">

<t>In order to help clients configure themselves with the right URLs for each ACME
operation, ACME servers provide a directory object. This should be the only URL
needed to configure clients. It is a JSON object, whose field names are drawn from
the resource registry (<xref target="iana-resource"/>) and whose values are the corresponding
URLs.</t>

<texttable>
      <ttcol align='left'>Field</ttcol>
      <ttcol align='left'>URL in Value</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>keyChange</c>
      <c>Key change</c>
</texttable>

<t>There is no constraint on the URL of the directory except that it
should be different from the other ACME server resources’ URLs, and that it
should not clash with other services. For instance:</t>

<t><list style="symbols">
  <t>a host that functions as both an ACME and a Web server may want to keep
the root path “/” for an HTML “front page” and place the ACME
directory under the path “/acme”.</t>
  <t>a host that only functions as an ACME server could place the directory
under the path “/”.</t>
</list></t>

<t>If the ACME server does not implement pre-authorization (<xref target="pre-authorization"/>), it
MUST omit the “newAuthz” field of the directory.</t>

<t>The object MAY additionally contain a “meta” field. If present, it MUST be a
JSON object; each field in the object is an item of metadata relating to
the service provided by the ACME server.</t>

<t>The following metadata items are defined (<xref target="iana-meta"/>), all of which are OPTIONAL:</t>

<t><list style="hanging">
  <t hangText='termsOfService (optional, string):'>
  A URL identifying the current terms of service.</t>
  <t hangText='website (optional, string):'>
  An HTTP or HTTPS URL locating a website providing more
information about the ACME server.</t>
  <t hangText='caaIdentities (optional, array of string):'>
  The hostnames that the ACME server recognizes as referring to
itself for the purposes of CAA record validation as defined in
<xref target="RFC6844"/>.  Each string MUST represent the same sequence of ASCII
code points that the server will expect to see as the “Issuer Domain
Name” in a CAA issue or issuewild property tag.  This allows clients
to determine the correct issuer domain name to use when configuring
CAA records.</t>
  <t hangText='externalAccountRequired (optional, boolean):'>
  If this field is present and set to “true”, then the CA requires that all
newAccount requests include an “externalAccountBinding” field associating the
new account with an external account.</t>
</list></t>

<t>Clients access the directory by sending a GET request to the directory URL.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "newNonce": "https://example.com/acme/new-nonce",
  "newAccount": "https://example.com/acme/new-account",
  "newOrder": "https://example.com/acme/new-order",
  "newAuthz": "https://example.com/acme/new-authz",
  "revokeCert": "https://example.com/acme/revoke-cert",
  "keyChange": "https://example.com/acme/key-change",
  "meta": {
    "termsOfService": "https://example.com/acme/terms/2017-5-30",
    "website": "https://www.example.com/",
    "caaIdentities": ["example.com"],
    "externalAccountRequired": false
  }
}
]]></artwork></figure>

</section>
<section anchor="account-objects" title="Account Objects">

<t>An ACME account resource represents a set of metadata associated with an account.
Account resources have the following structure:</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this account. Possible values are “valid”, “deactivated”, and
“revoked”.  The value “deactivated” should be used to indicate client-initiated
deactivation whereas “revoked” should be used to indicate server-initiated
deactivation. See <xref target="status-changes"/>.</t>
  <t hangText='contact (optional, array of string):'>
  An array of URLs that the server can use to contact the client for issues
related to this account. For example, the server may wish to notify the
client about server-initiated revocation or certificate expiration.
For information on supported URL schemes, see <xref target="account-management"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Including this field in a newAccount request, with a value of true, indicates
the client’s agreement with the terms of service. This field cannot be updated
by the client.</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Including this field in a newAccount request indicates approval by the holder
of an existing non-ACME account to bind that account to this ACME account. This
field is not updateable by the client (see <xref target="external-account-binding"/>).</t>
  <t hangText='orders (required, string):'>
  A URL from which a list of orders submitted by this account can be fetched via
a POST-as-GET request, as described in <xref target="orders-list"/>.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "contact": [
    "mailto:cert-admin@example.org",
    "mailto:admin@example.org"
  ],
  "termsOfServiceAgreed": true,
  "orders": "https://example.com/acme/orders/rzGoeA"
}
]]></artwork></figure>

<section anchor="orders-list" title="Orders List">

<t>Each account object includes an “orders” URL from which a list of orders created
by the account can be fetched via POST-as-GET request. The result of the request
MUST be a JSON object whose “orders” field is an array of URLs, each identifying
an order belonging to the account.  The server SHOULD include pending orders
and SHOULD NOT include orders that are invalid in the array of URLs. The server
MAY return an incomplete list, along with a Link header field with a “next” link
relation indicating where further entries can be acquired.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/orders/rzGoeA?cursor=2>;rel="next"

{
  "orders": [
    "https://example.com/acme/order/TOlocE8rfgo",
    "https://example.com/acme/order/4E16bbL5iSw",
    /* more URLs not shown for example brevity */
    "https://example.com/acme/order/neBHYLfw0mg"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="order-objects" title="Order Objects">

<t>An ACME order object represents a client’s request for a certificate and is
used to track the progress of that order through to issuance.  Thus, the object
contains information about the requested certificate, the authorizations that
the server requires the client to complete, and any certificates that have
resulted from this order.</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this order.  Possible values are “pending”,
“ready”, “processing”, “valid”, and “invalid”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this order invalid, encoded
in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED for
objects with “pending” or “valid” in the status field.</t>
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the order pertains to.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.  This document defines the “dns”
identifier type.  See the registry defined in <xref target="iana-identifier"/>
for any others.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='error (optional, object):'>
  The error that occurred while processing the order, if any.
This field is structured as a problem document <xref target="RFC7807"/>.</t>
  <t hangText='authorizations (required, array of string):'>
  For pending orders, the authorizations that the client needs to complete
before the requested certificate can be issued (see
<xref target="identifier-authorization"/>), including unexpired authorizations that the client has completed in the past for identifiers specified in the order. The authorizations required are dictated by server policy; there may not be a 1:1 relationship between the order identifiers and the authorizations required. For final orders (in the “valid” or “invalid” state), the authorizations that
were completed.  Each entry is a URL from which an authorization can be fetched
with a POST-as-GET request.</t>
  <t hangText='finalize (required, string):'>
  A URL that a CSR must be POSTed to once all of the order’s authorizations are
satisfied to finalize the order. The result of a successful finalization will be
the population of the certificate URL for the order.</t>
  <t hangText='certificate (optional, string):'>
  A URL for the certificate that has been issued in response to this order.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2016-01-20T14:09:07.99Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<t>Any identifier of type “dns” in a newOrder request MAY have a wildcard domain
name as its value. A wildcard domain name consists of a single asterisk
character followed by a single full stop character (“*.”) followed by a domain
name as defined for use in the Subject Alternate Name Extension by
<xref target="RFC5280"/>. An authorization returned by the server for a wildcard domain name
identifier MUST NOT include the asterisk and full stop (“*.”) prefix in the
authorization identifier value. The returned authorization MUST include the
optional “wildcard” field, with a value of true.</t>

<t>The elements of the “authorizations” and “identifiers” arrays are immutable once
set.  The server MUST NOT change the contents of either array after they are
created. If a client observes a change in the contents of either array, then it
SHOULD consider the order invalid.</t>

<t>The “authorizations” array of the order SHOULD reflect all authorizations
that the CA takes into account in deciding to issue, even if some authorizations
were fulfilled in earlier orders or in pre-authorization transactions.  For
example, if a CA allows multiple orders to be fulfilled based on a single
authorization transaction, then it SHOULD reflect that authorization in all of
the orders.</t>

<t>Note that just because an authorization URL is listed in the
“authorizations” array of an order object doesn’t mean that the
client is required to take action.  There are several reasons that
the referenced authorizations may already be valid:</t>

<t><list style="symbols">
  <t>The client completed the authorization as part of a previous order</t>
  <t>The client previously pre-authorized the identifier (see <xref target="pre-authorization"/>)</t>
  <t>The server granted the client authorization based on an external account</t>
</list></t>

<t>Clients SHOULD check the “status” field of an order to determine
whether they need to take any action.</t>

</section>
<section anchor="authorization-objects" title="Authorization Objects">

<t>An ACME authorization object represents a server’s authorization for an account
to represent an identifier.  In addition to the identifier, an authorization
includes several metadata fields, such as the status of the authorization (e.g.,
“pending”, “valid”, or “revoked”) and which challenges were used to validate
possession of the identifier.</t>

<t>The structure of an ACME authorization resource is as follows:</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier that the account is authorized to represent.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier (see below and <xref target="iana-identifier"/>).</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='status (required, string):'>
  The status of this authorization.  Possible values are “pending”,
“valid”, “invalid”, “deactivated”, “expired”, and “revoked”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this authorization invalid,
encoded in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED
for objects with “valid” in the “status” field.</t>
  <t hangText='challenges (required, array of objects):'>
  For pending authorizations, the challenges that the client can
fulfill in order to prove possession of the identifier.  For valid
authorizations, the challenge that was validated.  For invalid
authorizations, the challenge that was attempted and failed.  Each
array entry is an object with parameters required to validate the
challenge.  A client should attempt to fulfill one of these
challenges, and a server should consider any one of the challenges
sufficient to make the authorization valid.</t>
  <t hangText='wildcard (optional, boolean):'>
  This field MUST be present and true for authorizations created as
a result of a newOrder request containing a DNS identifier with a
value that was a wildcard domain name.  For other authorizations,
it MUST be absent.  Wildcard domain names are described in <xref target="order-objects"/>.</t>
</list></t>

<t>The only type of identifier defined by this specification is a fully qualified
domain name (type: “dns”). The domain name MUST be encoded in the
form in which it would appear in a certificate.  That is, it MUST be
encoded according to the rules in Section 7 of <xref target="RFC5280"/>.  Servers MUST verify
any identifier values that begin with the ASCII-Compatible Encoding prefix
“xn--” as defined in <xref target="RFC5890"/> are properly encoded. Wildcard domain names
(with “*” as the first label) MUST NOT be included in authorization objects. If
an authorization object conveys authorization for the base domain of a newOrder
DNS identifier containing a wildcard domain name, then the optional authorizations
“wildcard” field MUST be present with a value of true.</t>

<t><xref target="identifier-validation-challenges"/> describes a set of challenges for domain
name validation.</t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "type": "http-01",
      "status": "valid",
      "token": "DGyRejmCefe7v4NfDGDKfA",
      "validated": "2014-12-01T12:05:58.16Z"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="challenge-objects" title="Challenge Objects">

<t>An ACME challenge object represents a server’s offer to validate a
client’s possession of an identifier in a specific way.  Unlike the
other objects listed above, there is not a single standard structure
for a challenge object.  The contents of a challenge object depend
on the validation method being used.  The general structure of
challenge objects and an initial set of validation methods are
described in <xref target="identifier-validation-challenges"/>.</t>

</section>
<section anchor="status-changes" title="Status Changes">

<t>Each ACME object type goes through a simple state machine over its
lifetime.  The “status” field of the object indicates which state
the object is currently in.</t>

<t>Challenge objects are created in the “pending” state.  They
transition to the “processing” state when the client responds to the
challenge (see <xref target="responding-to-challenges"/>) and the server begins
attempting to validate that the client has completed the challenge.
Note that within the “processing” state, the server may attempt to
validate the challenge multiple times (see <xref target="retrying-challenges"/>).
Likewise, client requests for retries do not cause a state change.
If validation is successful, the challenge moves to the “valid”
state; if there is an error, the challenge moves to the “invalid”
state.</t>

<figure title="State Transitions for Challenge Objects"><artwork><![CDATA[
         pending
            |
            | Receive
            | response
            V
        processing <-+
            |   |    | Server retry or
            |   |    | client retry request
            |   +----+
            |
            |
Successful  |   Failed
validation  |   validation
  +---------+---------+
  |                   |
  V                   V
valid              invalid
]]></artwork></figure>

<t>Authorization objects are created in the “pending” state.  If one of
the challenges listed in the authorization transitions to the
“valid” state, then the authorization also changes to the “valid”
state.  If the client attempts to fulfill a challenge and fails, or
if there is an error while the authorization is still
pending, then the authorization transitions to the “invalid” state.
Once the authorization is in the “valid” state, it can expire
(“expired”), be deactivated by the client (“deactivated”, see
<xref target="deactivating-an-authorization"/>), or revoked by the server
(“revoked”).</t>

<figure title="State Transitions for Authorization Objects"><artwork><![CDATA[
                   pending --------------------+
                      |                        |
    Challenge failure |                        |
           or         |                        |
          Error       |  Challenge valid       |
            +---------+---------+              |
            |                   |              |
            V                   V              |
         invalid              valid            |
                                |              |
                                |              |
                                |              |
                 +--------------+--------------+
                 |              |              |
                 |              |              |
          Server |       Client |   Time after |
          revoke |   deactivate |    "expires" |
                 V              V              V
              revoked      deactivated      expired
]]></artwork></figure>

<t>Order objects are created in the “pending” state.  Once all of the
authorizations listed in the order object are in the “valid” state,
the order transitions to the “ready” state.  The order moves to the
“processing” state after the client submits a request to the order’s
“finalize” URL and the CA begins the issuance process for the
certificate.  Once the certificate is issued, the order enters the
“valid” state.  If an error occurs at any of these stages, the
order moves to the “invalid” state.  The order also moves to the
“invalid” state if it expires or one of its authorizations enters a
final state other than “valid” (“expired”, “revoked”, or “deactivated”).</t>

<figure title="State Transitions for Order Objects"><artwork><![CDATA[
 pending --------------+
    |                  |
    | All authz        |
    | "valid"          |
    V                  |
  ready ---------------+
    |                  |
    | Receive          |
    | finalize         |
    | request          |
    V                  |
processing ------------+
    |                  |
    | Certificate      | Error or
    | issued           | Authorization failure
    V                  V
  valid             invalid
]]></artwork></figure>

<t>Account objects are created in the “valid” state, since no further
action is required to create an account after a successful
newAccount request.  If the account is deactivated by the client  or
revoked by the server, it moves to the corresponding state.</t>

<figure title="State Transitions for Account Objects"><artwork><![CDATA[
                  valid
                    |
                    |
        +-----------+-----------+
 Client |                Server |
deactiv.|                revoke |
        V                       V
   deactivated               revoked
]]></artwork></figure>

<t>Note that some of these states may not ever appear in a “status”
field, depending on server behavior.  For example, a server that
issues synchronously will never show an order in the “processing”
state.  A server that deletes expired authorizations immediately
will never show an authorization in the “expired” state.</t>

</section>
</section>
<section anchor="getting-a-nonce" title="Getting a Nonce">

<t>Before sending a POST request to the server, an ACME client needs to have a
fresh anti-replay nonce to put in the “nonce” header of the JWS.  In most cases,
the client will have gotten a nonce from a previous request.  However, the
client might sometimes need to get a new nonce, e.g., on its first request to
the server or if an existing nonce is no longer valid.</t>

<t>To get a fresh nonce, the client sends a HEAD request to the newNonce resource
on the server.  The server’s response MUST include a Replay-Nonce header field
containing a fresh nonce and SHOULD have status code 200 (OK).  The
server MUST also respond to GET requests for this resource, returning an empty
body (while still providing a Replay-Nonce header) with a status code of 204 (No Content).</t>

<figure><artwork><![CDATA[
HEAD /acme/new-nonce HTTP/1.1
Host: example.com

HTTP/1.1 200 OK
Replay-Nonce: oFvnlFP1wIhRlYS2jTaXbA
Cache-Control: no-store
Link: <https://example.com/acme/directory>;rel="index"
]]></artwork></figure>

<t>Proxy caching of responses from the newNonce resource can cause
clients to receive the same nonce repeatedly, leading to “badNonce” errors.
The server MUST include a Cache-Control header field with the “no-store”
directive in responses for the newNonce resource, in order to prevent
caching of this resource.</t>

</section>
<section anchor="account-management" title="Account Management">

<t>In this section, we describe how an ACME client can create an
account on an ACME server and perform some modifications to the
account after it has been created.</t>

<t>A client creates a new account with the server by sending a POST request to the
server’s newAccount URL.  The body of the request is a stub account object
containing some subset of the following fields:</t>

<t><list style="hanging">
  <t hangText='contact (optional, array of string):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='onlyReturnExisting (optional, boolean):'>
  If this field is present with the value “true”, then the server MUST NOT
create a new account if one does not already exist.  This allows a client to
look up an account URL based on an account key (see
<xref target="finding-an-account-url-given-a-key"/>).</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/></t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": {...},
    "nonce": "6S8IqOGY7eL2lsGoTZYifg",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "termsOfServiceAgreed": true,
    "contact": [
      "mailto:cert-admin@example.org",
      "mailto:admin@example.org"
    ]
  }),
  "signature": "RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I"
}
]]></artwork></figure>

<t>The server MUST ignore any values provided in the “orders” fields in account
objects sent by the client, as well as any other fields that it does not
recognize. If new fields are specified in the future, the specification of those
fields MUST describe whether they can be provided by the client. The server MUST
NOT reflect the “onlyReturnExisting” field or any unrecognized fields in the
resulting account object. This allows clients to detect when servers do not
support an extension field.</t>

<t>The server SHOULD validate that the contact URLs in the “contact” field are
valid and supported by the server. If the server validates contact URLs, it MUST
support the “mailto” scheme.  Clients MUST NOT provide a “mailto” URL in the
“contact” field that contains <spanx style="verb">hfields</spanx> <xref target="RFC6068"/> or more than one
<spanx style="verb">addr-spec</spanx> in the <spanx style="verb">to</spanx> component.  If a server encounters a “mailto” contact
URL that does not meet these criteria, then it SHOULD reject it as invalid.</t>

<t>If the server rejects a contact URL for using an
unsupported scheme, it MUST return an error of type “unsupportedContact”, with
a description of the error and what types of contact URLs the server
considers acceptable. If the server rejects a contact URL for using a supported
scheme but an invalid value, then the server MUST return an error of type
“invalidContact”.</t>

<t>If the server wishes to require the client to agree to terms under which the ACME
service is to be used, it MUST indicate the URL where such terms can be accessed
in the “termsOfService” subfield of the “meta” field in the directory object,
and the server MUST reject newAccount requests that do not have the
“termsOfServiceAgreed” field set to “true”.  Clients SHOULD NOT automatically agree
to terms by default.  Rather, they SHOULD require some user interaction for
agreement to terms.</t>

<t>The server creates an account and stores the public key used to verify the
JWS (i.e., the “jwk” element of the JWS header) to authenticate future requests
from the account.  The server returns this account object in a 201 (Created)
response, with the account URL in a Location header field. The account URL is
used as the “kid” value in the JWS authenticating subsequent requests by this
account (see <xref target="request-authentication"/>).  The account URL is also used for
requests for management actions on this account, as described below.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Replay-Nonce: D8s4D2mLs8Vn-goWuPQeKA
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/acct/evOfKhNU60wg

{
  "status": "valid",

  "contact": [
    "mailto:cert-admin@example.org",
    "mailto:admin@example.org"
  ],

  "orders": "https://example.com/acme/acct/evOfKhNU60wg/orders"
}
]]></artwork></figure>

<section anchor="finding-an-account-url-given-a-key" title="Finding an Account URL Given a Key">

<t>If the server receives a newAccount request signed with a key for which it already has an account registered with the provided account key,
then it MUST return a response with status code 200 (OK) and provide the URL of
that account in the Location header field.  The body of this response represents the account object as it existed on the server before this request; any fields in the request object MUST be ignored.  This allows a client that has
an account key but not the corresponding account URL to recover the account URL.</t>

<t>If a client wishes to find the URL for an existing account and does not want an
account to be created if one does not already exist, then it SHOULD do so by
sending a POST request to the newAccount URL with a JWS whose payload has an
“onlyReturnExisting” field set to “true” ({“onlyReturnExisting”: true}).
If a client sends such a request and an account does not exist, then the server
MUST return an error response with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:accountDoesNotExist”.</t>

</section>
<section anchor="account-update" title="Account Update">

<t>If the client wishes to update this information in the future, it sends a POST
request with updated information to the account URL.  The server MUST ignore any
updates to the “orders” field, “termsOfServiceAgreed” field (see <xref target="changes-of-terms-of-service"/>), the “status” field (except as allowed by <xref target="account-deactivation"/>), or any other fields it does not recognize. If the server
accepts the update, it MUST return a response with a 200 (OK) status code and the
resulting account object.</t>

<t>For example, to update the contact information in the above account, the client
could send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ax5RnthDqp_Yf4_HZnFLmA",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "contact": [
      "mailto:certificates@example.org",
      "mailto:admin@example.org"
    ]
  }),
  "signature": "hDXzvcj8T6fbFbmn...rDzXzzvzpRy64N0o"
}
]]></artwork></figure>

</section>
<section anchor="changes-of-terms-of-service" title="Changes of Terms of Service">

<t>As described above, a client can indicate its agreement with the CA’s terms of
service by setting the “termsOfServiceAgreed” field in its account object to
“true”.</t>

<t>If the server has changed its terms of service since a client initially agreed,
and the server is unwilling to process a request without explicit agreement to
the new terms, then it MUST return an error response with status code 403
(Forbidden) and type “urn:ietf:params:acme:error:userActionRequired”.  This
response MUST include a Link header field with link relation “terms-of-service” and
the latest terms-of-service URL.</t>

<t>The problem document returned with the error MUST also include an “instance”
field, indicating a URL that the client should direct a human user to visit in
order for instructions on how to agree to the terms.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Replay-Nonce: T81bdZroZ2ITWSondpTmAw
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/terms/2017-6-02>;rel="terms-of-service"
Content-Type: application/problem+json
Content-Language: en

{
  "type": "urn:ietf:params:acme:error:userActionRequired",
  "detail": "Terms of service have changed",
  "instance": "https://example.com/acme/agreement/?token=W8Ih3PswD-8"
}
]]></artwork></figure>

</section>
<section anchor="external-account-binding" title="External Account Binding">

<t>The server MAY require a value for the “externalAccountBinding” field to be
present in “newAccount” requests.  This can be used to associate an ACME account with an
existing account in a non-ACME system, such as a CA customer database.</t>

<t>To enable ACME account binding, the CA operating the ACME server needs to provide the ACME client with a
MAC key and a key identifier, using some mechanism outside of ACME. The key
identifier MUST be an ASCII string. The MAC key SHOULD be provided in
base64url-encoded form, to maximize compatibility between non-ACME provisioning systems
and ACME clients.</t>

<t>The ACME client then computes a binding JWS to indicate the external account holder’s
approval of the ACME account key.  The payload of this JWS is the ACME account key
being registered, in JWK form.  The protected header of the JWS MUST meet the
following criteria:</t>

<t><list style="symbols">
  <t>The “alg” field MUST indicate a MAC-based algorithm</t>
  <t>The “kid” field MUST contain the key identifier provided by the CA</t>
  <t>The “nonce” field MUST NOT be present</t>
  <t>The “url” field MUST be set to the same value as the outer JWS</t>
</list></t>

<t>The “signature” field of the JWS will contain the MAC value computed with the
MAC key provided by the CA.</t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": /* account key */,
    "nonce": "K60BWPrMQG9SDxBDS_xtSw",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "contact": [
      "mailto:cert-admin@example.org",
      "mailto:admin@example.org"
    ],
    "termsOfServiceAgreed": true,

    "externalAccountBinding": {
      "protected": base64url({
        "alg": "HS256",
        "kid": /* key identifier from CA */,
        "url": "https://example.com/acme/new-account"
      }),
      "payload": base64url(/* same as in "jwk" above */),
      "signature": /* MAC using MAC key from CA */
    }
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>If such a CA requires that newAccount requests contain an “externalAccountBinding”
field, then it MUST provide the value “true” in the “externalAccountRequired” subfield
of the “meta” field in the directory object.  If the CA receives a
newAccount request without an “externalAccountBinding” field, then it SHOULD
reply with an error of type “externalAccountRequired”.</t>

<t>When a CA receives a newAccount request containing an
“externalAccountBinding” field, it decides whether or not to verify the
binding.  If the CA does not verify the binding, then it MUST NOT reflect the
“externalAccountBinding” field in the resulting account object (if any).  To
verify the account binding, the CA MUST take the following steps:</t>

<t><list style="numbers">
  <t>Verify that the value of the field is a well-formed JWS</t>
  <t>Verify that the JWS protected field meets the above criteria</t>
  <t>Retrieve the MAC key corresponding to the key identifier in the “kid” field</t>
  <t>Verify that the MAC on the JWS verifies using that MAC key</t>
  <t>Verify that the payload of the JWS represents the same key as was used to
verify the outer JWS (i.e., the “jwk” field of the outer JWS)</t>
</list></t>

<t>If all of these checks pass and the CA creates a new account, then the CA may
consider the new account associated with the external account corresponding to
the MAC key.  The account object the CA returns MUST include an
“externalAccountBinding” field with the same value as the field in
the request.  If any of these checks fail, then the CA MUST
reject the newAccount request.</t>

</section>
<section anchor="account-key-roll-over" title="Account Key Rollover">

<t>A client may wish to change the public key that is associated with an account in
order to recover from a key compromise or proactively mitigate the impact of an
unnoticed key compromise.</t>

<t>To change the key associated with an account, the client sends a
request to the server containing signatures by both the old and new
keys.  The signature by the new key covers the account URL and the
old key, signifying a request by the new key holder to take over the
account from the old key holder.  The signature by the old key
covers this request and its signature, and indicates the old key
holder’s assent to the rollover request.</t>

<t>To create this request object, the client first constructs a
keyChange object describing the account to be updated and its
account key:</t>

<t><list style="hanging">
  <t hangText='account (required, string):'>
  The URL for the account being modified.  The content of this field MUST be the
exact string provided in the Location header field in response to the
newAccount request that created the account.</t>
  <t hangText='oldKey (required, JWK):'>
  The JWK representation of the old key.</t>
</list></t>

<t>The client then encapsulates the keyChange object in an “inner” JWS, signed with the
requested new account key.
This “inner” JWS becomes the payload for the “outer” JWS that is the body of the ACME
request.</t>

<t>The outer JWS MUST meet the normal requirements for an ACME JWS request body (see
<xref target="request-authentication"/>).  The inner JWS MUST meet the normal requirements,
with the following differences:</t>

<t><list style="symbols">
  <t>The inner JWS MUST have a “jwk” header parameter, containing the public key of
the new key pair.</t>
  <t>The inner JWS MUST have the same “url” header parameter as the outer JWS.</t>
  <t>The inner JWS MUST omit the “nonce” header parameter.</t>
</list></t>

<t>This transaction has signatures from both the old and new keys so that the
server can verify that the holders of the two keys both agree to the change.
The signatures are nested to preserve the property that all signatures on POST
messages are signed by exactly one key.  The “inner” JWS effectively
represents a request by the holder of the new key to take over the
account form the holder of the old key.  The “outer” JWS represents
the current account holder’s assent to this request.</t>

<figure><artwork><![CDATA[
POST /acme/key-change HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "S9XaOcxP5McpnTcWPIhYuB",
    "url": "https://example.com/acme/key-change"
  }),
  "payload": base64url({
    "protected": base64url({
      "alg": "ES256",
      "jwk": /* new key */,
      "url": "https://example.com/acme/key-change"
    }),
    "payload": base64url({
      "account": "https://example.com/acme/acct/evOfKhNU60wg",
      "oldKey": /* old key */
    }),
    "signature": "Xe8B94RD30Azj2ea...8BmZIRtcSKPSd8gU"
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>On receiving a keyChange request, the server MUST perform the following steps in
addition to the typical JWS validation:</t>

<t><list style="numbers">
  <t>Validate the POST request belongs to a currently active account, as described
in <xref target="message-transport"/>.</t>
  <t>Check that the payload of the JWS is a well-formed JWS object (the “inner
JWS”).</t>
  <t>Check that the JWS protected header of the inner JWS has a “jwk” field.</t>
  <t>Check that the inner JWS verifies using the key in its “jwk” field.</t>
  <t>Check that the payload of the inner JWS is a well-formed keyChange object
(as described above).</t>
  <t>Check that the “url” parameters of the inner and outer JWSs are the same.</t>
  <t>Check that the “account” field of the keyChange object contains the URL for
the account matching the old key (i.e., the “kid” field in the
outer JWS).</t>
  <t>Check that the “oldKey” field of the keyChange object is the
same as the account key for the account in question.</t>
  <t>Check that no account exists whose account key is the same as the key in the
“jwk” header parameter of the inner JWS.</t>
</list></t>

<t>If all of these checks pass, then the server updates the corresponding account
by replacing the old account key with the new public key and returns status
code 200 (OK). Otherwise, the server responds with an error status code and a
problem document describing the error.  If there is an existing account with
the new key provided, then the server SHOULD use status code 409 (Conflict) and
provide the URL of that account in the Location header field.</t>

<t>Note that changing the account key for an account SHOULD NOT have any other
impact on the account.  For example, the server MUST NOT invalidate pending
orders or authorization transactions based on a change of account key.</t>

</section>
<section anchor="account-deactivation" title="Account Deactivation">

<t>A client can deactivate an account by posting a signed update to the account URL with
a status field of “deactivated”.  Clients may wish to do this when the account
key is compromised or decommissioned. A deactivated account can no longer request
certificate issuance or access resources related to the account, such as orders
or authorizations.  If a server receives a POST or POST-as-GET from
a deactivated account, it MUST return an error response with status
code 401 (Unauthorized) and type “urn:ietf:params:acme:error:unauthorized”.</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ntuJWWSic4WVNSqeUmshgg",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "earzVLd3m5M4xJzR...bVTqn7R08AKOVf3Y"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key. If the
server accepts the deactivation request, it replies with a 200 (OK) status code
and the current contents of the account object.</t>

<t>Once an account is deactivated, the server MUST NOT accept further requests
authorized by that account’s key. The server SHOULD cancel any pending operations authorized
by the account’s key, such as certificate orders. A server may take a variety of actions in
response to an account deactivation, e.g., deleting data related to that account
or sending mail to the account’s contacts.  Servers SHOULD NOT revoke
certificates issued by the deactivated account, since this could cause
operational disruption for servers using these certificates. ACME does not
provide a way to reactivate a deactivated account.</t>

</section>
</section>
<section anchor="applying-for-certificate-issuance" title="Applying for Certificate Issuance">

<t>The client begins the certificate issuance process by sending a POST request to the server’s
newOrder resource.  The body of the POST is a JWS object whose JSON payload is
a subset of the order object defined in <xref target="order-objects"/>, containing the fields
that describe the certificate to be issued:</t>

<t><list style="hanging">
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the client wishes to submit an order for.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-order HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "5XJ1L3lEkMG7tR6pA00clA",
    "url": "https://example.com/acme/new-order"
  }),
  "payload": base64url({
    "identifiers": [
      { "type": "dns", "value": "www.example.org" },
      { "type": "dns", "value": "example.org" }
    ],
    "notBefore": "2016-01-01T00:04:00+04:00",
    "notAfter": "2016-01-08T00:04:00+04:00"
  }),
  "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g"
}
]]></artwork></figure>

<t>The server MUST return an error if it cannot fulfill the request as specified,
and it MUST NOT issue a certificate with contents other than those requested.  If
the server requires the request to be modified in a certain way, it should
indicate the required changes using an appropriate error type and description.</t>

<t>If the server is willing to issue the requested certificate, it responds with a
201 (Created) response.  The body of this response is an order object reflecting
the client’s request and any authorizations the client must complete before the
certificate will be issued.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Replay-Nonce: MYAuvOpaoIiywTezizk5vw
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "pending",
  "expires": "2016-01-05T14:09:07.99Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize"
}
]]></artwork></figure>

<t>The order object returned by the server represents a promise that if the
client fulfills the server’s requirements before the “expires” time, then the
server will be willing to finalize the order upon request and issue the
requested certificate.  In the order object, any authorization referenced in the
“authorizations” array whose status is “pending” represents an authorization
transaction that the client must complete before the server will issue the
certificate (see <xref target="identifier-authorization"/>).  If the client fails to complete
the required actions before the “expires” time, then the server SHOULD change
the status of the order to “invalid” and MAY delete the order resource. Clients
MUST NOT make any assumptions about the sort order of “identifiers” or
“authorizations” elements in the returned order object.</t>

<t>Once the client believes it has fulfilled the server’s requirements, it should
send a POST request to the order resource’s finalize URL. The POST body MUST
include a CSR:</t>

<t><list style="hanging">
  <t hangText='csr (required, string):'>
  A CSR encoding the parameters for the certificate being requested <xref target="RFC2986"/>.
The CSR is sent in the base64url-encoded version of the DER format.  (Note:
Because this field uses base64url, and does not include headers, it is different
from PEM.)</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/order/TOlocE8rfgo/finalize HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "MSF2j2nawWHPxxkE3ZJtKQ",
    "url": "https://example.com/acme/order/TOlocE8rfgo/finalize"
  }),
  "payload": base64url({
    "csr": "MIIBPTCBxAIBADBFMQ...FS6aKdZeGsysoCo4H9P",
  }),
  "signature": "uOrUfIIk5RyQ...nw62Ay1cl6AB"
}
]]></artwork></figure>

<t>The CSR encodes the client’s requests with regard to the content of the
certificate to be issued.  The CSR MUST indicate the exact same set of requested
identifiers as the initial newOrder request.  Identifiers of type “dns” MUST appear either in the commonName portion
of the requested subject name or in an extensionRequest attribute <xref target="RFC2985"/>
requesting a subjectAltName extension, or both.  (These identifiers may appear
in any sort order.)  Specifications that define
new identifier types must specify where in the certificate signing
request these
identifiers can appear.</t>

<t>A request to finalize an order will result in an error if the CA is unwilling to issue a certificate corresponding to the submitted CSR.  For example:</t>

<t><list style="symbols">
  <t>If the CSR and order identifiers differ</t>
  <t>If the account is not authorized for the identifiers indicated in the CSR</t>
  <t>If the CSR requests extensions that the CA is not willing to include</t>
</list></t>

<t>In such cases, the problem document returned by the server SHOULD
use error code “badCSR” and describe specific reasons the CSR was
rejected in its “detail” field.  After returning such an error, the
server SHOULD leave the order in the “ready” state, to allow the
client to submit a new finalize request with an amended CSR.</t>

<t>A request to finalize an order will result in error if the order is not in the
“ready” state.  In such cases, the server MUST return a 403 (Forbidden) error
with a problem document of type “orderNotReady”.  The client should then send a
POST-as-GET request to the order resource to obtain its current state.  The
status of the order will indicate what action the client should take (see
below).</t>

<t>If a request to finalize an order is successful, the server will return a 200
(OK) with an updated order object.  The status of the order will indicate what
action the client should take:</t>

<t><list style="symbols">
  <t>“invalid”: The certificate will not be issued.  Consider this order process
abandoned.</t>
  <t>“pending”: The server does not believe that the client has fulfilled the
requirements.  Check the “authorizations” array for entries that are still
pending.</t>
  <t>“ready”: The server agrees that the requirements have been
fulfilled, and is awaiting finalization.  Submit a finalization
request.</t>
  <t>“processing”: The certificate is being issued. Send a POST-as-GET request after the
time given in the Retry-After header field of the response, if
any.</t>
  <t>“valid”: The server has issued the certificate and provisioned its URL to the
“certificate” field of the order.  Download the certificate.</t>
</list></t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: CGf81JWBsq8QyIgPCi9Q9X
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "valid",
  "expires": "2016-01-20T14:09:07.99Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<section anchor="pre-authorization" title="Pre-authorization">

<t>The order process described above presumes that authorization objects are
created reactively, in response to a certificate order.  Some servers
may also wish to enable clients to obtain authorization for an identifier
proactively, outside of the context of a specific issuance.  For example, a
client hosting virtual servers for a collection of names might wish to obtain
authorization before any virtual servers are created and only create a certificate when
a virtual server starts up.</t>

<t>In some cases, a CA running an ACME server might have a completely external,
non-ACME process for authorizing a client to issue certificates for an identifier.  In these
cases, the CA should provision its ACME server with authorization objects
corresponding to these authorizations and reflect them as already valid in any
orders submitted by the client.</t>

<t>If a CA wishes to allow pre-authorization within ACME, it can offer a “new
authorization” resource in its directory by adding the field “newAuthz” with a
URL for the newAuthz resource.</t>

<t>To request authorization for an identifier, the client sends a POST request to
the newAuthz resource specifying the identifier for which authorization
is being requested.</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier to appear in the resulting authorization object
(see <xref target="authorization-objects"/>).

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-authz HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/new-authz"
  }),
  "payload": base64url({
    "identifier": {
      "type": "dns",
      "value": "example.org"
    }
  }),
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}
]]></artwork></figure>

<t>Note that because the identifier in a pre-authorization request is
the exact identifier to be included in the authorization object,
pre-authorization cannot be used to authorize issuance of certificates
containing wildcard domain names.</t>

<t>Before processing the authorization request, the server SHOULD determine whether
it is willing to issue certificates for the identifier.  For example, the server
should check that the identifier is of a supported type.  Servers might also
check names against a blacklist of known high-value identifiers.  If the server
is unwilling to issue for the identifier, it SHOULD return an error
with status code 403 (Forbidden), with a problem document describing
the reason for the rejection.</t>

<t>If the server is willing to proceed, it builds a pending authorization object
from the inputs submitted by the client:</t>

<t><list style="symbols">
  <t>“identifier” the identifier submitted by the client</t>
  <t>“status” MUST be “pending” unless the server has out-of-band information
about the client’s authorization status</t>
  <t>“challenges” as selected by the server’s policy for this identifier</t>
</list></t>

<t>The server allocates a new URL for this authorization and returns a 201
(Created) response with the authorization URL in the Location header field and
the JSON authorization object in the body.  The client then follows the process
described in <xref target="identifier-authorization"/> to complete the authorization process.</t>

</section>
<section anchor="downloading-the-certificate" title="Downloading the Certificate">

<t>To download the issued certificate, the client simply sends a POST-as-GET request to the
certificate URL.</t>

<t>The default format of the certificate is application/pem-certificate-chain (see <xref target="iana-considerations"/>).</t>

<t>The server MAY provide one or more link relation header fields <xref target="RFC5988"/> with
relation “alternate”. Each such field SHOULD express an alternative certificate
chain starting with the same end-entity certificate. This can be used to express
paths to various trust anchors. Clients can fetch these alternates and use their
own heuristics to decide which is optimal.</t>

<figure><artwork><![CDATA[
POST /acme/cert/mAt3xBGaobw HTTP/1.1
Host: example.com
Content-Type: application/jose+json
Accept: application/pem-certificate-chain

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/cert/mAt3xBGaobw"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/pem-certificate-chain
Link: <https://example.com/acme/directory>;rel="index"

-----BEGIN CERTIFICATE-----
[End-entity certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Issuer certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Other certificate contents]
-----END CERTIFICATE-----
]]></artwork></figure>

<t>A certificate resource represents a single, immutable certificate. If the client
wishes to obtain a renewed certificate, the client initiates a new order process
to request one.</t>

<t>Because certificate resources are immutable once issuance is complete, the
server MAY enable the caching of the resource by adding Expires and
Cache-Control header fields specifying a point in time in the distant future. These
header fields have no relation to the certificate’s period of validity.</t>

<t>The ACME client MAY request other formats by including an Accept
header field <xref target="RFC7231"/> in its request.  For example, the client could use the media type
<spanx style="verb">application/pkix-cert</spanx> <xref target="RFC2585"/> or <spanx style="verb">application/pkcs7-mime</spanx> <xref target="RFC5751"/> to request the end-entity certificate
in DER format. Server support for alternate formats is OPTIONAL. For
formats that can only express a single certificate, the server SHOULD
provide one or more <spanx style="verb">Link: rel="up"</spanx> header fields pointing to an issuer or
issuers so that ACME clients can build a certificate chain as defined
in TLS (see Section 4.4.2 of <xref target="RFC8446"/>).</t>

</section>
</section>
<section anchor="identifier-authorization" title="Identifier Authorization">

<t>The identifier authorization process establishes the authorization of an account
to manage certificates for a given identifier.  This process assures the
server of two things:</t>

<t><list style="numbers">
  <t>That the client controls the private key of the account key pair, and</t>
  <t>That the client controls the identifier in question.</t>
</list></t>

<t>This process may be repeated to associate multiple identifiers with an account
(e.g., to request certificates with multiple identifiers) or to associate
multiple accounts with an identifier (e.g., to allow multiple entities to manage
certificates).</t>

<t>Authorization resources are created by the server in response to newOrder or
newAuthz requests submitted by an account key holder; their
URLs are provided to the client in the responses to these requests.  The
authorization object is implicitly tied to the account key used to sign the
request.</t>

<t>When a client receives an order from the server in reply to a newOrder request, it downloads the authorization
resources by sending POST-as-GET requests to the indicated URLs.  If the client
initiates authorization using a request to the newAuthz resource, it
will have already received the pending authorization object in the response
to that request.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "pending",
  "expires": "2016-01-02T14:09:30Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    },
    {
      "type": "dns-01",
      "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    }
  ]
}
]]></artwork></figure>

<section anchor="responding-to-challenges" title="Responding to Challenges">

<t>To prove control of the identifier and receive authorization, the client needs to
provision the required challenge response based on the challenge type and
indicate to the server that it is ready for the challenge validation to
be attempted.</t>

<t>The client indicates to the server that it is ready for the challenge validation by
sending an empty JSON body (<spanx style="verb">{}</spanx>) carried in a POST request to the challenge
URL (not the authorization URL).</t>

<t>For example, if the client were to respond to the “http-01” challenge in the
above authorization, it would send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4 HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "Q_s3MWoqT05TrdkM2MTDcw",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "9cbg5JO1Gf5YLjjz...SpkUfcdPai9uVYYQ"
}
]]></artwork></figure>

<t>The server updates the authorization document by updating its representation of
the challenge with the response object provided by the client.  The server MUST
ignore any fields in the response object that are not specified as response
fields for this type of challenge.
Note that the challenges in this document do
not define any response fields, but future specifications might define them.
The server provides a 200 (OK) response
with the updated challenge object as its body.</t>

<t>If the client’s response is invalid for any reason or does not provide the
server with appropriate information to validate the challenge, then the server
MUST return an HTTP error.  On receiving such an error, the client SHOULD undo
any actions that have been taken to fulfill the challenge, e.g., removing files
that have been provisioned to a web server.</t>

<t>The server is said to “finalize” the authorization when it has completed
one of the validations.  This is done by assigning the authorization a status of “valid”
or “invalid”, corresponding to whether it considers the account authorized
for the identifier. If the final state is “valid”, then the server MUST include
an “expires” field. When finalizing an authorization, the server MAY remove
challenges other than the one that was completed, and it may modify the “expires”
field. The server SHOULD NOT remove challenges with status “invalid”.</t>

<t>Usually, the validation process will take some time, so the client will need to
poll the authorization resource to see when it is finalized.  For challenges
where the client can tell when the server has validated the challenge (e.g., by
seeing an HTTP or DNS request from the server), the client SHOULD NOT begin
polling until it has seen the validation request from the server.</t>

<t>To check on the status of an authorization, the client sends a POST-as-GET request to
the authorization URL, and the server responds with the current authorization
object. In responding to poll requests while the validation is still in
progress, the server MUST return a 200 (OK) response and MAY include a
Retry-After header field to suggest a polling interval to the client.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "valid",
  "expires": "2018-09-09T14:09:01.13Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "status": "valid",
      "validated": "2014-12-01T12:05:13.72Z",
      "token": "IlirfxKKXAsHtmzK29Pj8A"
    }
  ]
}
]]></artwork></figure>

</section>
<section anchor="deactivating-an-authorization" title="Deactivating an Authorization">

<t>If a client wishes to relinquish its authorization to issue certificates for an
identifier, then it may request that the server deactivate each authorization
associated with it by sending POST requests with the static object
{“status”: “deactivated”} to each authorization URL.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "xWCM9lGbIyCgue8di6ueWQ",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "srX9Ji7Le9bjszhu...WTFdtujObzMtZcx4"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key
corresponding to the account that owns the authorization. If the server accepts
the deactivation, it should reply with a 200 (OK) status code and the updated
contents of the authorization object.</t>

<t>The server MUST NOT treat deactivated authorization objects as sufficient for
issuing certificates.</t>

</section>
</section>
<section anchor="certificate-revocation" title="Certificate Revocation">

<t>To request that a certificate be revoked, the client sends a POST request to
the ACME server’s revokeCert URL.  The body of the POST is a JWS object whose
JSON payload contains the certificate to be revoked:</t>

<t><list style="hanging">
  <t hangText='certificate (required, string):'>
  The certificate to be revoked, in the base64url-encoded version of the DER
format.  (Note: Because this field uses base64url, and does not include headers,
it is different from PEM.)</t>
  <t hangText='reason (optional, int):'>
  One of the revocation reasonCodes defined in Section 5.3.1 of <xref target="RFC5280"/>
to be used when generating OCSP responses and CRLs. If this field is not set,
the server SHOULD omit the reasonCode CRL entry extension when generating OCSP
responses and CRLs. The server MAY disallow a subset of reasonCodes from being
used by the user. If a request contains a disallowed reasonCode, then the server MUST
reject it with the error type “urn:ietf:params:acme:error:badRevocationReason”.
The problem document detail SHOULD indicate which reasonCodes are allowed.</t>
</list></t>

<t>Revocation requests are different from other ACME requests in that they can be
signed with either an account key pair or the key pair in the certificate.</t>

<t>Example using an account key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 4
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Example using the certificate key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "RS256",
    "jwk": /* certificate's public key */,
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 1
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Before revoking a certificate, the server MUST verify that the key used to sign
the request is authorized to revoke the certificate.  The server MUST consider
at least the following accounts authorized for a given certificate:</t>

<t><list style="symbols">
  <t>the account that issued the certificate.</t>
  <t>an account that holds authorizations for all of the identifiers in the
certificate.</t>
</list></t>

<t>The server MUST also consider a revocation request valid if it is signed with
the private key corresponding to the public key in the certificate.</t>

<t>If the revocation succeeds, the server responds with status code 200 (OK).  If
the revocation fails, the server returns an error.  For example, if the certificate
has already been revoked, the server returns an error response with status code 400
(Bad Request) and type “urn:ietf:params:acme:error:alreadyRevoked”.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Length: 0
Link: <https://example.com/acme/directory>;rel="index"

--- or ---

HTTP/1.1 403 Forbidden
Replay-Nonce: lXfyFzi6238tfPQRwgfmPU
Content-Type: application/problem+json
Content-Language: en
Link: <https://example.com/acme/directory>;rel="index"

{
  "type": "urn:ietf:params:acme:error:unauthorized",
  "detail": "No authorization provided for name example.org"
}
]]></artwork></figure>

</section>
</section>
<section anchor="identifier-validation-challenges" title="Identifier Validation Challenges">

<t>There are few types of identifiers in the world for which there is a standardized
mechanism to prove possession of a given identifier.  In all practical cases,
CAs rely on a variety of means to test whether an entity applying for a
certificate with a given identifier actually controls that identifier.</t>

<t>Challenges provide the server with assurance that an account holder is also
the entity that controls an identifier.  For each type of challenge, it must be
the case that, in order for an entity to successfully complete the challenge, the
entity must both:</t>

<t><list style="symbols">
  <t>Hold the private key of the account key pair used to respond to the challenge, and</t>
  <t>Control the identifier in question.</t>
</list></t>

<t><xref target="security-considerations"/> documents how the challenges defined in this
document meet these requirements.  New challenges will need to document how they
do.</t>

<t>ACME uses an extensible challenge/response framework for identifier validation.
The server presents a set of challenges in the authorization object it sends to a
client (as objects in the “challenges” array), and the client responds by
sending a response object in a POST request to a challenge URL.</t>

<t>This section describes an initial set of challenge types.  The definition of a
challenge type includes:</t>

<t><list style="numbers">
  <t>Content of challenge objects</t>
  <t>Content of response objects</t>
  <t>How the server uses the challenge and response to verify control of an
identifier</t>
</list></t>

<t>Challenge objects all contain the following basic fields:</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The type of challenge encoded in the object.</t>
  <t hangText='url (required, string):'>
  The URL to which a response can be posted.</t>
  <t hangText='status (required, string):'>
  The status of this challenge.  Possible values are “pending”,
“processing”, “valid”, and “invalid” (see <xref target="status-changes"/>).</t>
  <t hangText='validated (optional, string):'>
  The time at which the server validated this challenge, encoded in the
format specified in <xref target="RFC3339"/>.  This field is REQUIRED if the
“status” field is “valid”.</t>
  <t hangText='error (optional, object):'>
  Error that occurred while the server was validating the challenge, if any,
structured as a problem document <xref target="RFC7807"/>. Multiple errors can be indicated
by using subproblems <xref target="subproblems"/>. A challenge object with an error MUST have
status equal to “invalid”.</t>
</list></t>

<t>All additional fields are specified by the challenge type.  If the server sets a
challenge’s “status” to “invalid”, it SHOULD also include the “error” field to
help the client diagnose why the challenge failed.</t>

<t>Different challenges allow the server to obtain proof of different aspects of
control over an identifier.  In some challenges, like HTTP and DNS, the
client directly proves its ability to do certain things related to the
identifier.  The choice of which challenges to offer to a client under which
circumstances is a matter of server policy.</t>

<t>The identifier validation challenges described in this section all relate to
validation of domain names.  If ACME is extended in the future to support other
types of identifiers, there will need to be new challenge types, and they will
need to specify which types of identifier they apply to.</t>

<section anchor="key-authorizations" title="Key Authorizations">

<t>All challenges defined in this document make use of a key authorization
string.  A key authorization is a string that concatenates the token for the
challenge with a key fingerprint, separated by a “.” character:</t>

<figure><artwork><![CDATA[
keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))
]]></artwork></figure>

<t>The “Thumbprint” step indicates the computation specified in <xref target="RFC7638"/>,
using the SHA-256 digest <xref target="FIPS180-4"></xref>.  As noted in <xref target="RFC7518"/> any prepended
zero octets in the fields of a JWK object MUST be stripped before doing the computation.</t>

<t>As specified in the individual challenges below, the token for a challenge is a
string comprised entirely of characters in the URL-safe base64 alphabet.
The “||” operator indicates concatenation of strings.</t>

</section>
<section anchor="retrying-challenges" title="Retrying Challenges">

<t>ACME challenges typically require the client to set up some network-accessible
resource that the server can query in order to validate that the client
controls an identifier.  In practice, it is not uncommon for the server’s
queries to fail while a resource is being set up, e.g., due to information
propagating across a cluster or firewall rules not being in place.</t>

<t>Clients SHOULD NOT respond to challenges until they believe that the server’s
queries will succeed. If a server’s initial validation query fails, the server
SHOULD retry the query after some time, in order to account for delay in setting
up responses such as DNS records or HTTP resources. The precise retry schedule
is up to the server, but server operators should keep in mind the operational
scenarios that the schedule is trying to accommodate.  Given that retries are
intended to address things like propagation delays in HTTP or DNS provisioning,
there should not usually be any reason to retry more often than every 5 or 10
seconds. While the server is still trying, the
status of the challenge remains “processing”; it is only marked “invalid” once the
server has given up.</t>

<t>The server MUST provide information about its retry state to the client via the
“error” field in the challenge and the Retry-After HTTP header field in
response to requests to the challenge resource. The server MUST add an entry to
the “error” field in the challenge after each failed validation query. The
server SHOULD set the Retry-After header field to a time after the server’s
next validation query, since the status of the challenge will not change until
that time.</t>

<t>Clients can explicitly request a retry by re-sending their response to a
challenge in a new POST request (with a new nonce, etc.). This allows clients
to request a retry when the state has changed (e.g., after firewall rules have been
updated). Servers SHOULD retry a request immediately on receiving such a POST
request. In order to avoid denial-of-service attacks via client-initiated
retries, servers SHOULD rate-limit such requests.</t>

</section>
<section anchor="http-challenge" title="HTTP Challenge">

<t>With HTTP validation, the client in an ACME transaction proves its control over
a domain name by proving that it can provision HTTP resources on a server
accessible under that domain name.
The ACME server challenges the client to
provision a file at a specific path, with a specific string as its content.</t>

<t>As a domain may resolve to multiple IPv4 and IPv6 addresses, the server will
connect to at least one of the hosts found in the DNS A and AAAA records, at its
discretion.  Because many web servers allocate a default HTTPS virtual host to a
particular low-privilege tenant user in a subtle and non-intuitive manner, the
challenge must be completed over HTTP, not HTTPS.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “http-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy.
It MUST NOT contain any characters outside the base64url alphabet and MUST NOT
include base64 padding characters (“=”).  See <xref target="RFC4086"/> for additional information
on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "http-01",
  "url": "https://example.com/acme/chall/prV_B7yEyA4",
  "status": "pending",
  "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from
the “token” value provided in the challenge and the client’s account key.  The
client then provisions the key authorization as a resource on the HTTP server
for the domain in question.</t>

<t>The path at which the resource is provisioned is comprised of the fixed prefix
“/.well-known/acme-challenge/”, followed by the “token” value in the challenge.
The value of the resource MUST be the ASCII representation of the key
authorization.</t>

<figure><artwork><![CDATA[
GET /.well-known/acme-challenge/LoqXcYV8...jxAjEuX0
Host: example.org

HTTP/1.1 200 OK
Content-Type: application/octet-stream

LoqXcYV8...jxAjEuX0.9jg46WB3...fm21mqTI
]]></artwork></figure>

<t>(In the above, “…” indicates that the token and the JWK
thumbprint in the key authorization have been truncated to fit on
the page.)</t>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>Given a challenge/response pair, the server verifies the client’s control of the
domain by verifying that the resource was provisioned as expected.</t>

<t><list style="numbers">
  <t>Construct a URL by populating the URL template <xref target="RFC6570"/>
“http://{domain}/.well-known/acme-challenge/{token}”, where:
  <list style="symbols">
      <t>the domain field is set to the domain name being verified; and</t>
      <t>the token field is set to the token in the challenge.</t>
    </list></t>
  <t>Verify that the resulting URL is well-formed.</t>
  <t>Dereference the URL using an HTTP GET request.  This request MUST be sent to
TCP port 80 on the HTTP server.</t>
  <t>Verify that the body of the response is a well-formed key authorization.  The
server SHOULD ignore whitespace characters at the end of the body.</t>
  <t>Verify that key authorization provided by the HTTP server matches the key
authorization stored by the server.</t>
</list></t>

<t>The server SHOULD follow redirects when dereferencing the URL.
Clients might use redirects, for example, so that the response can
be provided by a centralized certificate management server.  See
<xref target="integrity-of-authorizations"/> for security considerations related
to redirects.</t>

<t>If all of the above verifications succeed, then the validation is successful.
If the request fails, or the body does not pass these checks, then it has
failed.</t>

<t>The client SHOULD de-provision the resource provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

<t>Note that because the token appears both in the request sent by the
ACME server and in the key authorization in the response, it is
possible to build clients that copy the token from request to
response.  Clients should avoid this behavior because it can lead
to cross-site scripting vulnerabilities; instead, clients should be
explicitly configured on a per-challenge basis. A client that does
copy tokens from requests to responses MUST validate that the token
in the request matches the token syntax above (e.g., that it
includes only characters from the base64url alphabet).</t>

</section>
<section anchor="dns-challenge" title="DNS Challenge">

<t>When the identifier being validated is a domain name, the client can prove
control of that domain by provisioning a TXT resource record containing a designated
value for a specific validation domain name.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “dns-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy. It MUST NOT contain any characters outside the
base64url alphabet, including padding characters (“=”). See <xref target="RFC4086"/> for
additional information on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "dns-01",
  "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
  "status": "pending",
  "token": "evaGxfADs6pSRb2LAv9IZf17Dt3juxGJ-PCt92wr-oA"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from the
“token” value provided in the challenge and the client’s account key.  The
client then computes the SHA-256 digest <xref target="FIPS180-4"></xref> of the key authorization.</t>

<t>The record provisioned to the DNS contains the base64url encoding of this digest.  The
client constructs the validation domain name by prepending the label
“_acme-challenge” to the domain name being validated, then provisions a TXT
record with the digest value under that name. For example, if the domain name
being validated is “www.example.org”, then the client would provision the following
DNS record:</t>

<figure><artwork><![CDATA[
_acme-challenge.www.example.org. 300 IN TXT "gfj9Xq...Rg85nM"
]]></artwork></figure>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/Rg5dV14Gh1Q
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "SS2sSl1PtspvFZ08kNtzKd",
    "url": "https://example.com/acme/chall/Rg5dV14Gh1Q"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>To validate a DNS challenge, the server performs the following steps:</t>

<t><list style="numbers">
  <t>Compute the SHA-256 digest <xref target="FIPS180-4"></xref> of the stored key authorization</t>
  <t>Query for TXT records for the validation domain name</t>
  <t>Verify that the contents of one of the TXT records match the digest value</t>
</list></t>

<t>If all of the above verifications succeed, then the validation is successful.
If no DNS record is found, or DNS record and response payload do not pass these
checks, then the validation fails.</t>

<t>The client SHOULD de-provision the resource record(s) provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-applicationpem-certificate-chain" title="Media Type: application/pem-certificate-chain">

<t>A file of this type contains one or more certificates encoded with
the PEM textual encoding, according to <xref target="RFC7468"/>.  The
textual encoding of certificates in this file MUST use the strict
encoding and MUST NOT include explanatory text.  The ABNF for this
format is as follows, where <spanx style="verb">stricttextualmsg</spanx> and <spanx style="verb">eol</spanx> are as
defined in Section 3 of RFC 7468:</t>

<figure><artwork><![CDATA[
certchain = stricttextualmsg *(eol stricttextualmsg)
]]></artwork></figure>

<t>In order to provide easy interoperation with TLS, the first
certificate MUST be an end-entity certificate. Each following certificate
SHOULD directly certify the one preceding it. Because certificate validation
requires that trust anchors be distributed independently, a certificate
that represents a trust anchor MAY be omitted from the chain, provided
that supported peers are known to possess any omitted certificates.</t>

<t>The following has been registered in the “Media Types” registry:</t>

<t>Type name: application</t>

<t>Subtype name: pem-certificate-chain</t>

<t>Required parameters: None</t>

<t>Optional parameters: None</t>

<t>Encoding considerations: 7bit</t>

<t>Security considerations: Carries a cryptographic certificate and its associated certificate chain.  This media type carries no active content.</t>

<t>Interoperability considerations: None</t>

<t>Published specification: RFC 8555</t>

<t>Applications that use this media type: ACME clients and servers, HTTP servers, other applications that need to be configured with a certificate chain</t>

<t>Additional information:</t>

<figure><artwork><![CDATA[
Deprecated alias names for this type: n/a
Magic number(s): n/a
File extension(s): .pem
Macintosh file type code(s): n/a
]]></artwork></figure>

<t>Person &amp; email address to contact for further information: See Authors’ Addresses section.</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: n/a</t>

<t>Author: See Authors’ Addresses section.</t>

<t>Change controller: IETF &lt;iesg@ietf.org&gt;</t>

</section>
<section anchor="well-known-uri-for-the-http-challenge" title="Well-Known URI for the HTTP Challenge">

<t>The following value has been registered in the “Well-Known URIs” registry
(using the template from <xref target="RFC5785"/>):</t>

<t>URI suffix: acme-challenge</t>

<t>Change controller: IETF</t>

<t>Specification document(s): RFC 8555, <xref target="http-challenge"/></t>

<t>Related information: N/A</t>

</section>
<section anchor="replay-nonce-http-header" title="Replay-Nonce HTTP Header">

<t>The following value has been registered in the “Message Headers”
registry:</t>

<texttable>
      <ttcol align='left'>Header Field Name</ttcol>
      <ttcol align='left'>Protocol</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Replay-Nonce</c>
      <c>http</c>
      <c>standard</c>
      <c>RFC 8555, <xref target="replay-nonce"/></c>
</texttable>

</section>
<section anchor="url-jws-header-parameter" title="&quot;url&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “url”</t>
  <t>Header Parameter Description: URL</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="url-url-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="nonce-jws-header-parameter" title="&quot;nonce&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “nonce”</t>
  <t>Header Parameter Description: Nonce</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="nonce-nonce-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="acme-urn-space" title="URN Sub-namespace for ACME (urn:ietf:params:acme)">

<t>The following value has been registered in the “IETF URN Sub-namespace for
Registered Protocol Parameter Identifiers” registry, following the
template in <xref target="RFC3553"/>:</t>

<t><list style="hanging">
  <t hangText='Registry name:'>
  acme</t>
  <t hangText='Specification:'>
  RFC 8555</t>
  <t hangText='Repository:'>
  http://www.iana.org/assignments/acme</t>
  <t hangText='Index value:'>
  No transformation needed.</t>
</list></t>

</section>
<section anchor="new-registries" title="New Registries">

<t>IANA has created the following registries:</t>

<t><list style="numbers">
  <t>ACME Account Object Fields (<xref target="iana-account"/>)</t>
  <t>ACME Order Object Fields (<xref target="iana-order"/>)</t>
  <t>ACME Authorization Object Fields (<xref target="iana-authz"/>)</t>
  <t>ACME Error Types (<xref target="iana-error"/>)</t>
  <t>ACME Resource Types (<xref target="iana-resource"/>)</t>
  <t>ACME Directory Metadata Fields (<xref target="iana-meta"/>)</t>
  <t>ACME Identifier Types (<xref target="iana-identifier"/>)</t>
  <t>ACME Validation Methods (<xref target="iana-validation"/>)</t>
</list></t>

<t>All of these registries are under a heading of “Automated Certificate Management
Environment (ACME) Protocol” and are administered under a Specification
Required policy <xref target="RFC8126"/>.</t>

<section anchor="iana-account" title="Fields in Account Objects">

<t>The “ACME Account Object Fields” registry lists field names that are defined
for use in ACME account objects.  Fields marked as “configurable” may be included in a
newAccount request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Requests: Either the value “none” or a list of types of requests
where the field is allowed in a request object, taken from the
following values:
  <list style="symbols">
      <t>“new” - Requests to the “newAccount” URL</t>
      <t>“account” - Requests to an account URL</t>
    </list></t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="account-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Requests</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>contact</c>
      <c>array of string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>externalAccountBinding</c>
      <c>object</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>termsOfServiceAgreed</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>onlyReturnExisting</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>orders</c>
      <c>string</c>
      <c>none</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-order" title="Fields in Order Objects">

<t>The “ACME Order Object Fields” registry lists field names that are defined
for use in ACME order objects.  Fields marked as “configurable” may be included in a
newOrder request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="order-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>identifiers</c>
      <c>array of object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notBefore</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notAfter</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>error</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>authorizations</c>
      <c>array of string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>finalize</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>certificate</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-authz" title="Fields in Authorization Objects">

<t>The “ACME Authorization Object Fields” registry lists field names that are 
defined for use in ACME authorization objects.  Fields marked as
“configurable” may be included in a newAuthz request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="authorization-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>identifier</c>
      <c>object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>challenges</c>
      <c>array of object</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>wildcard</c>
      <c>boolean</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-error" title="Error Types">

<t>The “ACME Error Types” registry lists values that are used within URN
values that are provided in the “type” field of problem documents in ACME.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Type: The label to be included in the URN for this error, following
“urn:ietf:params:acme:error:”</t>
  <t>Description: A human-readable description of the error</t>
  <t>Reference: Where the error is defined</t>
</list></t>

<t>Initial contents: The types and descriptions in the table in <xref target="errors"/> above,
with the Reference field set to point to this specification.</t>

</section>
<section anchor="iana-resource" title="Resource Types">

<t>The “ACME Resource Types” registry lists the types of resources that ACME
servers may list in their directory objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The value to be used as a field name in the directory object</t>
  <t>Resource type: The type of resource labeled by the field</t>
  <t>Reference: Where the resource type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Resource Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>RFC 8555</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>RFC 8555</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>RFC 8555</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>RFC 8555</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>RFC 8555</c>
      <c>keyChange</c>
      <c>Key change</c>
      <c>RFC 8555</c>
      <c>meta</c>
      <c>Metadata object</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-meta" title="Fields in the &quot;meta&quot; Object within a Directory Object">

<t>The “ACME Directory Metadata Fields” registry lists field names that are
defined for use in the JSON object included in the “meta” field of an ACME 
directory object.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="directory"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>termsOfService</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>website</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>caaIdentities</c>
      <c>array of string</c>
      <c>RFC 8555</c>
      <c>externalAccountRequired</c>
      <c>boolean</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-identifier" title="Identifier Types">

<t>The “ACME Identifier Types” registry lists the types of identifiers that
can be present in ACME authorization objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The value to be put in the “type” field of the identifier object</t>
  <t>Reference: Where the identifier type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>dns</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-validation" title="Validation Methods">

<t>The “ACME Validation Methods” registry lists identifiers for the ways that
CAs can validate control of identifiers.  Each method’s entry must specify
whether it corresponds to an ACME challenge type.  The “Identifier Type” field
must be contained in the Label column of the “ACME Identifier Types” registry.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The identifier for this validation method</t>
  <t>Identifier Type: The type of identifier that this method applies to</t>
  <t>ACME: “Y” if the validation method corresponds to an ACME challenge type;
“N” otherwise</t>
  <t>Reference: Where the validation method is defined</t>
</list></t>

<t>This registry may also contain reserved entries (e.g., to avoid
collisions).  Such entries should have the “ACME” field set to “N”
and the “Identifier Type” set to “RESERVED”.</t>

<t>Initial Contents</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Identifier Type</ttcol>
      <ttcol align='left'>ACME</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>http-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>dns-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>tls-sni-01</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
      <c>tls-sni-02</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
</texttable>

<t>When evaluating a request for an assignment in this registry, the designated
expert should ensure that the method being registered has a clear,
interoperable definition and does not overlap with existing validation methods.
That is, it should not be possible for a client and server to follow the
same set of actions to fulfill two different validation methods.</t>

<t>The values “tls-sni-01” and “tls-sni-02” are reserved because they
were used in pre-RFC versions of this specification to denote
validation methods that were removed because they were found not to be secure in some cases.</t>

<t>Validation methods do not have to be compatible with ACME in order to be
registered.  For example, a CA might wish to register a validation method
to support its use with the ACME extensions to CAA
<xref target="I-D.ietf-acme-caa"/>.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>ACME is a protocol for managing certificates that attest to identifier/key
bindings.  Thus, the foremost security goal of ACME is to ensure the integrity of
this process, i.e., to ensure that the bindings attested by certificates are
correct and that only authorized entities can manage certificates.  ACME
identifies clients by their account keys, so this overall goal breaks down into
two more precise goals:</t>

<t><list style="numbers">
  <t>Only an entity that controls an identifier can get an authorization for that
identifier</t>
  <t>Once authorized, an account key’s authorizations cannot be improperly
used by another account</t>
</list></t>

<t>In this section, we discuss the threat model that underlies ACME and the ways
that ACME achieves these security goals within that threat model.  We also
discuss the denial-of-service risks that ACME servers face, and a few other
miscellaneous considerations.</t>

<section anchor="threat-model" title="Threat Model">

<t>As a service on the Internet, ACME broadly exists within the Internet threat
model <xref target="RFC3552"/>.  In analyzing ACME, it is useful to think of an ACME server
interacting with other Internet hosts along two “channels”:</t>

<t><list style="symbols">
  <t>An ACME channel, over which the ACME HTTPS requests are exchanged</t>
  <t>A validation channel, over which the ACME server performs additional requests
to validate a client’s control of an identifier</t>
</list></t>

<figure title="Communications Channels Used by ACME"><artwork><![CDATA[
+------------+
|    ACME    |     ACME Channel
|   Client   |--------------------+
+------------+                    |
                                  V
                            +------------+
                            |    ACME    |
                            |   Server   |
                            +------------+
+------------+                    |
| Validation |<-------------------+
|   Server   |  Validation Channel
+------------+
]]></artwork></figure>

<t>In practice, the risks to these channels are not entirely separate, but they are
different in most cases.  Each channel, for example, uses a
different communications pattern: the ACME channel will comprise inbound HTTPS
connections to the ACME server and the validation channel outbound HTTP or DNS
requests.</t>

<t>Broadly speaking, ACME aims to be secure against active and passive attackers on
any individual channel.  Some vulnerabilities arise (noted below) when an
attacker can exploit both the ACME channel and one of the others.</t>

<t>On the ACME channel, in addition to network-layer attackers, we also need to
account for man-in-the-middle (MitM) attacks at the application layer and for
abusive use of the protocol itself.  Protection against application-layer MitM
addresses potential attackers such as Content Distribution Networks (CDNs) and
middleboxes with a TLS MitM function.  Preventing abusive use of ACME means
ensuring that an attacker with access to the validation channel can’t obtain
illegitimate authorization by acting as an ACME client (legitimately, in terms
of the protocol).</t>

<t>ACME does not protect against other types of abuse by a MitM on the ACME channel.
For example, such an attacker could send a bogus “badSignatureAlgorithm”
error response to downgrade a client to the lowest-quality signature algorithm that
the server supports.  A MitM that is present on all connections (such as a 
CDN) can cause denial-of-service conditions in a variety of ways.</t>

</section>
<section anchor="integrity-of-authorizations" title="Integrity of Authorizations">

<t>ACME allows anyone to request challenges for an identifier by registering an
account key and sending a newOrder request using that account key.  The
integrity of the authorization process thus depends on the identifier validation
challenges to ensure that the challenge can only be completed by someone who
both (1) holds the private key of the account key pair and (2) controls the
identifier in question.</t>

<t>Validation responses need to be bound to an account key pair in order to avoid
situations where a MitM on ACME HTTPS requests can switch out a legitimate domain holder’s
account key for one of his choosing.  Such MitMs can arise, for
example, if a CA uses a CDN or third-party reverse proxy in front of
its ACME interface.  An attack by such an MitM could have the
following form:</t>

<t><list style="numbers">
  <t>Legitimate domain holder registers account key pair A</t>
  <t>MitM registers account key pair B</t>
  <t>Legitimate domain holder sends a newOrder request signed using account key A</t>
  <t>MitM suppresses the legitimate request but sends the same request signed
using account key B</t>
  <t>ACME server issues challenges and MitM forwards them to the legitimate domain
holder</t>
  <t>Legitimate domain holder provisions the validation response</t>
  <t>ACME server performs validation query and sees the response provisioned by the
legitimate domain holder</t>
  <t>Because the challenges were issued in response to a message signed with account key
B, the ACME server grants authorization to account key B (the MitM) instead of
account key A (the legitimate domain holder)</t>
</list></t>

<figure title="Man-in-the-Middle Attack Exploiting a Validation Method without
Account Key Binding"><artwork><![CDATA[
Domain                                         ACME
Holder                  MitM                  Server
  |                      |                      |
  | newAccount(A)        |                      |
  |--------------------->|--------------------->|
  |                      |                      |
  |                      | newAccount(B)        |
  |                      |--------------------->|
  | newOrder(domain, A)  |                      | 
  |--------------------->|                      |
  |                      | newOrder(domain, B)  | 
  |                      |--------------------->|
  |                      |                      |
  |   authz, challenges  |   authz, challenges  |
  |<---------------------|<---------------------|
  |                      |                      |
  | response(chall, A)   | response(chall, B)   |
  |--------------------->|--------------------->|
  |                      |                      |
  |  validation request  |                      |
  |<--------------------------------------------|
  |                      |                      |
  | validation response  |                      |
  |-------------------------------------------->|
  |                      |                      |
  |                      |                      | Considers challenge
  |                      |                      | fulfilled by B
  |                      |                      |
]]></artwork></figure>

<t>All of the challenges defined in this document have a binding between the account private key and
the validation query made by the server, via the key authorization. The key
authorization reflects the account public key and is provided to the server in
the validation response over the validation channel.</t>

<t>The association of challenges to identifiers is typically done by requiring the
client to perform some action that only someone who effectively controls the
identifier can perform.  For the challenges in this document, the actions are as follows:</t>

<t><list style="symbols">
  <t>HTTP: Provision files under .well-known on a web server for the domain</t>
  <t>DNS: Provision DNS resource records for the domain</t>
</list></t>

<t>There are several ways that these assumptions can be violated, both by
misconfiguration and by attacks.  For example, on a web server that allows
non-administrative users to write to .well-known, any user can claim to own the
web server’s hostname by responding to an HTTP challenge.  Similarly, if
a server that can be used for ACME
validation is compromised by a malicious actor, then that malicious actor can
use that access to obtain certificates via ACME.</t>

<t>The use of hosting providers is a particular risk for ACME validation.  If the
owner of the domain has outsourced operation of DNS or web services to a hosting
provider, there is nothing that can be done against tampering by the hosting
provider.  As far as the outside world is concerned, the zone or website
provided by the hosting provider is the real thing.</t>

<t>More limited forms of delegation can also lead to an unintended party gaining
the ability to successfully complete a validation transaction.  For example,
suppose an ACME server follows HTTP redirects in HTTP validation and a
website operator provisions a catch-all redirect rule that redirects requests
for unknown resources to a different domain.  Then the target of the redirect
could use that to get a certificate through HTTP validation since the
validation path will not be known to the primary server.</t>

<t>The DNS is a common point of vulnerability for all of these challenges.  An
entity that can provision false DNS records for a domain can attack the DNS
challenge directly and can provision false A/AAAA records to direct the ACME
server to send its HTTP validation query to a remote server of the attacker’s
choosing.  There are a few different mitigations that ACME servers
can apply:</t>

<t><list style="symbols">
  <t>Always querying the DNS using a DNSSEC-validating resolver (enhancing
security for zones that are DNSSEC-enabled)</t>
  <t>Querying the DNS from multiple vantage points to address local attackers</t>
  <t>Applying mitigations against DNS off-path attackers, e.g., adding entropy to
requests <xref target="I-D.vixie-dnsext-dns0x20"/> or only using TCP</t>
</list></t>

<t>Given these considerations, the ACME validation process makes it impossible for
any attacker on the ACME channel or a passive attacker on the validation
channel to hijack the authorization process to authorize a key of the attacker’s
choice.</t>

<t>An attacker that can only see the ACME channel would need to convince the
validation server to provide a response that would authorize the attacker’s
account key, but this is prevented by binding the validation response to the
account key used to request challenges.  A passive attacker on the validation
channel can observe the correct validation response and even replay it, but that
response can only be used with the account key for which it was generated.</t>

<t>An active attacker on the validation channel can subvert the ACME process, by
performing normal ACME transactions and providing a validation response for his
own account key.  The risks due to hosting providers noted above are a
particular case.</t>

<t>Attackers can also exploit vulnerabilities in Internet routing
protocols to gain access to the validation channel (see, e.g.,
<xref target="RFC7132"/>).  In order to make such attacks more difficult, it is
RECOMMENDED that the server perform DNS queries and make HTTP
connections from multiple points in the network.  Since routing
attacks are often localized or dependent on the position of the
attacker, forcing the attacker to attack multiple points (the
server’s validation vantage points) or a specific point (the DNS / HTTP server) makes it more difficult to subvert ACME validation
using attacks on routing.</t>

</section>
<section anchor="denial-of-service-considerations" title="Denial-of-Service Considerations">

<t>As a protocol run over HTTPS, standard considerations for TCP-based and
HTTP-based DoS mitigation also apply to ACME.</t>

<t>At the application layer, ACME requires the server to perform a few potentially
expensive operations.  Identifier validation transactions require the ACME
server to make outbound connections to potentially attacker-controlled servers,
and certificate issuance can require interactions with cryptographic hardware.</t>

<t>In addition, an attacker can also cause the ACME server to send validation
requests to a domain of its choosing by submitting authorization requests for
the victim domain.</t>

<t>All of these attacks can be mitigated by the application of appropriate rate
limits.  Issues closer to the front end, like POST body validation, can be
addressed using HTTP request limiting.  For validation and certificate requests,
there are other identifiers on which rate limits can be keyed.  For example, the
server might limit the rate at which any individual account key can issue
certificates or the rate at which validation can be requested within a given
subtree of the DNS.  And in order to prevent attackers from circumventing these
limits simply by minting new accounts, servers would need to limit the rate at
which accounts can be registered.</t>

</section>
<section anchor="server-side-request-forgery" title="Server-Side Request Forgery">

<t>Server-Side Request Forgery (SSRF) attacks can arise when an attacker can cause
a server to perform HTTP requests to an attacker-chosen URL.  In the ACME HTTP
challenge validation process, the ACME server performs an HTTP GET request to a
URL in which the attacker can choose the domain.  This request is made before
the server has verified that the client controls the domain, so any client can
cause a query to any domain.</t>

<t>Some ACME server implementations include information from the validation server’s
response (in order to facilitate debugging).  Such implementations enable an
attacker to extract this information from any web server that is accessible to
the ACME server, even if it is not accessible to the ACME client.
For example, the ACME server might be able to access servers behind
a firewall that would prevent access by the ACME client.</t>

<t>It might seem that the risk of SSRF through this channel is limited by the fact
that the attacker can only control the domain of the URL, not the path.
However, if the attacker first sets the domain to one they control, then they
can send the server an HTTP redirect (e.g., a 302 response) which will cause the
server to query an arbitrary URL.</t>

<t>In order to further limit the SSRF risk, ACME server operators should ensure
that validation queries can only be sent to servers on the public Internet, and
not, say, web services within the server operator’s internal network.  Since the
attacker could make requests to these public servers himself, he can’t gain
anything extra through an SSRF attack on ACME aside from a layer of
anonymization.</t>

</section>
<section anchor="ca-policy-considerations" title="CA Policy Considerations">

<t>The controls on issuance enabled by ACME are focused on validating that a
certificate applicant controls the identifier he claims.  Before issuing a
certificate, however, there are many other checks that a CA might need to
perform, for example:</t>

<t><list style="symbols">
  <t>Has the client agreed to a subscriber agreement?</t>
  <t>Is the claimed identifier syntactically valid?</t>
  <t>For domain names:
  <list style="symbols">
      <t>If the leftmost label is a ‘*’, then have the appropriate checks been
applied?</t>
      <t>Is the name on the Public Suffix List?</t>
      <t>Is the name a high-value name?</t>
      <t>Is the name a known phishing domain?</t>
    </list></t>
  <t>Is the key in the CSR sufficiently strong?</t>
  <t>Is the CSR signed with an acceptable algorithm?</t>
  <t>Has issuance been authorized or forbidden by a Certificate Authority
Authorization (CAA) record (<xref target="RFC6844"/>)?</t>
</list></t>

<t>CAs that use ACME to automate issuance will need to ensure that their servers
perform all necessary checks before issuing.</t>

<t>CAs using ACME to allow clients to agree to terms of service should keep in mind
that ACME clients can automate this agreement, possibly not involving a human
user.</t>

<t>ACME does not specify how the server constructs the URLs that it
uses to address resources.  If the server operator uses URLs that
are predictable to third parties, this can leak information about
what URLs exist on the server, since an attacker can probe for
whether a POST-as-GET request to the URL returns 404 (Not Found) or
401 (Unauthorized).</t>

<t>For example, suppose that the CA uses highly structured URLs with
guessable fields:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/:accountID</t>
  <t>Orders: https://example.com/:accountID/:domainName</t>
  <t>Authorizations: https://example.com/:accountID/:domainName</t>
  <t>Certificates: https://example.com/:accountID/:domainName</t>
</list></t>

<t>Under that scheme, an attacker could probe for which domain names are
associated with which accounts, which may allow correlation of ownership
between domain names, if the CA does not otherwise permit it.</t>

<t>To avoid leaking these correlations, CAs SHOULD assign URLs with an
unpredictable component.
For example, a CA might assign URLs for each resource type from an
independent namespace, using unpredictable IDs for each resource:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/acct/:accountID</t>
  <t>Orders: https://example.com/order/:orderID</t>
  <t>Authorizations: https://example.com/authz/:authorizationID</t>
  <t>Certificates: https://example.com/cert/:certID</t>
</list></t>

<t>Such a scheme would leak only the type of resource, hiding the
additional correlations revealed in the example above.</t>

</section>
</section>
<section anchor="operational-considerations" title="Operational Considerations">

<t>There are certain factors that arise in operational reality that operators of
ACME-based CAs will need to keep in mind when configuring their services.
See the subsections below for examples.</t>

<section anchor="key-selection" title="Key Selection">

<t>ACME relies on two different classes of key pair:</t>

<t><list style="symbols">
  <t>Account key pairs, which are used to authenticate account holders</t>
  <t>Certificate key pairs, which are used to sign and verify CSRs (and whose
public keys are included in certificates)</t>
</list></t>

<t>Compromise of the private key of an account key pair has more serious consequences than
compromise of a private key corresponding to a certificate.  While
the compromise of a certificate key pair allows the attacker to impersonate the
entities named in the certificate for the lifetime of the certificate, the
compromise of an account key pair allows the attacker to take full control of
the victim’s ACME account and take any action that the legitimate
account holder could take within the scope of ACME:</t>

<t><list style="numbers">
  <t>Issuing certificates using existing authorizations</t>
  <t>Revoking existing certificates</t>
  <t>Accessing and changing account information (e.g., contacts)</t>
  <t>Changing the account key pair for the account, locking out the
legitimate account holder</t>
</list></t>

<t>For this reason, it is RECOMMENDED that each account key pair be
used only for authentication of a single ACME account.  For example,
the public key of an account key pair MUST NOT be included in a
certificate.  If an ACME client receives a request from a user for
account creation or key rollover using an account key that the
client knows to be used elsewhere, then the client MUST return an
error.  Clients MUST generate a fresh account key for every account
creation or rollover operation.  Note that given the requirements of
<xref target="finding-an-account-url-given-a-key"/>, servers will not create
accounts with reused keys anyway.</t>

<t>ACME clients and servers MUST verify that a CSR submitted in a finalize request does not contain a
public key for any known account key pair.  In particular, when a server
receives a finalize request, it MUST verify that the public key in a CSR is not
the same as the public key of the account key pair used to authenticate that
request.  This assures that vulnerabilities in the protocols with which the
certificate is used (e.g., signing oracles in TLS <xref target="JSS15"></xref>) do not result in 
compromise of the ACME account. Because ACME accounts are uniquely identified by
their account key pair (see <xref target="finding-an-account-url-given-a-key"/>), the server
MUST not allow account key pair reuse across multiple accounts.</t>

</section>
<section anchor="dns-security" title="DNS Security">

<t>As noted above, DNS forgery attacks against the ACME server can result in the
server making incorrect decisions about domain control and thus mis-issuing
certificates. Servers SHOULD perform DNS queries over TCP, which provides better
resistance to some forgery attacks than DNS over UDP.</t>

<t>An ACME-based CA will often need to make DNS queries, e.g., to validate control
of DNS names.  Because the security of such validations ultimately depends on
the authenticity of DNS data, every possible precaution should be taken to
secure DNS queries done by the CA. Therefore, it is RECOMMENDED that ACME-based
CAs make all DNS queries via DNSSEC-validating stub or recursive resolvers. This
provides additional protection to domains that choose to make use of DNSSEC.</t>

<t>An ACME-based CA must only use a resolver if it trusts the resolver and every
component of the network route by which it is accessed. Therefore, it is
RECOMMENDED that ACME-based CAs operate their own DNSSEC-validating resolvers
within their trusted network and use these resolvers both for CAA record
lookups and all record lookups in furtherance of a challenge scheme (A, AAAA,
TXT, etc.).</t>

</section>
<section anchor="token-entropy" title="Token Entropy">

<t>The http-01 and dns-01 validation methods mandate the use of
a random token value to uniquely identify the challenge. The value of the token
is required to contain at least 128 bits of entropy for the following security
properties. First, the ACME client should not be able to influence the ACME
server’s choice of token as this may allow an attacker to reuse a domain owner’s
previous challenge responses for a new validation request. Second, the entropy
requirement makes it more difficult for ACME clients to implement a “naive”
validation server that automatically replies to challenges without being 
configured per challenge.</t>

</section>
<section anchor="malformed-certificate-chains" title="Malformed Certificate Chains">

<t>ACME provides certificate chains in the widely used format known colloquially
as PEM (though it may diverge from the actual Privacy Enhanced Mail
specification <xref target="RFC1421"/>, as noted in <xref target="RFC7468"/>). Some current software
will allow the configuration of a private key and a certificate in one PEM
file by concatenating the textual encodings of the two objects. In the context
of ACME, such software might be vulnerable to key replacement attacks. A
malicious ACME server could cause a client to use a private key of its choosing
by including the key in the PEM file returned in response to a query for a
certificate URL.</t>

<t>When processing a file of type “application/pem-certificate-chain”, a client
SHOULD verify that the file contains only encoded certificates.  If anything
other than a certificate is found (i.e., if the string “-----BEGIN” is ever
followed by anything other than “CERTIFICATE”), then the client MUST reject the
file as invalid.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>In addition to the editors listed on the front page, this document has benefited
from contributions from a broad set of contributors, all the way back to its
inception.</t>

<t><list style="symbols">
  <t>Andrew Ayer, SSLMate</t>
  <t>Karthik Bhargavan, INRIA</t>
  <t>Peter Eckersley, EFF</t>
  <t>Alex Halderman, University of Michigan</t>
  <t>Sophie Herold, Hemio</t>
  <t>Tim Hollebeek, DigiCert</t>
  <t>Eric Rescorla, Mozilla</t>
  <t>Seth Schoen, EFF</t>
  <t>Roland Shoemaker, Let’s Encrypt</t>
  <t>Rob Stradling, Sectigo</t>
  <t>Martin Thomson, Mozilla</t>
  <t>Jakub Warmuz, University of Oxford</t>
</list></t>

<t>This document draws on many concepts established by Eric Rescorla’s “Automated
Certificate Issuance Protocol” draft.  Martin Thomson provided helpful guidance
in the use of HTTP.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="FIPS180-4" target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
  <front>
    <title>NIST FIPS 180-4, Secure Hash Standard</title>
    <author initials="National Institute of Standards and Technology, U.S." surname="Department of Commerce" fullname="NIST">
      <organization></organization>
    </author>
    <date year="2012" month="March"/>
  </front>
</reference>
<reference anchor="JSS15" target="https://dl.acm.org/citation.cfm?id=2813657">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="J." surname="Somorovsky" fullname="Juraj Somorovsky">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
      <organization></organization>
    </author>
    <date year="2000"/>
  </front>
</reference>




<reference  anchor="RFC5280" target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor="RFC2986" target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC2818" target='https://www.rfc-editor.org/info/rfc2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2000' month='May' />
<abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2818'/>
<seriesInfo name='DOI' value='10.17487/RFC2818'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC3629" target='https://www.rfc-editor.org/info/rfc3629'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'><organization /></author>
<date year='2003' month='November' />
<abstract><t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract>
</front>
<seriesInfo name='STD' value='63'/>
<seriesInfo name='RFC' value='3629'/>
<seriesInfo name='DOI' value='10.17487/RFC3629'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7797" target='https://www.rfc-editor.org/info/rfc7797'>
<front>
<title>JSON Web Signature (JWS) Unencoded Payload Option</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2016' month='February' />
<abstract><t>JSON Web Signature (JWS) represents the payload of a JWS as a base64url-encoded value and uses this value in the JWS Signature computation.  While this enables arbitrary payloads to be integrity protected, some have described use cases in which the base64url encoding is unnecessary and/or an impediment to adoption, especially when the payload is large and/or detached.  This specification defines a means of accommodating these use cases by defining an option to change the JWS Signing Input computation to not base64url- encode the payload.  This option is intended to broaden the set of use cases for which the use of JWS is a good fit.</t><t>This specification updates RFC 7519 by stating that JSON Web Tokens (JWTs) MUST NOT use the unencoded payload option defined by this specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7797'/>
<seriesInfo name='DOI' value='10.17487/RFC7797'/>
</reference>



<reference  anchor="RFC7518" target='https://www.rfc-editor.org/info/rfc7518'>
<front>
<title>JSON Web Algorithms (JWA)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification registers cryptographic algorithms and identifiers to be used with the JSON Web Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK) specifications.  It defines several IANA registries for these identifiers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7518'/>
<seriesInfo name='DOI' value='10.17487/RFC7518'/>
</reference>



<reference  anchor="RFC8037" target='https://www.rfc-editor.org/info/rfc8037'>
<front>
<title>CFRG Elliptic Curve Diffie-Hellman (ECDH) and Signatures in JSON Object Signing and Encryption (JOSE)</title>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
<abstract><t>This document defines how to use the Diffie-Hellman algorithms &quot;X25519&quot; and &quot;X448&quot; as well as the signature algorithms &quot;Ed25519&quot; and &quot;Ed448&quot; from the IRTF CFRG elliptic curves work in JSON Object Signing and Encryption (JOSE).</t></abstract>
</front>
<seriesInfo name='RFC' value='8037'/>
<seriesInfo name='DOI' value='10.17487/RFC8037'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7807" target='https://www.rfc-editor.org/info/rfc7807'>
<front>
<title>Problem Details for HTTP APIs</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Wilde' fullname='E. Wilde'><organization /></author>
<date year='2016' month='March' />
<abstract><t>This document defines a &quot;problem detail&quot; as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.</t></abstract>
</front>
<seriesInfo name='RFC' value='7807'/>
<seriesInfo name='DOI' value='10.17487/RFC7807'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC6844" target='https://www.rfc-editor.org/info/rfc6844'>
<front>
<title>DNS Certification Authority Authorization (CAA) Resource Record</title>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<author initials='R.' surname='Stradling' fullname='R. Stradling'><organization /></author>
<date year='2013' month='January' />
<abstract><t>The Certification Authority Authorization (CAA) DNS Resource Record allows a DNS domain name holder to specify one or more Certification Authorities (CAs) authorized to issue certificates for that domain. CAA Resource Records allow a public Certification Authority to implement additional controls to reduce the risk of unintended certificate mis-issue.  This document defines the syntax of the CAA record and rules for processing CAA records by certificate issuers. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6844'/>
<seriesInfo name='DOI' value='10.17487/RFC6844'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC5890" target='https://www.rfc-editor.org/info/rfc5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<date year='2010' month='August' />
<abstract><t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5890'/>
<seriesInfo name='DOI' value='10.17487/RFC5890'/>
</reference>



<reference  anchor="RFC6068" target='https://www.rfc-editor.org/info/rfc6068'>
<front>
<title>The 'mailto' URI Scheme</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='J.' surname='Zawinski' fullname='J. Zawinski'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document defines the format of Uniform Resource Identifiers (URIs) to identify resources that are reached using Internet mail. It adds better internationalization and compatibility with Internationalized Resource Identifiers (IRIs; RFC 3987) to the previous syntax of 'mailto' URIs (RFC 2368).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6068'/>
<seriesInfo name='DOI' value='10.17487/RFC6068'/>
</reference>



<reference  anchor="RFC2985" target='https://www.rfc-editor.org/info/rfc2985'>
<front>
<title>PKCS #9: Selected Object Classes and Attribute Types Version 2.0</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #9 v2.0 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from that specification.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2985'/>
<seriesInfo name='DOI' value='10.17487/RFC2985'/>
</reference>



<reference  anchor="RFC2585" target='https://www.rfc-editor.org/info/rfc2585'>
<front>
<title>Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='1999' month='May' />
<abstract><t>The protocol conventions described in this document satisfy some of the operational requirements of the Internet Public Key Infrastructure (PKI).  This document specifies the conventions for using the File Transfer Protocol (FTP) and the Hypertext Transfer Protocol (HTTP) to obtain certificates and certificate revocation lists (CRLs) from PKI repositories.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2585'/>
<seriesInfo name='DOI' value='10.17487/RFC2585'/>
</reference>



<reference  anchor="RFC5751" target='https://www.rfc-editor.org/info/rfc5751'>
<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5751'/>
<seriesInfo name='DOI' value='10.17487/RFC5751'/>
</reference>



<reference  anchor="RFC8446" target='https://www.rfc-editor.org/info/rfc8446'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2018' month='August' />
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='8446'/>
<seriesInfo name='DOI' value='10.17487/RFC8446'/>
</reference>



<reference  anchor="RFC7638" target='https://www.rfc-editor.org/info/rfc7638'>
<front>
<title>JSON Web Key (JWK) Thumbprint</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t></abstract>
</front>
<seriesInfo name='RFC' value='7638'/>
<seriesInfo name='DOI' value='10.17487/RFC7638'/>
</reference>



<reference  anchor="RFC4086" target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7468" target='https://www.rfc-editor.org/info/rfc7468'>
<front>
<title>Textual Encodings of PKIX, PKCS, and CMS Structures</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='S.' surname='Leonard' fullname='S. Leonard'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document describes and discusses the textual encodings of the Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS).  The textual encodings are well-known, are implemented by several applications and libraries, and are widely deployed.  This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.</t></abstract>
</front>
<seriesInfo name='RFC' value='7468'/>
<seriesInfo name='DOI' value='10.17487/RFC7468'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CABFBR" target="https://cabforum.org/baseline-requirements-documents/">
  <front>
    <title>CA/Browser Forum Baseline Requirements</title>
    <author >
      <organization>CA/Browser Forum</organization>
    </author>
    <date year="2018" month="September"/>
  </front>
</reference>




<reference anchor="I-D.ietf-acme-ip">
<front>
<title>ACME IP Identifier Validation Extension</title>

<author initials='R' surname='Shoemaker' fullname='Roland Shoemaker'>
    <organization />
</author>

<date month='February' day='14' year='2019' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificates for IP addresses.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-ip-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-ip-05.txt' />
</reference>



<reference anchor="I-D.ietf-acme-telephone">
<front>
<title>ACME Identifiers and Challenges for Telephone Numbers</title>

<author initials='J' surname='Peterson' fullname='Jon Peterson'>
    <organization />
</author>

<author initials='R' surname='Barnes' fullname='Richard Barnes'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificate for telephonoe numbers.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-telephone-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-telephone-01.txt' />
</reference>



<reference  anchor="RFC6960" target='https://www.rfc-editor.org/info/rfc6960'>
<front>
<title>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'><organization /></author>
<author initials='R.' surname='Ankney' fullname='R. Ankney'><organization /></author>
<author initials='A.' surname='Malpani' fullname='A. Malpani'><organization /></author>
<author initials='S.' surname='Galperin' fullname='S. Galperin'><organization /></author>
<author initials='C.' surname='Adams' fullname='C. Adams'><organization /></author>
<date year='2013' month='June' />
<abstract><t>This document specifies a protocol useful in determining the current status of a digital certificate without requiring Certificate Revocation Lists (CRLs). Additional mechanisms addressing PKIX operational requirements are specified in separate documents.  This document obsoletes RFCs 2560 and 6277.  It also updates RFC 5912.</t></abstract>
</front>
<seriesInfo name='RFC' value='6960'/>
<seriesInfo name='DOI' value='10.17487/RFC6960'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>



<reference  anchor="RFC5785" target='https://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC3553" target='https://www.rfc-editor.org/info/rfc3553'>
<front>
<title>An IETF URN Sub-namespace for Registered Protocol Parameters</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<date year='2003' month='June' />
<abstract><t>This document describes a new sub-delegation for the 'ietf' URN namespace for registered protocol items.  The 'ietf' URN namespace is defined in RFC 2648 as a root for persistent URIs that refer to IETF- defined resources.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='73'/>
<seriesInfo name='RFC' value='3553'/>
<seriesInfo name='DOI' value='10.17487/RFC3553'/>
</reference>



<reference anchor="I-D.ietf-acme-caa">
<front>
<title>CAA Record Extensions for Account URI and ACME Method Binding</title>

<author initials='H' surname='Landau' fullname='Hugo Landau'>
    <organization />
</author>

<date month='January' day='15' year='2019' />

<abstract><t>The CAA DNS record allows a domain to communicate issuance policy to CAs, but only allows a domain to define policy with CA-level granularity.  However, the CAA specification also provides facilities for extension to admit more granular, CA-specific policy.  This specification defines two such parameters, one allowing specific accounts of a CA to be identified by URI and one allowing specific methods of domain control validation as defined by the ACME protocol to be required.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-caa-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-caa-06.txt' />
</reference>



<reference  anchor="RFC3552" target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
<abstract><t>All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>



<reference anchor="I-D.vixie-dnsext-dns0x20">
<front>
<title>Use of Bit 0x20 in DNS Labels to Improve Transaction Identity</title>

<author initials='P' surname='Vixie' fullname='Paul Vixie'>
    <organization />
</author>

<author initials='D' surname='Dagon' fullname='David Dagon'>
    <organization />
</author>

<date month='March' day='18' year='2008' />

<abstract><t>The small (16-bit) size of the DNS transaction ID has made it a frequent target for forgery, with the unhappy result of many cache pollution vulnerabilities demonstrated throughout Internet history. Even with perfectly and unpredictably random transaction ID's, random and birthday attacks are still theoretically feasible.  This document describes a method by which an initiator can improve transaction identity using the 0x20 bit in DNS labels.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-vixie-dnsext-dns0x20-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-vixie-dnsext-dns0x20-00.txt' />
</reference>



<reference  anchor="RFC7132" target='https://www.rfc-editor.org/info/rfc7132'>
<front>
<title>Threat Model for BGP Path Security</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<author initials='A.' surname='Chi' fullname='A. Chi'><organization /></author>
<date year='2014' month='February' />
<abstract><t>This document describes a threat model for the context in which External Border Gateway Protocol (EBGP) path security mechanisms will be developed.  The threat model includes an analysis of the Resource Public Key Infrastructure (RPKI) and focuses on the ability of an Autonomous System (AS) to verify the authenticity of the AS path info received in a BGP update.  We use the term &quot;PATHSEC&quot; to refer to any BGP path security technology that makes use of the RPKI.  PATHSEC will secure BGP, consistent with the inter-AS security focus of the RPKI.</t><t>The document characterizes classes of potential adversaries that are considered to be threats and examines classes of attacks that might be launched against PATHSEC.  It does not revisit attacks against unprotected BGP, as that topic has already been addressed in the BGP-4 standard.  It concludes with a brief discussion of residual vulnerabilities.</t></abstract>
</front>
<seriesInfo name='RFC' value='7132'/>
<seriesInfo name='DOI' value='10.17487/RFC7132'/>
</reference>



<reference  anchor="RFC1421" target='https://www.rfc-editor.org/info/rfc1421'>
<front>
<title>Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures</title>
<author initials='J.' surname='Linn' fullname='J. Linn'><organization /></author>
<date year='1993' month='February' />
<abstract><t>This document defines message encryption and authentication procedures, in order to provide privacy-enhanced mail (PEM) services for electronic mail transfer in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1421'/>
<seriesInfo name='DOI' value='10.17487/RFC1421'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAFBHeVwAA+y9+3obx5Uv+n89RR/k+45Jh4BIipIoZpIZiKRk2rqZpCTb
k5ykATTIlgA0gm6QgmzvxzovcF7srGvVqu4GSSnOzM7em18ik0B33Wvd1291
u11X5dUkO0g6/WVVTNMqHyaH2aLKx/kwrbLkRTpLL7JpNquS49lVvihm9PtG
//DF8WbHpYPBIrs6SPBPNyqGs3QKbY0W6bjq5lk17qbDacb/TKC5snLY6kWx
WB0kZTVy18Xiw8WiWM65ieQd/J3PLpJn+JnL54uDpFosy2p3e/vx9q4bwcsH
ye72zuMu/OXKKp2N/ppOihl8uspKN88PEpckVTHkv5OkLBbVIhuX/u/V1P45
LKbzdFj5b5cD/8mscO5DtoIRjg6S/xyGNdlKvjk/f322lbz+7mQr+aH3YPvx
X5xLl9VlsThwSRfaSZJ8Bn2c9pIn6WJGTScJr81pPrxMFyP7RbG4OEgO83JY
0J/ZNM0nB8liMviPfH7VKz9GbX7bS74pxuNpOuv2Z6NFdm0b/zYdFoPW76mP
46dPbQ/vy8v0P7LxuAdfRn0c9ZIXw0Mc4Mo0fpTO8mwSf0PNPs+qr0o4HsPF
al7ZDobz5X9MsqrM+KtGPzCX79KyymbRFKZZaT+mLt7M8qtsUebVKinGyQtY
w/winUWTGX2gd/5jOYVve9lo6Vw+GxcLPNNXGWxMcth/8vTJ6QG9Jaf+sH/v
yaK4LrNF8rRYLKewLWU2yWdZcpr9fZkv6OTzCvoNTsKe1d6m7/wZ3e9uP+a+
0sVFBifqsqrm5cG9e8N0MMbHcT3uDaTD7sJ02IWrtKTf7rmZncLTk9dnO/vb
3b1oFi9Pzs7pq4S+20rOsuFykSXfpOVlcoaXBE5cyyR4xfFt+YB25SX0VszS
SXIyK6GDJVABWHNtpkzgv8l5NrycFZPiYrWVvOmd9ZKjbJ4uKqIN8PBhMZ1m
i2EWL8hud/t+Y0FwPcrFsDfLy6p3UVzdmy8HE7xnMIby3jif8z80MfqtS7/2
5qMxtPXt2dnOg2gtXs2S6jLjFZDjcv4cFqZ3nwb+/ZuTw6R/kcJMq+Rdln6A
S1jCgctncJ0Pz363k1zt9B7oYYYxrF2283xQLOC4XmQLu3rncD/9Z23vffv/
/b+Li+RseHmdzT7YN+E22E9b310u0vfJWTEtFsVV+WFVfz3+on7uRpMeUGI6
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
pBqymcfB1kRx6uliDgteoMYbZGczWclmtNWX09al9i7unGKCAna6PY9Bvajp
49akonTWU9awVQruIhvzpVYevhhUkZ4WqhVb5MtNMp/tercLeQeTo3fGqzbZ
8MuLLuENkMZF/19sgKzzBTZEOq0M8I8aIqlqZ2yIjG2PMQVCvS9ch/XGx7Jh
gIlpvZTYCE3VjR2IwixclurImDJfV1ly443jNEaahbux18SjV+tVHnnwoc96
PWD4kYSb5hNvcRAcoGB38DSVFjughEdMNc5E1Q6xFJDHfuUoDumZLAGyWoQH
TotSmnclBtlXR5L3/VkjU6p/0+yMM6BxBLbzIWshqyotev1gTeSCOYRtBYJR
CmdGEksGmg6Vli6NTBsNlS4CYophdLTakamwwEifbUqNHASOyq4dA2dDdgdE
R5PkXUsjGj/bdLIHbASNICbEnCahVT1P3fyKmOVzjFPSqFYJ1SPEq++scrpR
kU+SlGBBe7Jf6yxiakLWYfyd6RPMllGOuKQX69JGayfaQiiVNpjZtdUuYRMq
1km2xRwehWIOqpXGYHNc3owK4dUVQqEcg+wiN8AeFMXaPcQqpBUxgmOtJsHK
put8nP25++dupwEXT4PYfwyDoL3jCFWq10Oz6bXvs9tg0vnnrzsqhIzzRVlx
PvNmBKdla5G0CVuYjjJ2DZFeqAac76ts1SZ7YacoZerAovvhalchuiZt598E
s3otuqZ+1ZXqxo1eo2PfBZjDXxoT5me4BQE5GINIaOXLbIUPutv30Qx3o63Q
xF02sHzWGwsdoReRocuPPxgdJdeWimTeaPzCd+/NF2//+uTR6njV3/MYQn4w
+C7MIXzRNm9+AyEO8fOjZ6vT7P30EDSyR1d7L8dHz46+G/fDg54tyjLtdXd2
aZl2D7YfHDzY7+08/InTiY2J058KDflseuoDFkxD/Qjc9UbVoxhLiXjPKVPn
3fmxdJDGeKCkqSu49TXBVL+ZTfIPYjEieq/ykOjPBP+4JS4QhRpXC54vP+BF
fCdhBLWZiBnIWmWaD2HxchCYnKQmmSh/qQ4xyMhnVPrirVyHahJpGK7ebCl+
/4SDGyd6pRrts4ehxrHuUEJDsCZZLOe45lICqjgIg2dHDO6iIKrNgRK4jhQP
Qv4cEC+GlxjpX1yxPuCApxFEpZaqbejDIarCxAMy46ImnX2g1OQSqk6I4fHN
hUK3kYgbKgJ71zy1yENZOTLtRDqsDWGQCYUKNlopTaptSM37sFNiawjpgN2q
iMGKvAtNZDhieiARsQwoHNaIjje5DyMhr2cMS6ZCRnM6jZjaIH86K7Oac+0N
aAw06mfJxfjiCfbcc7iI1zmWuqlVliOSr4XyBABSjF+y0qyK9TArzBxrFJm8
+6suwE+Lq6z0m8dUkpTP7A9S7pkvvCKy3vy+KpPcwhpwEjlKEcZCjLiACY+E
E137VH1j0ccBN8K43f8tIIbIu4I18YuIVYnU8Fyse8wvfkWF0jn4sP7s7yNs
kraZuLPgeaRXnpJq5Mz+0Mfhb2fBUcxvrgZRYvp72/L5W9eCGq9KXSt0xRmd
oXN/pfnANRgVIlj024S2u9ENOJusZLma+lsDSG6akGVQQjVURw+Xsu1FAl0S
C0XrKecRWZslX+fS6pOWSal6W6K1zLVdEQkCaQ6Goj2gPSeLsnbUzenWvf5Y
FXa4po9ayIAsUM7Btyz0uQ1v3dncopTeYPqph3LXzEIc2BGyIhCWbdYS3UG0
iqvKRF406NpbGG9FL1LLSVtC9+/bXkjaL4m5meE84y6isHDLC/JjkPHv9MKx
AdP/xXZrr2VMLFqv/Q1DaqcHN73QSijWvtBaeKLx0e1AUTcO6b/ohd/XDs+t
Z6ne5K093P0F4UD6BHs+6M/zAKVjX+ALQ0+Ey8jvey2ubUhvb/6z9kJUBMoS
BPoRevE5rKPVzYLs45XxtN2RbbyKg4PqYXAx84g8eRxv30ISg1+xleByUK6V
d+VhK/K4FnnXe6zX17uTPiTCyYUwklAqgZ3ELN+yeVeCqVXMUYuHi+1Qni9E
6H1ay3rLrE82qzgpocZMmSV6bkaxjWjgZQOpmFXxUTKpksrYWJcGv7ILSEw5
XsX4aZQ88ypRbwIOgu2ytIrxzsssUg5Ak/cNuKBObcP4MzwHYo+XZXB1ntTO
gZhetJDfX+SLvvj+P9W/0OHU3mghzPgFO4JbGd8NnYvw3PzCR8rVv9BzeZdR
GSn7s0Z1GIGX0EfMI0UG/0WD4MyrNRIiHHvd2N66Fvb0JTJvlEZB8m6UEdVO
smJxC9ZniCHJmlbjUkVTjbwcQ8HdCpVhmHrYiMWWrPkgtRoH53oZDpe4VRgj
sTC6tzGK601qnP/h5W1+vo5xh08tF/59fJYMU4x+lHdqXm6v8YQyS99Lm9Cj
x6XJ52rtfB7Di3O48eQEq0IZ8PBLsfWUPpoYffqRc0GtPE6CtdgoxoUFgvHj
Mr3KC3X3hRor+gAFnHC+cFKuZsPLRTHjmA8Gd8/EDXYdQipa7B5eUerbdmFE
aEYpkzWh2/mUsG2rbLJyLb01Yn2oVyXR/uAhyvkzRn+GaTHMqJOEg4DbQLhn
Nd6qB1wjDeqR7Rz06MZw2i9bKkain3VZ+YHFVbRNLXAK5CCs2GFaAj80qcS8
yNTPRVFhTYtUGqeYaxOfE271N8V1RsM20UZTwgcrfaEajW3Bsn+M+kitbiVc
eROXE41F5HwJi2JTpNC928gLHio8FOYUZgvvzzzXnnippC8r3mQzqqBGCIS1
XfCIWxraoWZdj7cbIogoC02Cn6M4xnR9kXsXeXHMCBOTiUlbYEsDY9Lixqvv
NgWm0oYlkmyyCFiAJshdJS4i4TybLYnDFMR4NBys3KAAnr3BRgDS9w3aTutU
NtVNZMcIZ2x3ey/ZeFkkklxZE01ouWt4IYnmZbpv4EgeJMaJ4ho5m3YkB0nx
9Go2efp65/rk8nTy49nu+/P0h0HfHabDy6x7yLihB7C23bJCxKAvzOi0bpDX
i+LjCq4NmrsvpPCA1Jr2uGKN80NGDLJ6OkXXo2gelnjoZKE3bCYvzYlHYzmm
SZaqB7ajpWU7vkKWiWOrHb1oAVrSa4U88LJ0BMcax5Lb4tnqnWzMZ6sW2kE1
7Z1ZlOi8celwZTOhykVyS5kLIbqWENI6qvThfMp3KJwky0HgZ9mC/OHEwqbF
yHvfvQAfSy+5yWzQgF0QonzX9FF5M2RtjMzTQuGdpxpGPvLA8Qndwjh3nGMF
ymo5qKW4WypCcwSNTdxDHFmk4CgcandwZ7iPMzyLGEJKsyjbJCwJLacDFbnh
G2UzPhMh47fuG8MzTonaHSvX+Fy8KL/Fgu9Sx4yqxYeDfKYnNDopOZuQPdCd
BswSN6uBaKUhBRiamxTFh2Q5t/I2Ktw2MlU/x1LOlMWWwHqMGbeCLJ2yNMvF
pHsB9xw+wfINHO33WUAfv+kGRayBbksDFOom5nBD/n5RZr83AFYIiMoFmw5o
3R7uwUpsSFRAOrlAP/nx2e6DhxoW8P76A4YN9Ho9yRkSYQqee3i2f/L3V89+
fJQ9352Uz4rzn37Mxx4f47aAAIt3hSEGmxTVME9XCDfbNrpb4DRagDzuCOVx
C5gH5ur78ZVaYhvndvrT61ezH4vX5c7ry/flp6ewSN3Z5cMfdv5evXr6+smD
nccn9RyfBqe6mKEwjLYZiQYKJcFFeI1QMcg/oBHKqs/S7Yx0RsJGuc7QjFGG
JGNtQnA8/RV0HsyPEjPwssqTFAdfz8UcL3EBxJMaRXNpKTYnr9MUPRuLQrwl
ObGO7CigO/V8E4ehRyHbAFelQc+8S51jAZczP6uRWTtkPRx/R/c2YiS9NgA/
DVMnmJJMtTd14TqtkS5R8ZyjpJGmZhYizLY4t0OZ2eD80ZOs0HkgsrFphDD7
PDhTZA3oqVFBetSuyqgLH+HmR04d8gXoCNSTqVbqA78CbLF/WDB9yQRYG7HU
JxGQiL9d8gb8TeLTHm4/3P/1V9ypKaclU6XFzP0tHY0WXTxTf9Ol+FtV/I2r
vM84TJEyh7QU8oy2jyyIYVgyFOdTVj2rmWZZJRo8HEnM6Upbclo40qJKQvHu
ANXqUSrEktSoErwsWZtwtlwvr2oILgyYMFExVSCajXrEHc70cqnco7nNcOW3
OdA/rUINsOhMGeedBssymuKcsrzqx+bWqYXz56TU8YDLhqnDiQjZGrlgzcy9
CVln3VhxxD7LRFsgA5zVYTEJC/kByZYE9sVwuyE83VeJyVlR5iworueju2Jr
BdGkGVmHEjO4VQ+qM6TiMQqiUYcxRAE0Cu+x2LkexaAG/r3lasExsl50GtuQ
N+Vo08FWJEDXziWl5wjss1mRGG95uqwKRHMZEvovLarzizogVIsUaCe8fEo1
g7eYmvu7w1tDUjhWmebq5GI8RcSQgM6mrcZk0isXxqSKJA/VMz7K8+UApBsS
8HweC0XX0vy/fXeWbOS9rCdlZlF80XxIY/jxqjuenCWe1Iq3nnmbX2TnVdlW
NCmtXRrhl/lYLrgqWP9gg6szjDadKpRbQZS2ciy90VpbQ4AP7LMC6aPAtR/Q
eM1yuZwvnKWZGgmkqBchUq45RRKW7VVAH95E33dtCxQaIAsQjyVUx6JNjiwu
pkiZ1g4vZtGK1YDcKClnLV7VjhS7GN0GWhXbR472y72j3enzcv/trHtRvFu+
/j77rv/FyFaySQfJ+rTz4bC6l129Gn93+fLNw+3rC7culvefBkF3R4y5xkgF
mKsFbg5LV4zEWmZ09uQZalJweL/LVk1OSbadsh0AEcVpj3VKdzrUvc6DaniZ
RhSBMXayqPpcqN8VNEAy584aXDfYKbmSW4tpke0mIvEoO6CgJ4OzKBdtzY2t
mTFyYx41EcGWBqjHu2TvKfvEI4Nr4nFccm92/gNJu5GA65dXUd0lrJ2VjdFa
HVswLVxNj0b2jkymqeFaKsB2vOJKnOfmK+blabCrKycf58LxVMKwNm1L/r0A
R2UAjMGL2bj35d1kWWgIesA6gWgNVu5mT0RsntKjitSVUQtFY5Uz6m5QTCL2
m2z83PYo67NojbBLxjZ6zhD145OAaF0KP2s7WyP7tYpf62/CHt6EJ+lIazNJ
7C7JajeUKpbRHMFgXhYVTavTiyGS3xDsqKcTjVPBsKR8xi26XE37zIPrArfN
1xOnmWi1K/t+DAtpbI3t+rjjNkJIRKSHb62xR8hWCxeV0MVuMe7S0/iLCKEU
ZUftxgHhG1K3I5X7yVpeMBlZQGON1Gso+Ea3T2Ld3hwIVgGYBPFcmwpK7YCk
gUDasyKC63q92rkY1thsclCAW/aa8haCmBCOi+NaG3gAajZeOQYH6yxqDW73
32RXQ4Hts7hyp25+Sz8+OJ1Vl0d/n//1x/HeX7/5afb0+bR/V/Nbs/07GeFu
NrEpHuNvaWS7PPrh09Xw/f75w/Hg6WA66/V6i6NPP3z6dPVpfrp6uPdyu2iT
VCSFA5nvucI/y1V1rm/lTUmOSa1rxauCFLLURJQ+7H9Velhpr1eSz6PSAgc3
U4ic/bw13l8VTrSzuhxFyQ80pxG9WMe0lpAVPwvJk1ElbtRQL7F67gx93OJW
07i0wGBwtgjomX3Ec4/imFHenPBGHkhgrp/NZu67DSAOg3w0ymaBySQ3MRnU
LLmUoEfnF5nGrXNBr0HXjQvedupEmpByaKaI1l5KRRfzgIg35yyAxsh/HuPH
nxpejOCotrUztFKSDxkxCL9pQF+zjntOgGYVBSsVLaeMPs9pZXmZ4ymQ6L6x
FGPCFCvVwahSmrWcXGZeJa/pXbBNid+lmmp1vr8zGP20KH7aPTl/dwaS4fx8
2r/+Z4EGmzIQD7vbihbc2LgbSLdsFFNvfew53Kwl6KlA/5Wka1ri5x1EImBc
tQ5fPq9fU7LUyEXmh/3O30iu9erd+3dKfvzju/2Ty/uvy+uj7r4nf0z5jhWc
RQUu8WPFzgdCpmZrjSa4qpf7ljouJHM7dQoCHasVcmfdX5UMMZmpqcYXuAgY
InEJGNdQAHKJvGHk+3IFatE0wKUQ1NFwWVbFFJPN0ypFnsWBL9mMYKyibgTD
fkvIeCJV+oRkW9e5jzWyeqD1wUs2/ov+IalJjE6Av1kkGDaasus9w33Py2kC
VBXtsFSuCBpk8w682QAiG/A6YTK4OKb5We1TVBnrSIEr77l2V1PYUbLaYvSD
j/kUY0iHklqeTxDDWoEv/TJTc+jLoNHTmjM8ulkANd3ZNam4dNF0vuQQAVlu
0pdq5dgbKEJS9OAr6EirIRSmQJpRSUVwV9VLFWzsJC9b33CcdhosBxS58e27
72hptD0V4pqRYrwd6j9wQd5UP4KHeSJpz+aTm8rvsG1d9lbDQwW8eTnVt8iA
Z97SwmsVnwybAVz3mR32tRGJczPNSMq+3FZ9DoXDWsq7KKeVhuAwSRDzIpxX
6BeWQdDUgoAWp7GSViwIMH70eFa5NTkXgSP6u9OckudB/xN6w+99HdlHvr5X
F82/e7j95N3rxYvvnz0+O/r45Ojsrx8rDy3/23vG/2l+7607eN75kTUs4yAA
BNy01na9vzHrbTQlWPPaNSDTPFBwXf4vWVv84fXlMbasMXRcKpTmTBwKrJd+
fS+8aVUWeAPPNVN+PeFhtB5uoE3beXD+Lv/7yY/fj0+Oxv3n31+BtvPx8eHu
9GL/22evP04eDE72DLsHFUGMQo16bW0eI1/McX2tNpU+I3HeMkAb+2MCf9tr
ZnlHmPsMR1iIjqdJqfm4JY7eayi3Fp+rG/8cRguvQtm52Au7bjpAk95dZjNd
7psM2zawdeZuGxzaaxA5khL/OUgCxkM218i7Jdw0WiFv6AnPRUJO2MZaDMUt
owq25HajTrLBiOjkESqc6X2dqEWDqBR+ydYsy+YYlbfTS95qK6LqRAjxoSwM
hbZ0kXMDy0C2tNt8FXlRYOj8LvLv0liWlHm7+73klFLzJQpVb21s7hb+WKND
egkCB3d7zeFgi0XwzNFy5VSSmmXPtNJO3YPm25Gkwy3UnAhEo0gMLQkUSgRu
JDZmazwjbzpJYzwKfW6Tbfc+cw8jJxDbEYEqywCJjjJ4W1hoXFFymq58CILa
1oOdv1b6rlVCrO+HM5tV80yqRUXpCHtqY7PAbTfTRLU2ZCK9JM44XDT3btVY
Lcx9iheDYnDEvV/zMwRY9shwjsWhT/HWoHby8+/UIowVFhfwcRc//9UE6tqS
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
HTVWMShNMZi/yGcw5uDHZyl8Xr93Wrwd5+GLHheoSmEsOCZnRo93gtwpAmcA
E4AxYKC9jWdgpCKkTB31Ydl0QP0yGDops9Ez9JvvVWtRrZop0bV2o3qzjtVi
XHg03Jg8eUEkeB9t/IU1NJqoi1o4A26Dr1knQoem+rccGycG7ei7EEKy+d8Q
h7E+4oCrd/6r2guX38/P3k9OB3tX3789fP/2x/5q9ebd51VWoVP+mREHFq4l
kin0w1bJ4kY8k9ny7OjkbPDu2f70xcXxo296vd73q7dvnj/cX30a3/8pvZ43
cKZDRPbAG5+zGuBC2kI6QnijC1bA+LijEsVmkDWV6hWKv9m6hBRYKDO14Zgw
4nFEzm1hKlDkRkM0dI6KKXJpYoM9Xw3RlGVtjqot0UhBjNFJMM1nvrqKY4N7
w+jVYDPxoq6PUnfCaIa1zBuzH6XIC77eBR4eE0DIfBOlF8etsAyQXmBiCipk
g0k6/IBFoLGhDzPQOJJLeKcrgPZBUA4eMxlcu4WvOb+tqMJHFDPi2kAprU1l
K1lnTgl5EOKoQ0uX752NXLfHXtDeSyGKwTKnujs+5rSVEntEgHw2X1ZrOa8Y
F8L9ru/cmvfwLUUl1oT34EpdziYo2ZjpoAYKgiTiLw4YTsAj+ZI9Qt2A3gMQ
T0oC2KHT4SXIBRmGt3QoUCebsJUwskLC+/MCqLWmBiFMdJBubYQQChlDA0oS
mH1eH4PNoaGyDa4Z2WKqNkTvhjI4a7L+FUSUwjXbNtS76IrRKrbFkRGOcwhL
NdWSnSdoIxSIt97LbN3JLYOX9hRrRLV9JUQmJpaEoZG1BojVIYoTskJQPkWQ
JSsLtdsQIzdPQFSVWiPik/QqSmyPiZA9s2nXfI2ZrLA46odPZ2lX0WdYwmWh
xRwYdHtrJDHVLJcCRTFMrN3bElo+fXr44PE+FjSiDJgAJ5tOSC+osNjKcQpC
HFl0+UwILco+ohrJQQnyNKZvmlk4ngWpLMxILCQNrG0Xd75axaEVbdib0peb
p9UlCeEYc44FbKvFkkI2hpdYTdMn6ODr46ziCjqoHuh0WDUQzpwvHNHrbLnA
dK+hFMxCNCst5ADUYV7l03SyVmSrK+n/qOTWp0SAg9tPx7+qjNe0arSIep3O
FwtkDYPeDXi6rev6hbY9RxXEnxw/O3mZHB6fnp88PTnsnx/Tp+4/j1tPuw/O
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
zqyWpyu63biKuMoO1VYZd7Od/R/NOc23008CAA==

-->

</rfc>

