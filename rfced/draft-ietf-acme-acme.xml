<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-acme-acme-latest" category="std">

  <front>
    <title abbrev="ACME">Automatic Certificate Management Environment (ACME)</title>

    <author initials="R." surname="Barnes" fullname="Richard Barnes">
      <organization>Cisco</organization>
      <address>
        <email>rlb@ipv.sx</email>
      </address>
    </author>
    <author initials="J." surname="Hoffman-Andrews" fullname="Jacob Hoffman-Andrews">
      <organization>EFF</organization>
      <address>
        <email>jsha@eff.org</email>
      </address>
    </author>
    <author initials="D." surname="McCarney" fullname="Daniel McCarney">
      <organization>Let's Encrypt</organization>
      <address>
        <email>cpu@letsencrypt.org</email>
      </address>
    </author>
    <author initials="J." surname="Kasten" fullname="James Kasten">
      <organization>University of Michigan</organization>
      <address>
        <email>jdkasten@umich.edu</email>
      </address>
    </author>

    <date year="2019" month="February"/>

    
    <workgroup>ACME Working Group</workgroup>
    <keyword>certificate</keyword> <keyword>HTTPS</keyword> <keyword>PKI</keyword> <keyword>X.509</keyword>

    <abstract>


<t>Public Key Infrastructure using X.509 (PKIX) certificates are used for a number of purposes,
the most significant of which is the authentication of domain names.  Thus,
certification authorities (CAs) in the Web PKI are trusted to verify that an applicant
for a certificate legitimately represents the domain name(s) in the certificate.
As of this writing, this verification is done through a collection of ad hoc mechanisms.
This document describes a protocol that a CA and an
applicant can use to automate the process of verification and certificate
issuance.  The protocol also provides facilities for other certificate
management functions, such as certificate revocation.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Certificates <xref target="RFC5280"/> in the Web PKI are most commonly used to authenticate
domain names.  Thus, certification authorities (CAs) in the Web PKI are trusted to
verify that an applicant for a certificate legitimately represents the domain
name(s) in the certificate.</t>

<t>Different types of certificates reflect different kinds of CA verification of
information about the certificate subject.  “Domain Validation” (DV)
certificates are by far the most common type.  The only validation
the CA is required to perform in the DV issuance process is to
verify that the requester has effective control of the domain <xref target="CABFBR"></xref>.  The CA is not
required to attempt to verify the requester’s
real-world identity.  (This is as opposed to “Organization Validation” (OV) and
“Extended Validation” (EV) certificates, where the process is intended to also
verify the real-world identity of the requester.)</t>

<t>Existing Web PKI certificate authorities tend to use a set of ad hoc
protocols for certificate issuance and identity verification.  In the case of DV
certificates, a typical user experience is something like:</t>

<t><list style="symbols">
  <t>Generate a PKCS#10 <xref target="RFC2986"/> Certificate Signing Request (CSR).</t>
  <t>Cut and paste the CSR into a CA’s web page.</t>
  <t>Prove ownership of the domain by one of the following methods:
  <list style="symbols">
      <t>Put a CA-provided challenge at a specific place on the web server.</t>
      <t>Put a CA-provided challenge in a DNS record corresponding to the target
domain.</t>
      <t>Receive a CA-provided challenge at (hopefully) an administrator-controlled email
address corresponding to the domain, and then respond to it on the CA’s web
page.</t>
    </list></t>
  <t>Download the issued certificate and install it on their Web Server.</t>
</list></t>

<t>With the exception of the CSR itself and the certificates that are issued, these
are all completely ad hoc procedures and are accomplished by getting the human
user to follow interactive natural-language instructions from the CA rather than
by machine-implemented published protocols.  In many cases, the instructions are
difficult to follow and cause significant frustration and confusion.  Informal usability tests
by the authors indicate that webmasters often need 1-3 hours to obtain and
install a certificate for a domain.  Even in the best case, the lack of
published, standardized mechanisms presents an obstacle to the wide deployment
of HTTPS and other PKIX-dependent systems because it inhibits mechanization of
tasks related to certificate issuance, deployment, and revocation.</t>

<t>This document describes an extensible framework for automating the issuance and
domain validation procedure, thereby allowing servers and infrastructure
software to obtain certificates without user interaction.  Use of this protocol
should radically simplify the deployment of HTTPS and the practicality of PKIX-based
authentication for other protocols based on Transport Layer Security (TLS)
<xref target="RFC5246"/>.</t>

<t>It should be noted that while the focus of this document is on validating
domain names for purposes of issuing certificates in the Web PKI, ACME supports
extensions for uses with other identifiers in other PKI contexts.  For example,
as of this writing, there is ongoing work to use ACME for issuance of Web PKI
certificates attesting to IP addresses <xref target="I-D.ietf-acme-ip"/> and Secure Telephone Identity Revisited (STIR)
certificates attesting to telephone numbers <xref target="I-D.ietf-acme-telephone"/>.</t>

<t>ACME can also be used to automate some aspects of certificate management even
where non-automated processes are still needed.  For example, the external
account binding feature (see <xref target="external-account-binding"/>) can allow an ACME
account to use authorizations that have been granted to an external, non-ACME
account.  This allows ACME to address issuance scenarios that cannot yet be
fully automated, such as the issuance of “Extended Validation” certificates.</t>

</section>
<section anchor="deployment-model-and-operator-experience" title="Deployment Model and Operator Experience">

<t>The guiding use case for ACME is obtaining certificates for websites
(HTTPS <xref target="RFC2818"/>).  In this case, a web server is intended to speak
for one or more domains, and the process of certificate issuance is intended to
verify that this web server actually speaks for the domain(s).</t>

<t>DV certificate validation commonly checks claims about properties related to
control of a domain name – properties that can be observed by the certificate
issuer in an interactive process that can be conducted purely online.  That
means that under typical circumstances, all steps in the request, verification,
and issuance process can be represented and performed by Internet protocols with
no out-of-band human intervention.</t>

<t>Prior to ACME, when deploying an HTTPS server, a server operator typically gets a
prompt to generate a self-signed certificate.  If the operator were instead
deploying an HTTPS server using ACME, the experience would be something like this:</t>

<t><list style="symbols">
  <t>The operator’s ACME client prompts the operator for the intended domain name(s) that the
web server is to stand for.</t>
  <t>The ACME client presents the operator with a list of CAs from which it could
get a certificate.  (This list will change over time based on the capabilities
of CAs and updates to ACME configuration.) The ACME client might prompt the
operator for payment information at this point.</t>
  <t>The operator selects a CA.</t>
  <t>In the background, the ACME client contacts the CA and requests that it
issue a certificate for the intended domain name(s).</t>
  <t>The CA verifies that the client controls the requested domain name(s) by
having the ACME client perform some action(s) that can only be done
with control of the domain name(s).
For example, the CA might require a client requesting example.com
to provision DNS record under example.com or an HTTP resource
under http://example.com.</t>
  <t>Once the CA is satisfied, it issues the certificate and the ACME client
automatically downloads and installs it, potentially notifying the operator
via email, SMS, etc.</t>
  <t>The ACME client periodically contacts the CA to get updated certificates,
stapled Online Certificate Status Protocol (OCSP) responses, or whatever else would be required to keep the web server functional and its credentials up to date.</t>
</list></t>

<t>In this way, it would be nearly as easy to deploy with a CA-issued certificate
as with a self-signed certificate. Furthermore, the maintenance of that
CA-issued certificate would require minimal manual intervention.  Such close
integration of ACME with HTTPS servers allows the immediate and automated
deployment of certificates as they are issued, sparing the human administrator
from much of the time-consuming work described in the previous section.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>

<t>The two main roles in ACME are “client” and “server”.  The ACME client uses the
protocol to request certificate management actions, such as issuance or
revocation.  An ACME client may run on a web server, mail server, or some other
server system that requires valid X.509 certificates.  Or, it may run on a separate
server that does not consume the certificate but is authorized to respond to a
CA-provided challenge.  The ACME server runs at a certification authority
and responds to client requests, performing the requested actions if the client is
authorized.</t>

<t>An ACME client authenticates to the server by means of an “account key pair”.  The client uses the
private key of this key pair to sign all messages sent to the server.  The
server uses the public key to verify the authenticity and integrity of messages
from the client.</t>

</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>ACME allows a client to request certificate management actions using a set of
JavaScript Object Notation (JSON) messages carried over HTTPS <xref target="RFC8259"/> <xref target="RFC2818"/>.
Issuance using ACME resembles a traditional CA’s issuance process, in which a user creates an account,
requests a certificate, and proves control of the domain(s) in that certificate in
order for the CA to issue the requested certificate.</t>

<t>The first phase of ACME is for the client to request an account with the
ACME server.  The client generates an asymmetric key pair and requests a
new account, optionally providing contact information, agreeing to terms
of service (ToS), and/or associating the account with an existing account
in another system. The creation request is signed with the generated
private key to prove that the client controls it.</t>

<figure title="Account Creation"><artwork><![CDATA[
      Client                                                   Server

      [Contact Information]
      [ToS Agreement]
      [Additional Data]
      Signature                     ------->
                                                          Account URL
                                    <-------           Account Object


                [] Information covered by request signatures
]]></artwork></figure>

<t>Once an account is registered, there are four major steps the client needs to take to
get a certificate:</t>

<t><list style="numbers">
  <t>Submit an order for a certificate to be issued</t>
  <t>Prove control of any identifiers requested in the certificate</t>
  <t>Finalize the order by submitting a CSR</t>
  <t>Await issuance and download the issued certificate</t>
</list></t>

<t>The client’s order for a certificate describes the desired identifiers
plus a few additional fields that
capture semantics that are not supported in the CSR format.  If the server is
willing to consider issuing such a certificate, it responds with a list of
requirements that the client must satisfy before the certificate will be issued.</t>

<t>For example, in most cases, the server will require the client to demonstrate
that it controls the identifiers in the requested certificate.  Because there
are many different ways to validate possession of different types of
identifiers, the server will choose from an extensible set of challenges that
are appropriate for the identifier being claimed.  The client responds with a
set of responses that tell the server which challenges the client has completed.
The server then validates that the client has completed the challenges.</t>

<t>Once the validation process is complete and the server is satisfied that the
client has met its requirements, the client finalizes the order by submitting
a PKCS#10 Certificate Signing Request (CSR). The server will issue the requested
certificate and make it available to the client.</t>

<figure title="Certificate Issuance"><artwork><![CDATA[
      Client                                                   Server

      [Order]
      Signature                     ------->
                                    <-------  Required Authorizations

      [Responses]
      Signature                     ------->

                          <~~~~~~~~Validation~~~~~~~~>

      [CSR]
      Signature                     ------->
                                    <-------          Acknowledgement

                          <~~~~~~Await issuance~~~~~~>

      POST-as-GET request           ------->
                                    <-------              Certificate

                [] Information covered by request signatures
]]></artwork></figure>

<t>To revoke a certificate, the client sends a signed revocation request indicating
the certificate to be revoked:</t>

<figure title="Certificate Revocation"><artwork><![CDATA[
      Client                                                 Server

      [Revocation request]
      Signature                    -------->

                                   <--------                 Result

                [] Information covered by request signatures
]]></artwork></figure>

<t>Note that while ACME is defined with enough flexibility to handle different
types of identifiers in principle, the primary use case addressed by this
document is the case where domain names are used as identifiers.  For example,
all of the identifier validation challenges described in
<xref target="identifier-validation-challenges"/> address validation of domain names.
The use of ACME for other identifiers will require further specification in order
to describe how these identifiers are encoded in the protocol and what types of
validation challenges the server might require.</t>

</section>
<section anchor="character-encoding" title="Character Encoding">

<t>All requests and responses sent via HTTP by ACME clients, ACME servers, and
validation servers as well as any inputs for digest computations MUST be encoded
using the UTF-8 character set <xref target="RFC3629"/>. Note that identifiers that appear in
certificates may have their own encoding considerations (e.g., DNS names containing
non-ASCII characters are expressed as A-labels rather than U-labels). Any such
encoding considerations are to be applied prior to the aforementioned UTF-8
encoding.</t>

</section>
<section anchor="message-transport" title="Message Transport">

<t>Communications between an ACME client and an ACME server are done over HTTPS,
using JSON Web Signature (JWS) <xref target="RFC7515"/> to provide some additional security
properties for messages sent from
the client to the server.  HTTPS provides server authentication and
confidentiality.  With some ACME-specific extensions, JWS provides
authentication of the client’s request payloads, anti-replay protection, and
integrity for the HTTPS request URL.</t>

<section anchor="https-requests" title="HTTPS Requests">

<t>Each ACME function is accomplished by the client sending a sequence of HTTPS
requests to the server, carrying JSON messages <xref target="RFC2818"/><xref target="RFC8259"/>.  Use of
HTTPS is REQUIRED. Each subsection of
<xref target="certificate-management"/> below describes the message formats used by the
function and the order in which messages are sent.</t>

<t>In most HTTPS transactions used by ACME, the ACME client is the HTTPS client
and the ACME server is the HTTPS server. The ACME server acts as a
client when validating challenges: an HTTP client when
validating an ‘http-01’ challenge, a DNS client with ‘dns-01’, etc.</t>

<t>ACME servers SHOULD follow the recommendations of <xref target="RFC7525"/> when configuring
their TLS implementations.  ACME servers that support TLS 1.3 MAY allow clients
to send early data (0-RTT).  This is safe because the ACME protocol itself
includes anti-replay protections (see <xref target="replay-protection"/>) in all cases where
they are required.  For this reason, there are no restrictions on what ACME
data can be carried in 0-RTT.</t>

<t>ACME clients MUST send a User-Agent header field, in accordance with
<xref target="RFC7231"/>. This header field SHOULD include the name and version of the
ACME software in addition to the name and version of the underlying
HTTP client software.</t>

<t>ACME clients SHOULD send an Accept-Language header field in accordance with
<xref target="RFC7231"/> to enable localization of error messages.</t>

<t>ACME servers that are intended to be generally accessible need to use
Cross-Origin Resource Sharing (CORS) in order to be accessible from
browser-based clients <xref target="W3C.REC-cors-20140116"/>.  Such servers SHOULD set the
Access-Control-Allow-Origin header field to the value “*”.</t>

<t>Binary fields in the JSON objects used by ACME are encoded using base64url
encoding described in Section 5 of <xref target="RFC4648"/> according to the profile specified
in JSON Web Signature in Section 2 of <xref target="RFC7515"/>. This encoding uses a URL safe
character set. Trailing ‘=’ characters MUST be stripped. Encoded
values that include trailing ‘=’ characters MUST be rejected as
improperly encoded.</t>

</section>
<section anchor="request-authentication" title="Request Authentication">

<t>All ACME requests with a non-empty body MUST encapsulate their payload
in a JSON Web Signature (JWS) <xref target="RFC7515"/> object, signed using the account’s
private key unless otherwise specified.  The server MUST verify the JWS before
processing the request. Encapsulating request bodies in JWS provides
authentication of requests.</t>

<t>JWS objects sent in ACME requests MUST meet the following additional criteria:</t>

<t><list style="symbols">
  <t>The JWS MUST be in the  Flattened JSON Serialization <xref target="RFC7515"/></t>
  <t>The JWS MUST NOT have multiple signatures</t>
  <t>The JWS Unencoded Payload Option <xref target="RFC7797"/> MUST NOT be used</t>
  <t>The JWS Unprotected Header <xref target="RFC7515"/> MUST NOT be used</t>
  <t>The JWS Payload MUST NOT be detached</t>
  <t>The JWS Protected Header MUST include the following fields:
  <list style="symbols">
      <t>“alg” (Algorithm)
      <list style="symbols">
          <t>This field MUST NOT contain “none” or a Message Authentication Code (MAC) algorithm (e.g. one in which the algorithm registry description mentions MAC/HMAC).</t>
        </list></t>
      <t>“nonce” (defined in <xref target="replay-protection"/>)</t>
      <t>“url” (defined in <xref target="request-url-integrity"/>)</t>
      <t>Either “jwk” (JSON Web Key) or “kid” (Key ID) as specified below</t>
    </list></t>
</list></t>

<t>An ACME server MUST implement the “ES256” signature algorithm <xref target="RFC7518"/> and SHOULD implement the “EdDSA” signature algorithm using the “Ed25519” variant (indicated by “crv”) <xref target="RFC8037"/>.</t>

<t>The “jwk” and “kid” fields are mutually exclusive. Servers MUST reject requests
that contain both.</t>

<t>For newAccount requests, and for revokeCert requests authenticated by a certificate
key, there MUST be a “jwk” field. This field MUST contain the public key
corresponding to the private key used to sign the JWS.</t>

<t>For all other requests, the request is signed using an existing account, and
there MUST be a “kid” field. This field MUST contain the account URL received by
POSTing to the newAccount resource.</t>

<t>If the client sends a JWS signed with an algorithm that the server does not
support, then the server MUST return an error with status code 400 (Bad Request)
and type “urn:ietf:params:acme:error:badSignatureAlgorithm”.  The problem
document returned with the error MUST include an “algorithms” field with an
array of supported “alg” values.  See <xref target="errors"/> for more details on
the structure of error responses.</t>

<t>Because client requests in ACME carry JWS objects in the Flattened
JSON Serialization, they must have the “Content-Type” header field
set to “application/jose+json”.  If a request does not meet this
requirement, then the server MUST return a response with status code
415 (Unsupported Media Type).</t>

</section>
<section anchor="post-as-get" title="GET and POST-as-GET Requests">

<t>Note that authentication via signed JWS request bodies implies that
requests without an entity body are not authenticated, in particular
GET requests.  Except for the cases described in this section, if
the server receives a GET request, it MUST return an error with
status code 405 (Method Not Allowed) and type “malformed”.</t>

<t>If a client wishes to fetch a resource from the server (which would
otherwise be done with a GET), then it MUST send a POST request with
a JWS body as described above, where the payload of the JWS is a
zero-length octet string.  In other words, the “payload” field of the
JWS object MUST be present and set to the empty string (“”).</t>

<t>We will refer to these as “POST-as-GET” requests. On receiving a
request with a zero-length (and thus non-JSON) payload, the server
MUST authenticate the sender and verify any access control rules.
Otherwise, the server MUST treat this request as having the same
semantics as a GET request for the same resource.</t>

<t>The server MUST allow GET requests for the directory and newNonce
resources (see <xref target="resources"/>), in addition to POST-as-GET requests
for these resources.  This enables clients to bootstrap into the
ACME authentication system.</t>

</section>
<section anchor="request-url-integrity" title="Request URL Integrity">

<t>It is common in deployment for the entity terminating TLS for HTTPS to be different
from the entity operating the logical HTTPS server, with a “request routing”
layer in the middle.  For example, an ACME CA might have a content delivery
network terminate TLS connections from clients so that it can inspect client
requests for denial-of-service (DoS) protection.</t>

<t>These intermediaries can also change values in the request that are not signed
in the HTTPS request, e.g., the request URL and header fields.  ACME uses JWS to
provide an integrity mechanism, which protects against an intermediary
changing the request URL to another ACME URL.</t>

<t>As noted in <xref target="request-authentication"/>, all ACME request objects carry a
“url” header parameter in their protected header.  This header parameter encodes
the URL to which the client is directing the request.  On receiving such an
object in an HTTP request, the server MUST compare the “url” header parameter to
the request URL.  If the two do not match, then the server MUST reject the
request as unauthorized.</t>

<t>Except for the directory resource, all ACME resources are addressed with URLs
provided to the client by the server.  In requests sent to these resources, the client MUST set
the “url” header parameter to the exact string provided by the server (rather
than performing any re-encoding on the URL).  The server SHOULD perform the
corresponding string equality check, configuring each resource with the URL
string provided to clients and having the resource check that requests have the
same string in their “url” header parameter. The server MUST reject the request
as unauthorized if the string equality check fails.</t>

<section anchor="url-url-jws-header-parameter" title="&quot;url&quot; (URL) JWS Header Parameter">

<t>The “url” header parameter specifies the URL <xref target="RFC3986"/> to which this JWS
object is directed.  The “url” header parameter MUST be carried in the protected
header of the JWS.  The value of the “url” header parameter MUST be a string
representing the target URL.</t>

</section>
</section>
<section anchor="replay-protection" title="Replay Protection">

<t>In order to protect ACME resources from any possible replay attacks, ACME
POST requests have a mandatory anti-replay mechanism.  This mechanism is based on the
server maintaining a list of nonces that it has issued, and requiring
any signed request from the client to carry such a nonce.</t>

<t>An ACME server provides nonces to clients using the HTTP Replay-Nonce header field,
as specified in <xref target="replay-nonce"/>.  The server MUST include a Replay-Nonce
header field in every successful response to a POST request and SHOULD provide
it in error responses as well.</t>

<t>Every JWS sent by an ACME client MUST include, in its protected header, the
“nonce” header parameter, with contents as defined in
<xref target="nonce-nonce-jws-header-parameter"/>.  As part of JWS verification, the
ACME server MUST verify that the value of the “nonce” header is a value that the
server previously provided in a Replay-Nonce header field.  Once a nonce value
has appeared in an ACME request, the server MUST consider it invalid, in the same
way as a value it had never issued.</t>

<t>When a server rejects a request because its nonce value was unacceptable (or not
present), it MUST provide HTTP status code 400 (Bad Request), and indicate the
ACME error type “urn:ietf:params:acme:error:badNonce”.  An error response with
the “badNonce” error type MUST include a Replay-Nonce header with a
fresh nonce that the server will accept in a retry of the original
query (and possibly in other requests, according to the server’s
nonce scoping policy).
On receiving such a response, a client SHOULD retry the request using the new
nonce.</t>

<t>The precise method used to generate and track nonces is up to the server.  For
example, the server could generate a random 128-bit value for each response,
keep a list of issued nonces, and strike nonces from this list as they are used.</t>

<t>Other than the constraint above with regard to nonces issued in
“badNonce” responses, ACME does not constrain how servers
scope nonces. Clients MAY assume that nonces have broad scope,
e.g., by having a single pool of nonces used for all requests.
However, when retrying in response to a “badNonce” error, the client
MUST use the nonce provided in the error response. Servers should
scope nonces broadly enough that retries are not needed very often.</t>

<section anchor="replay-nonce" title="Replay-Nonce">

<t>The “Replay-Nonce” header field includes a server-generated value that the
server can use to detect unauthorized replay in future client requests.  The
server MUST generate the value provided in Replay-Nonce in such a way that
they are unique to each message, with high probability, and unpredictable to anyone besides the server. For instance, it is
acceptable to generate Replay-Nonces randomly.</t>

<t>The value of the Replay-Nonce field MUST be an octet string encoded according to
the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  Clients MUST
ignore invalid Replay-Nonce values.  The ABNF <xref target="RFC5234"/> for the Replay-Nonce
header field follows:</t>

<figure><artwork><![CDATA[
  base64url = ALPHA / DIGIT / "-" / "_"

  Replay-Nonce = 1*base64url
]]></artwork></figure>

<t>The Replay-Nonce header field SHOULD NOT be included in HTTP request messages.</t>

</section>
<section anchor="nonce-nonce-jws-header-parameter" title="&quot;nonce&quot; (Nonce) JWS Header Parameter">

<t>The “nonce” header parameter provides a unique value that enables the verifier
of a JWS to recognize when replay has occurred. The “nonce” header parameter
MUST be carried in the protected header of the JWS.</t>

<t>The value of the “nonce” header parameter MUST be an octet string, encoded
according to the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  If
the value of a “nonce” header parameter is not valid according to this encoding,
then the verifier MUST reject the JWS as malformed.</t>

</section>
</section>
<section anchor="rate-limits" title="Rate Limits">

<t>Creation of resources can be rate limited by ACME servers to ensure fair usage and
prevent abuse.  Once the rate limit is exceeded, the server MUST respond
with an error with the type “urn:ietf:params:acme:error:rateLimited”.
Additionally, the server SHOULD send a “Retry-After” header <xref target="RFC7231"/> indicating
when the current request may succeed again.  If multiple rate limits are
in place, that is the time where all rate limits allow access again for
the current request with exactly the same parameters.</t>

<t>In addition to the human-readable “detail” field of the error response, the
server MAY send one or multiple link relations in the “Link” header <xref target="RFC8288"/> pointing to
documentation about the specific rate limit that was hit, using the “help” link relation type.</t>

</section>
<section anchor="errors" title="Errors">

<t>Errors can be reported in ACME both at the HTTP layer and within challenge
objects as defined in <xref target="identifier-validation-challenges"/>. ACME servers can
return responses with an HTTP error response code (4XX or 5XX). For example,
if the client submits a request using a method not allowed in this document,
then the server MAY return status code 405 (Method Not Allowed).</t>

<t>When the server responds with an error status, it SHOULD provide additional
information using a problem document <xref target="RFC7807"/>.  To facilitate automatic
response to errors, this document defines the following standard tokens for use
in the “type” field (within the ACME URN namespace “urn:ietf:params:acme:error:”):</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>accountDoesNotExist</c>
      <c>The request specified an account that does not exist</c>
      <c>alreadyRevoked</c>
      <c>The request specified a certificate to be revoked that has already been revoked</c>
      <c>badCSR</c>
      <c>The CSR is unacceptable (e.g., due to a short key)</c>
      <c>badNonce</c>
      <c>The client sent an unacceptable anti-replay nonce</c>
      <c>badRevocationReason</c>
      <c>The revocation reason provided is not allowed by the server</c>
      <c>badSignatureAlgorithm</c>
      <c>The JWS was signed with an algorithm the server does not support</c>
      <c>caa</c>
      <c>Certification Authority Authorization (CAA) records forbid the CA from issuing a certificate</c>
      <c>compound</c>
      <c>Specific error conditions are indicated in the “subproblems” array.</c>
      <c>connection</c>
      <c>The server could not connect to validation target</c>
      <c>dns</c>
      <c>There was a problem with a DNS query during identifier validation</c>
      <c>externalAccountRequired</c>
      <c>The request must include a value for the “externalAccountBinding” field</c>
      <c>incorrectResponse</c>
      <c>Response received didn’t match the challenge’s requirements</c>
      <c>invalidContact</c>
      <c>A contact URL for an account was invalid</c>
      <c>malformed</c>
      <c>The request message was malformed</c>
      <c>rateLimited</c>
      <c>The request exceeds a rate limit</c>
      <c>rejectedIdentifier</c>
      <c>The server will not issue certificates for the identifier</c>
      <c>serverInternal</c>
      <c>The server experienced an internal error</c>
      <c>tls</c>
      <c>The server received a TLS error during validation</c>
      <c>unauthorized</c>
      <c>The client lacks sufficient authorization</c>
      <c>unsupportedContact</c>
      <c>A contact URL for an account used an unsupported protocol scheme</c>
      <c>unsupportedIdentifier</c>
      <c>An identifier is of an unsupported type</c>
      <c>userActionRequired</c>
      <c>Visit the “instance” URL and take actions specified there</c>
</texttable>

<t>This list is not exhaustive. The server MAY return errors whose “type” field is
set to a URI other than those defined above.  Servers MUST NOT use the ACME URN
namespace for errors not listed in the appropriate IANA registry (see <xref target="acme-urn-space"/>).  Clients SHOULD display the
“detail” field of all errors.</t>

<t>In the remainder of this document, we use the tokens in the table above to refer
to error types, rather than the full URNs.  For example, an “error of type
‘badCSR’” refers to an error document with “type” value
“urn:ietf:params:acme:error:badCSR”.</t>

<section anchor="subproblems" title="Subproblems">

<t>Sometimes a CA may need to return multiple errors in response to a request.
Additionally, the CA may need to attribute errors to specific
identifiers.  For instance, a new-order request may contain multiple
identifiers for which the CA cannot issue. In this situation, an ACME
problem document MAY contain the “subproblems” field, containing a JSON
array of problem documents, each of which MAY contain an “identifier”
field. If present, the “identifier” field MUST contain an ACME identifier
(<xref target="iana-identifier"/>). The “identifier” field MUST NOT be present at
the top level in ACME problem documents. It can only be present in subproblems.
Subproblems need not all have the same type, and they do not need to match the top level type.</t>

<t>ACME clients may choose to use the “identifier” field of a subproblem
as a hint that an operation would succeed if that identifier were omitted. For
instance, if an order contains ten DNS identifiers, and the new-order
request returns a problem document with two subproblems (referencing two
of those identifiers), the ACME client may choose to submit another order
containing only the eight identifiers not listed in the problem document.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json

{
    "type": "urn:ietf:params:acme:error:malformed",
    "detail": "Some of the identifiers requested were rejected",
    "subproblems": [
        {
            "type": "urn:ietf:params:acme:error:malformed",
            "detail": "Invalid underscore in DNS name \"_example.com\"",
            "identifier": {
                "type": "dns",
                "value": "_example.com"
            }
        },
        {
            "type": "urn:ietf:params:acme:error:rejectedIdentifier",
            "detail": "This CA will not issue for \"example.net\"",
            "identifier": {
                "type": "dns",
                "value": "example.net"
            }
        }
    ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="certificate-management" title="Certificate Management">

<t>In this section, we describe the certificate management functions that ACME
enables:</t>

<t><list style="symbols">
  <t>Account Creation</t>
  <t>Ordering a Certificate</t>
  <t>Identifier Authorization</t>
  <t>Certificate Issuance</t>
  <t>Certificate Revocation</t>
</list></t>

<section anchor="resources" title="Resources">

<t>ACME is structured as a HTTP-based application with the following types of resources:</t>

<t><list style="symbols">
  <t>Account resources, representing information about an account
(<xref target="account-objects"/>, <xref target="account-management"/>)</t>
  <t>Order resources, representing an account’s requests to issue certificates
(<xref target="order-objects"/>)</t>
  <t>Authorization resources, representing an account’s authorization to act for an
identifier (<xref target="authorization-objects"/>)</t>
  <t>Challenge resources, representing a challenge to prove control of an
identifier (<xref target="identifier-authorization"/>, <xref target="identifier-validation-challenges"/>)</t>
  <t>Certificate resources, representing issued certificates
(<xref target="downloading-the-certificate"/>)</t>
  <t>A “directory” resource (<xref target="directory"/>)</t>
  <t>A “newNonce” resource (<xref target="getting-a-nonce"/>)</t>
  <t>A “newAccount” resource (<xref target="account-management"/>)</t>
  <t>A “newOrder” resource (<xref target="applying-for-certificate-issuance"/>)</t>
  <t>A “revokeCert” resource (<xref target="certificate-revocation"/>)</t>
  <t>A “keyChange” resource (<xref target="account-key-roll-over"/>)</t>
</list></t>

<t>The server MUST provide “directory” and “newNonce” resources.</t>

<t>ACME uses different URLs for different management functions. Each function is
listed in a directory along with its corresponding URL, so clients only need to
be configured with the directory URL.  These URLs are connected by a few
different link relations <xref target="RFC5988"/>.</t>

<t>The “up” link relation is used with challenge resources to indicate the
authorization resource to which a challenge belongs.  It is also used, with some
media types, from certificate resources to indicate a resource from which the
client may fetch a chain of CA certificates that could be used to validate the
certificate in the original resource.</t>

<t>The “index” link relation is present on all resources other than the
directory and indicates the URL of the directory.</t>

<t>The following diagram illustrates the relations between resources on an ACME
server.  For the most part, these relations are expressed by URLs provided as
strings in the resources’ JSON representations.  Lines with labels in quotes
indicate HTTP link relations.</t>

<figure title="ACME Resources and Relationships"><artwork><![CDATA[
                               directory
                                   |
                                   +--> newNonce
                                   |
       +----------+----------+-----+-----+------------+
       |          |          |           |            |
       |          |          |           |            |
       V          V          V           V            V
  newAccount   newAuthz   newOrder   revokeCert   keyChange
       |          |          |
       |          |          |
       V          |          V
    account       |        order --+--> finalize
                  |          |     |
                  |          |     +--> cert
                  |          V
                  +---> authorization
                            | ^
                            | | "up"
                            V |
                          challenge
]]></artwork></figure>

<t>The following table illustrates a typical sequence of requests required to
establish a new account with the server, prove control of an identifier, issue a
certificate, and fetch an updated certificate some time after issuance.  The
“-&gt;” is a mnemonic for a Location header pointing to a created resource.</t>

<texttable>
      <ttcol align='left'>Action</ttcol>
      <ttcol align='left'>Request</ttcol>
      <ttcol align='left'>Response</ttcol>
      <c>Get directory</c>
      <c>GET  directory</c>
      <c>200</c>
      <c>Get nonce</c>
      <c>HEAD newNonce</c>
      <c>200</c>
      <c>Create account</c>
      <c>POST newAccount</c>
      <c>201 -&gt; account</c>
      <c>Submit order</c>
      <c>POST newOrder</c>
      <c>201 -&gt; order</c>
      <c>Fetch challenges</c>
      <c>POST-as-GET order’s authorization urls</c>
      <c>200</c>
      <c>Respond to challenges</c>
      <c>POST authorization challenge urls</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Finalize order</c>
      <c>POST order’s finalize url</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Download certificate</c>
      <c>POST-as-GET order’s certificate url</c>
      <c>200</c>
</texttable>

<t>The remainder of this section provides the details of how these resources are
structured and how the ACME protocol makes use of them.</t>

<section anchor="directory" title="Directory">

<t>In order to help clients configure themselves with the right URLs for each ACME
operation, ACME servers provide a directory object. This should be the only URL
needed to configure clients. It is a JSON object, whose field names are drawn from
the resource registry (<xref target="iana-resource"/>) and whose values are the corresponding
URLs.</t>

<texttable>
      <ttcol align='left'>Field</ttcol>
      <ttcol align='left'>URL in Value</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>keyChange</c>
      <c>Key Change</c>
</texttable>

<t>There is no constraint on the URL of the directory except that it
should be different from the other ACME server resources’ URLs, and that it
should not clash with other services. For instance:</t>

<t><list style="symbols">
  <t>a host that functions as both an ACME and a Web server may want to keep
the root path “/” for an HTML “front page” and place the ACME
directory under the path “/acme”.</t>
  <t>a host that only functions as an ACME server could place the directory
under the path “/”.</t>
</list></t>

<t>If the ACME server does not implement pre-authorization (<xref target="pre-authorization"/>), it
MUST omit the “newAuthz” field of the directory.</t>

<t>The object MAY additionally contain a “meta” field. If present, it MUST be a
JSON object; each field in the object is an item of metadata relating to
the service provided by the ACME server.</t>

<t>The following metadata items are defined (<xref target="iana-meta"/>), all of which are OPTIONAL:</t>

<t><list style="hanging">
  <t hangText='termsOfService (optional, string):'>
  A URL identifying the current terms of service.</t>
  <t hangText='website (optional, string):'>
  An HTTP or HTTPS URL locating a website providing more
information about the ACME server.</t>
  <t hangText='caaIdentities (optional, array of string):'>
  The hostnames that the ACME server recognizes as referring to
itself for the purposes of CAA record validation as defined in
<xref target="RFC6844"/>.  Each string MUST represent the same sequence of ASCII
code points that the server will expect to see as the “Issuer Domain
Name” in a CAA issue or issuewild property tag.  This allows clients
to determine the correct issuer domain name to use when configuring
CAA records.</t>
  <t hangText='externalAccountRequired (optional, boolean):'>
  If this field is present and set to “true”, then the CA requires that all
new-account requests include an “externalAccountBinding” field associating the
new account with an external account.</t>
</list></t>

<t>Clients access the directory by sending a GET request to the directory URL.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "newNonce": "https://example.com/acme/new-nonce",
  "newAccount": "https://example.com/acme/new-account",
  "newOrder": "https://example.com/acme/new-order",
  "newAuthz": "https://example.com/acme/new-authz",
  "revokeCert": "https://example.com/acme/revoke-cert",
  "keyChange": "https://example.com/acme/key-change",
  "meta": {
    "termsOfService": "https://example.com/acme/terms/2017-5-30",
    "website": "https://www.example.com/",
    "caaIdentities": ["example.com"],
    "externalAccountRequired": false
  }
}
]]></artwork></figure>

</section>
<section anchor="account-objects" title="Account Objects">

<t>An ACME account resource represents a set of metadata associated with an account.
Account resources have the following structure:</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this account. Possible values are “valid”, “deactivated”, and
“revoked”.  The value “deactivated” should be used to indicate client-initiated
deactivation whereas “revoked” should be used to indicate server-initiated
deactivation. See <xref target="status-changes"/>.</t>
  <t hangText='contact (optional, array of string):'>
  An array of URLs that the server can use to contact the client for issues
related to this account. For example, the server may wish to notify the
client about server-initiated revocation or certificate expiration.
For information on supported URL schemes, see <xref target="account-management"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Including this field in a new-account request, with a value of true, indicates
the client’s agreement with the terms of service. This field cannot be updated
by the client.</t>
  <t hangText='orders (required, string):'>
  A URL from which a list of orders submitted by this account can be fetched via
a POST-as-GET request, as described in <xref target="orders-list"/>.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "contact": [
    "mailto:cert-admin@example.com",
    "mailto:admin@example.com"
  ],
  "termsOfServiceAgreed": true,
  "orders": "https://example.com/acme/orders/rzGoeA"
}
]]></artwork></figure>

<section anchor="orders-list" title="Orders List">

<t>Each account object includes an “orders” URL from which a list of orders created
by the account can be fetched via POST-as-GET request. The result of the request
MUST be a JSON object whose “orders” field is an array of URLs, each identifying
an order belonging to the account.  The server SHOULD include pending orders
and SHOULD NOT include orders that are invalid in the array of URLs. The server
MAY return an incomplete list, along with a Link header field with a “next” link
relation indicating where further entries can be acquired.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/orders/rzGoeA?cursor=2>;rel="next"

{
  "orders": [
    "https://example.com/acme/order/TOlocE8rfgo",
    "https://example.com/acme/order/4E16bbL5iSw",
    /* more URLs not shown for example brevity */
    "https://example.com/acme/order/neBHYLfw0mg"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="order-objects" title="Order Objects">

<t>An ACME order object represents a client’s request for a certificate and is
used to track the progress of that order through to issuance.  Thus, the object
contains information about the requested certificate, the authorizations that
the server requires the client to complete, and any certificates that have
resulted from this order.</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this order.  Possible values are “pending”,
“ready”, “processing”, “valid”, and “invalid”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this order invalid, encoded
in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED for
objects with “pending” or “valid” in the status field.</t>
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the order pertains to.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.  This document defines the “dns”
identifier type.  See the registry defined in <xref target="iana-identifier"/>
for any others.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='error (optional, object):'>
  The error that occurred while processing the order, if any.
This field is structured as a problem document <xref target="RFC7807"/>.</t>
  <t hangText='authorizations (required, array of string):'>
  For pending orders, the authorizations that the client needs to complete
before the requested certificate can be issued (see
<xref target="identifier-authorization"/>), including unexpired authorizations that the client has completed in the past for identifiers specified in the order. The authorizations required are dictated by server policy; there may not be a 1:1 relationship between the order identifiers and the authorizations required. For final orders (in the “valid” or “invalid” state), the authorizations that
were completed.  Each entry is a URL from which an authorization can be fetched
with a POST-as-GET request.</t>
  <t hangText='finalize (required, string):'>
  A URL that a CSR must be POSTed to once all of the order’s authorizations are
satisfied to finalize the order. The result of a successful finalization will be
the population of the certificate URL for the order.</t>
  <t hangText='certificate (optional, string):'>
  A URL for the certificate that has been issued in response to this order.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
    { "type": "dns", "value": "www.example.com" }
  ],

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/jWCdfHVGY2M"
}
]]></artwork></figure>

<t>Any identifier of type “dns” in a new-order request MAY have a wildcard domain
name as its value. A wildcard domain name consists of a single asterisk
character followed by a single full stop character (“*.”) followed by a domain
name as defined for use in the Subject Alternate Name Extension by
<xref target="RFC5280"/>. An authorization returned by the server for a wildcard domain name
identifier MUST NOT include the asterisk and full stop (“*.”) prefix in the
authorization identifier value. The returned authorization MUST include the
optional “wildcard” field, with a value of true.</t>

<t>The elements of the “authorizations” and “identifiers” arrays are immutable once
set.  The server MUST NOT change the contents of either array after they are
created. If a client observes a change in the contents of either array, then it
SHOULD consider the order invalid.</t>

<t>The “authorizations” array of the order SHOULD reflect all authorizations
that the CA takes into account in deciding to issue, even if some authorizations
were fulfilled in earlier orders or in pre-authorization transactions.  For
example, if a CA allows multiple orders to be fulfilled based on a single
authorization transaction, then it SHOULD reflect that authorization in all of
the orders.</t>

<t>Note that just because an authorization URL is listed in the
“authorizations” array of an order object doesn’t mean that the
client is required to take action.  There are several reasons that
the referenced authorizations may already be valid:</t>

<t><list style="symbols">
  <t>The client completed the authorization as part of a previous order</t>
  <t>The client previously pre-authorized the identifier (see <xref target="pre-authorization"/>)</t>
  <t>The server granted the client authorization based on an external account</t>
</list></t>

<t>Clients SHOULD check the “status” field of an order to determine
whether they need to take any action.</t>

</section>
<section anchor="authorization-objects" title="Authorization Objects">

<t>An ACME authorization object represents a server’s authorization for an account
to represent an identifier.  In addition to the identifier, an authorization
includes several metadata fields, such as the status of the authorization (e.g.,
“pending”, “valid”, or “revoked”) and which challenges were used to validate
possession of the identifier.</t>

<t>The structure of an ACME authorization resource is as follows:</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier that the account is authorized to represent.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier (see below and <xref target="iana-identifier"/>).</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='status (required, string):'>
  The status of this authorization.  Possible values are “pending”,
“valid”, “invalid”, “deactivated”, “expired”, and “revoked”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this authorization invalid,
encoded in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED
for objects with “valid” in the “status” field.</t>
  <t hangText='challenges (required, array of objects):'>
  For pending authorizations, the challenges that the client can
fulfill in order to prove possession of the identifier.  For valid
authorizations, the challenge that was validated.  For invalid
authorizations, the challenge that was attempted and failed.  Each
array entry is an object with parameters required to validate the
challenge.  A client should attempt to fulfill one of these
challenges, and a server should consider any one of the challenges
sufficient to make the authorization valid.</t>
  <t hangText='wildcard (optional, boolean):'>
  This field MUST be present and true for authorizations created as
a result of a newOrder request containing a DNS identifier with a
value that contained a wildcard prefix.  For other authorizations,
it MUST be absent.</t>
</list></t>

<t>The only type of identifier defined by this specification is a fully qualified
domain name (type: “dns”). The domain name MUST be encoded in the
form in which it would appear in a certificate.  That is, it MUST be
encoded according to the rules in Section 7 of <xref target="RFC5280"/>.  Servers MUST verify
any identifier values that begin with the ASCII-Compatible Encoding prefix
“xn--” as defined in <xref target="RFC5890"/> are properly encoded. Wildcard domain names
(with “*” as the first label) MUST NOT be included in authorization objects. If
an authorization object conveys authorization for the base domain of a newOrder
DNS type identifier with a wildcard prefix, then the optional authorizations
“wildcard” field MUST be present with a value of true.</t>

<t><xref target="identifier-validation-challenges"/> describes a set of challenges for domain
name validation.</t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "type": "http-01",
      "status": "valid",
      "token": "DGyRejmCefe7v4NfDGDKfA",
      "validated": "2014-12-01T12:05:58.16Z"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="challenge-objects" title="Challenge Objects">

<t>An ACME challenge object represents a server’s offer to validate a
client’s possession of an identifier in a specific way.  Unlike the
other objects listed above, there is not a single standard structure
for a challenge object.  The contents of a challenge object depend
on the validation method being used.  The general structure of
challenge objects and an initial set of validation methods are
described in <xref target="identifier-validation-challenges"/>.</t>

</section>
<section anchor="status-changes" title="Status Changes">

<t>Each ACME object type goes through a simple state machine over its
lifetime.  The “status” field of the object indicates which state
the object is currently in.</t>

<t>Challenge objects are created in the “pending” state.  They
transition to the “processing” state when the client responds to the
challenge (see <xref target="responding-to-challenges"/>) and the server begins
attempting to validate that the client has completed the challenge.
Note that within the “processing” state, the server may attempt to
validate the challenge multiple times (see <xref target="retrying-challenges"/>).
Likewise, client requests for retries do not cause a state change.
If validation is successful, the challenge moves to the “valid”
state; if there is an error, the challenge moves to the “invalid”
state.</t>

<figure title="State Transitions for Challenge Objects"><artwork><![CDATA[
         pending
            |
            | Receive
            | response
            V
        processing <-+
            |   |    | Server retry or
            |   |    | client retry request
            |   +----+
            |
            |
Successful  |   Failed
validation  |   validation
  +---------+---------+
  |                   |
  V                   V
valid              invalid
]]></artwork></figure>

<t>Authorization objects are created in the “pending” state.  If one of
the challenges listed in the authorization transitions to the
“valid” state, then the authorization also changes to the “valid”
state.  If the client attempts to fulfill a challenge and fails, or
if there is an error while the authorization is still
pending, then the authorization transitions to the “invalid” state.
Once the authorization is in the valid state, it can expire
(“expired”), be deactivated by the client (“deactivated”, see
<xref target="deactivating-an-authorization"/>), or revoked by the server
(“revoked”).</t>

<figure title="State Transitions for Authorization Objects"><artwork><![CDATA[
                   pending --------------------+
                      |                        |
    Challenge failure |                        |
           or         |                        |
          Error       |  Challenge valid       |
            +---------+---------+              |
            |                   |              |
            V                   V              |
         invalid              valid            |
                                |              |
                                |              |
                                |              |
                 +--------------+--------------+
                 |              |              |
                 |              |              |
          Server |       Client |   Time after |
          revoke |   deactivate |    "expires" |
                 V              V              V
              revoked      deactivated      expired
]]></artwork></figure>

<t>Order objects are created in the “pending” state.  Once all of the
authorizations listed in the order object are in the “valid” state,
the order transitions to the “ready” state.  The order moves to the
“processing” state after the client submits a request to the order’s
“finalize” URL and the CA begins the issuance process for the
certificate.  Once the certificate is issued, the order enters the
“valid” state.  If an error occurs at any of these stages, the
order moves to the “invalid” state.  The order also moves to the
“invalid” state if it expires or one of its authorizations enters a
final state other than “valid” (“expired”, “revoked”, or “deactivated”).</t>

<figure title="State Transitions for Order Objects"><artwork><![CDATA[
 pending --------------+
    |                  |
    | All authz        |
    | "valid"          |
    V                  |
  ready ---------------+
    |                  |
    | Receive          |
    | finalize         |
    | request          |
    V                  |
processing ------------+
    |                  |
    | Certificate      | Error or
    | issued           | Authorization failure
    V                  V
  valid             invalid
]]></artwork></figure>

<t>Account objects are created in the “valid” state, since no further
action is required to create an account after a successful
newAccount request.  If the account is deactivated by the client  or
revoked by the server, it moves to the corresponding state.</t>

<figure title="State Transitions for Account Objects"><artwork><![CDATA[
                  valid
                    |
                    |
        +-----------+-----------+
 Client |                Server |
deactiv.|                revoke |
        V                       V
   deactivated               revoked
]]></artwork></figure>

<t>Note that some of these states may not ever appear in a “status”
field, depending on server behavior.  For example, a server that
issues synchronously will never show an order in the “processing”
state.  A server that deletes expired authorizations immediately
will never show an authorization in the “expired” state.</t>

</section>
</section>
<section anchor="getting-a-nonce" title="Getting a Nonce">

<t>Before sending a POST request to the server, an ACME client needs to have a
fresh anti-replay nonce to put in the “nonce” header of the JWS.  In most cases,
the client will have gotten a nonce from a previous request.  However, the
client might sometimes need to get a new nonce, e.g., on its first request to
the server or if an existing nonce is no longer valid.</t>

<t>To get a fresh nonce, the client sends a HEAD request to the new-nonce resource
on the server.  The server’s response MUST include a Replay-Nonce header field
containing a fresh nonce and SHOULD have status code 200 (OK).  The
server MUST also respond to GET requests for this resource, returning an empty
body (while still providing a Replay-Nonce header) with a status code of 204 (No Content).</t>

<figure><artwork><![CDATA[
HEAD /acme/new-nonce HTTP/1.1
Host: example.com

HTTP/1.1 200 OK
Replay-Nonce: oFvnlFP1wIhRlYS2jTaXbA
Cache-Control: no-store
]]></artwork></figure>

<t>Proxy caching of responses from the new-nonce resource can cause
clients to receive the same nonce repeatedly, leading to badNonce errors.
The server MUST include a Cache-Control header field with the “no-store”
directive in responses for the new-nonce resource, in order to prevent
caching of this resource.</t>

</section>
<section anchor="account-management" title="Account Management">

<t>In this section, we describe how an ACME client can create an
account on an ACME server and perform some modifications to the
account after it has been created.</t>

<t>A client creates a new account with the server by sending a POST request to the
server’s new-account URL.  The body of the request is a stub account object
containing some subset of the following fields:</t>

<t><list style="hanging">
  <t hangText='contact (optional, array of string):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='onlyReturnExisting (optional, boolean):'>
  If this field is present with the value “true”, then the server MUST NOT
create a new account if one does not already exist.  This allows a client to
look up an account URL based on an account key (see
<xref target="finding-an-account-url-given-a-key"/>).</t>
  <t hangText='externalAccountBinding (optional, object):'>
  An optional field for binding the new account with an existing non-ACME
account (see <xref target=" external-account-binding "/>).</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": {...},
    "nonce": "6S8IqOGY7eL2lsGoTZYifg",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "termsOfServiceAgreed": true,
    "contact": [
      "mailto:cert-admin@example.com",
      "mailto:admin@example.com"
    ]
  }),
  "signature": "RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I"
}
]]></artwork></figure>

<t>The server MUST ignore any values provided in the “orders”
fields in account bodies sent by the client, as well as any other fields
that it does not recognize.  If new fields are specified in the future, the
specification of those fields MUST describe whether they can be provided by the
client.</t>

<t>In general, the server MUST ignore any fields in the request object that it does
not recognize.  In particular, it MUST NOT reflect unrecognized fields in the
resulting account object.  This allows clients to detect when servers do not
support an extension field.</t>

<t>The server SHOULD validate that the contact URLs in the “contact” field are
valid and supported by the server. If the server validates contact URLs, it MUST
support the “mailto” scheme.  Clients MUST NOT provide a “mailto” URL in the
“contact” field that contains <spanx style="verb">hfields</spanx> <xref target="RFC6068"/> or more than one
<spanx style="verb">addr-spec</spanx> in the <spanx style="verb">to</spanx> component.  If a server encounters a “mailto” contact
URL that does not meet these criteria, then it SHOULD reject it as invalid.</t>

<t>If the server rejects a contact URL for using an
unsupported scheme, it MUST return an error of type “unsupportedContact”, with
a description of the error and what types of contact URLs the server
considers acceptable. If the server rejects a contact URL for using a supported
scheme but an invalid value, then the server MUST return an error of type
“invalidContact”.</t>

<t>If the server wishes to require the client to agree to terms under which the ACME
service is to be used, it MUST indicate the URL where such terms can be accessed
in the “termsOfService” subfield of the “meta” field in the directory object,
and the server MUST reject new-account requests that do not have the
“termsOfServiceAgreed” field set to “true”.  Clients SHOULD NOT automatically agree
to terms by default.  Rather, they SHOULD require some user interaction for
agreement to terms.</t>

<t>The server creates an account and stores the public key used to verify the
JWS (i.e., the “jwk” element of the JWS header) to authenticate future requests
from the account.  The server returns this account object in a 201 (Created)
response, with the account URL in a Location header field. The account URL is
used as the “kid” value in the JWS authenticating subsequent requests by this
account (see <xref target="request-authentication"/>).  The account URL is also used for
requests for management actions on this account, as described below.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Replay-Nonce: D8s4D2mLs8Vn-goWuPQeKA
Location: https://example.com/acme/acct/evOfKhNU60wg
Link: <https://example.com/acme/some-directory>;rel="index"

{
  "status": "valid",

  "contact": [
    "mailto:cert-admin@example.com",
    "mailto:admin@example.com"
  ],

  "orders": "https://example.com/acme/acct/evOfKhNU60wg/orders"
}
]]></artwork></figure>

<section anchor="finding-an-account-url-given-a-key" title="Finding an Account URL Given a Key">

<t>If the server receives a newAccount request signed with a key for which it already has an account registered with the provided account key,
then it MUST return a response with status code 200 (OK) and provide the URL of
that account in the Location header field.  The body of this response represents the account object as it existed on the server before this request; any fields in the request object MUST be ignored.  This allows a client that has
an account key but not the corresponding account URL to recover the account URL.</t>

<t>If a client wishes to find the URL for an existing account and does not want an
account to be created if one does not already exist, then it SHOULD do so by
sending a POST request to the new-account URL with a JWS whose payload has an
“onlyReturnExisting” field set to “true” ({“onlyReturnExisting”: true}).
If a client sends such a request and an account does not exist, then the server
MUST return an error response with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:accountDoesNotExist”.</t>

</section>
<section anchor="account-update" title="Account Update">

<t>If the client wishes to update this information in the future, it sends a POST
request with updated information to the account URL.  The server MUST ignore any
updates to the “orders” field, “termsOfServiceAgreed” field (see <xref target="changes-of-terms-of-service"/>), the “status” field (except as allowed by <xref target="account-deactivation"/>), or any other fields it does not recognize. If the server
accepts the update, it MUST return a response with a 200 (OK) status code and the
resulting account object.</t>

<t>For example, to update the contact information in the above account, the client
could send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ax5RnthDqp_Yf4_HZnFLmA",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "contact": [
      "mailto:certificates@example.com",
      "mailto:admin@example.com"
    ]
  }),
  "signature": "hDXzvcj8T6fbFbmn...rDzXzzvzpRy64N0o"
}
]]></artwork></figure>

</section>
<section anchor="changes-of-terms-of-service" title="Changes of Terms of Service">

<t>As described above, a client can indicate its agreement with the CA’s terms of
service by setting the “termsOfServiceAgreed” field in its account object to
“true”.</t>

<t>If the server has changed its terms of service since a client initially agreed,
and the server is unwilling to process a request without explicit agreement to
the new terms, then it MUST return an error response with status code 403
(Forbidden) and type “urn:ietf:params:acme:error:userActionRequired”.  This
response MUST include a Link header field with link relation “terms-of-service” and
the latest terms-of-service URL.</t>

<t>The problem document returned with the error MUST also include an “instance”
field, indicating a URL that the client should direct a human user to visit in
order for instructions on how to agree to the terms.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Replay-Nonce: T81bdZroZ2ITWSondpTmAw
Link: <https://example.com/acme/terms/2017-6-02>;rel="terms-of-service"
Content-Type: application/problem+json
Content-Language: en

{
  "type": "urn:ietf:params:acme:error:userActionRequired",
  "detail": "Terms of service have changed",
  "instance": "https://example.com/acme/agreement/?token=W8Ih3PswD-8"
}
]]></artwork></figure>

</section>
<section anchor="external-account-binding" title="External Account Binding">

<t>The server MAY require a value for the “externalAccountBinding” field to be
present in “newAccount” requests.  This can be used to associate an ACME account with an
existing account in a non-ACME system, such as a CA customer database.</t>

<t>To enable ACME account binding, the CA operating the ACME server needs to provide the ACME client with a
MAC key and a key identifier, using some mechanism outside of ACME. The key
identifier MUST be an ASCII string. The MAC key SHOULD be provided in
base64url-encoded form, to maximize compatibility between non-ACME provisioning systems
and ACME clients.</t>

<t>The ACME client then computes a binding JWS to indicate the external account holder’s
approval of the ACME account key.  The payload of this JWS is the ACME account key
being registered, in JWK form.  The protected header of the JWS MUST meet the
following criteria:</t>

<t><list style="symbols">
  <t>The “alg” field MUST indicate a MAC-based algorithm</t>
  <t>The “kid” field MUST contain the key identifier provided by the CA</t>
  <t>The “nonce” field MUST NOT be present</t>
  <t>The “url” field MUST be set to the same value as the outer JWS</t>
</list></t>

<t>The “signature” field of the JWS will contain the MAC value computed with the
MAC key provided by the CA.</t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": /* account key */,
    "nonce": "K60BWPrMQG9SDxBDS_xtSw",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "contact": ["mailto:example@anonymous.invalid"],
    "termsOfServiceAgreed": true,

    "externalAccountBinding": {
      "protected": base64url({
        "alg": "HS256",
        "kid": /* key identifier from CA */,
        "url": "https://example.com/acme/new-account"
      }),
      "payload": base64url(/* same as in "jwk" above */),
      "signature": /* MAC using MAC key from CA */
    }
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>If such a CA requires that new-account requests contain an “externalAccountBinding”
field, then it MUST provide the value “true” in the “externalAccountRequired” subfield
of the “meta” field in the directory object.  If the CA receives a
new-account request without an “externalAccountBinding” field, then it SHOULD
reply with an error of type “externalAccountRequired”.</t>

<t>When a CA receives a new-account request containing an
“externalAccountBinding” field, it decides whether or not to verify the
binding.  If the CA does not verify the binding, then it MUST NOT reflect the
“externalAccountBinding” field in the resulting account object (if any).  To
verify the account binding, the CA MUST take the following steps:</t>

<t><list style="numbers">
  <t>Verify that the value of the field is a well-formed JWS</t>
  <t>Verify that the JWS protected field meets the above criteria</t>
  <t>Retrieve the MAC key corresponding to the key identifier in the “kid” field</t>
  <t>Verify that the MAC on the JWS verifies using that MAC key</t>
  <t>Verify that the payload of the JWS represents the same key as was used to
verify the outer JWS (i.e., the “jwk” field of the outer JWS)</t>
</list></t>

<t>If all of these checks pass and the CA creates a new account, then the CA may
consider the new account associated with the external account corresponding to
the MAC key.  The account object the CA returns MUST include an
“externalAccountBinding” field with the same value as the field in
the request.  If any of these checks fail, then the CA MUST
reject the new-account request.</t>

</section>
<section anchor="account-key-roll-over" title="Account Key Rollover">

<t>A client may wish to change the public key that is associated with an account in
order to recover from a key compromise or proactively mitigate the impact of an
unnoticed key compromise.</t>

<t>To change the key associated with an account, the client sends a
request to the server containing signatures by both the old and new
keys.  The signature by the new key covers the account URL and the
old key, signifying a request by the new key holder to take over the
account from the old key holder.  The signature by the old key
covers this request and its signature, and indicates the old key
holder’s assent to the rollover request.</t>

<t>To create this request object, the client first constructs a
key-change object describing the account to be updated and its
account key:</t>

<t><list style="hanging">
  <t hangText='account (required, string):'>
  The URL for the account being modified.  The content of this field MUST be the
exact string provided in the Location header field in response to the
new-account request that created the account.</t>
  <t hangText='oldKey (required, JWK):'>
  The JWK representation of the old key.</t>
</list></t>

<t>The client then encapsulates the key-change object in an “inner” JWS, signed with the
requested new account key.
This “inner” JWS becomes the payload for the “outer” JWS that is the body of the ACME
request.</t>

<t>The outer JWS MUST meet the normal requirements for an ACME JWS (see
<xref target="request-authentication"/>).  The inner JWS MUST meet the normal requirements,
with the following differences:</t>

<t><list style="symbols">
  <t>The inner JWS MUST have a “jwk” header parameter, containing the public key of
the new key pair.</t>
  <t>The inner JWS MUST have the same “url” header parameter as the outer JWS.</t>
  <t>The inner JWS MUST omit the “nonce” header parameter.</t>
</list></t>

<t>This transaction has signatures from both the old and new keys so that the
server can verify that the holders of the two keys both agree to the change.
The signatures are nested to preserve the property that all signatures on POST
messages are signed by exactly one key.  The “inner” JWS effectively
represents a request by the holder of the new key to take over the
account form the holder of the old key.  The “outer” JWS represents
the current account holder’s assent to this request.</t>

<figure><artwork><![CDATA[
POST /acme/key-change HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "S9XaOcxP5McpnTcWPIhYuB",
    "url": "https://example.com/acme/key-change"
  }),
  "payload": base64url({
    "protected": base64url({
      "alg": "ES256",
      "jwk": /* new key */,
      "url": "https://example.com/acme/key-change"
    }),
    "payload": base64url({
      "account": "https://example.com/acme/acct/evOfKhNU60wg",
      "oldKey": /* old key */
    }),
    "signature": "Xe8B94RD30Azj2ea...8BmZIRtcSKPSd8gU"
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>On receiving key-change request, the server MUST perform the following steps in
addition to the typical JWS validation:</t>

<t><list style="numbers">
  <t>Validate the POST request belongs to a currently active account, as described
in <xref target="message-transport"/>.</t>
  <t>Check that the payload of the JWS is a well-formed JWS object (the “inner
JWS”).</t>
  <t>Check that the JWS protected header of the inner JWS has a “jwk” field.</t>
  <t>Check that the inner JWS verifies using the key in its “jwk” field.</t>
  <t>Check that the payload of the inner JWS is a well-formed key-change object
(as described above).</t>
  <t>Check that the “url” parameters of the inner and outer JWSs are the same.</t>
  <t>Check that the “account” field of the key-change object contains the URL for
the account matching the old key (i.e., the “kid” field in the
outer JWS).</t>
  <t>Check that the “oldKey” field of the key-change object is the
same as the account key for the account in question.</t>
  <t>Check that no account exists whose account key is the same as the key in the
“jwk” header parameter of the inner JWS.</t>
</list></t>

<t>If all of these checks pass, then the server updates the corresponding account
by replacing the old account key with the new public key and returns status
code 200 (OK). Otherwise, the server responds with an error status code and a
problem document describing the error.  If there is an existing account with
the new key provided, then the server SHOULD use status code 409 (Conflict) and
provide the URL of that account in the Location header field.</t>

<t>Note that changing the account key for an account SHOULD NOT have any other
impact on the account.  For example, the server MUST NOT invalidate pending
orders or authorization transactions based on a change of account key.</t>

</section>
<section anchor="account-deactivation" title="Account Deactivation">

<t>A client can deactivate an account by posting a signed update to the account URL with
a status field of “deactivated”.  Clients may wish to do this when the account
key is compromised or decommissioned. A deactivated account can no longer request
certificate issuance or access resources related to the account, such as orders
or authorizations.  If a server receives a POST or POST-as-GET from
a deactivated account, it MUST return an error response with status
code 401 (Unauthorized) and type “urn:ietf:params:acme:error:unauthorized”.</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ntuJWWSic4WVNSqeUmshgg",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "earzVLd3m5M4xJzR...bVTqn7R08AKOVf3Y"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key. If the
server accepts the deactivation request, it replies with a 200 (OK) status code
and the current contents of the account object.</t>

<t>Once an account is deactivated, the server MUST NOT accept further requests
authorized by that account’s key. The server SHOULD cancel any pending operations authorized
by the account’s key, such as certificate orders. A server may take a variety of actions in
response to an account deactivation, e.g., deleting data related to that account
or sending mail to the account’s contacts.  Servers SHOULD NOT revoke
certificates issued by the deactivated account, since this could cause
operational disruption for servers using these certificates. ACME does not
provide a way to reactivate a deactivated account.</t>

</section>
</section>
<section anchor="applying-for-certificate-issuance" title="Applying for Certificate Issuance">

<t>The client begins the certificate issuance process by sending a POST request to the server’s
new-order resource.  The body of the POST is a JWS object whose JSON payload is
a subset of the order object defined in <xref target="order-objects"/>, containing the fields
that describe the certificate to be issued:</t>

<t><list style="hanging">
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the client wishes to submit an order for.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-order HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "5XJ1L3lEkMG7tR6pA00clA",
    "url": "https://example.com/acme/new-order"
  }),
  "payload": base64url({
    "identifiers": [
      { "type": "dns", "value": "example.com" }
    ],
    "notBefore": "2016-01-01T00:04:00+04:00",
    "notAfter": "2016-01-08T00:04:00+04:00"
  }),
  "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g"
}
]]></artwork></figure>

<t>The server MUST return an error if it cannot fulfill the request as specified,
and it MUST NOT issue a certificate with contents other than those requested.  If
the server requires the request to be modified in a certain way, it should
indicate the required changes using an appropriate error type and description.</t>

<t>If the server is willing to issue the requested certificate, it responds with a
201 (Created) response.  The body of this response is an order object reflecting
the client’s request and any authorizations the client must complete before the
certificate will be issued.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Replay-Nonce: MYAuvOpaoIiywTezizk5vw
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "pending",
  "expires": "2016-01-01T00:00:00Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize"
}
]]></artwork></figure>

<t>The order object returned by the server represents a promise that if the
client fulfills the server’s requirements before the “expires” time, then the
server will be willing to finalize the order upon request and issue the
requested certificate.  In the order object, any authorization referenced in the
“authorizations” array whose status is “pending” represents an authorization
transaction that the client must complete before the server will issue the
certificate (see <xref target="identifier-authorization"/>).  If the client fails to complete
the required actions before the “expires” time, then the server SHOULD change
the status of the order to “invalid” and MAY delete the order resource. Clients
MUST NOT make any assumptions about the sort order of “identifiers” or
“authorizations” elements in the returned order object.</t>

<t>Once the client believes it has fulfilled the server’s requirements, it should
send a POST request to the order resource’s finalize URL. The POST body MUST
include a CSR:</t>

<t><list style="hanging">
  <t hangText='csr (required, string):'>
  A CSR encoding the parameters for the certificate being requested <xref target="RFC2986"/>.
The CSR is sent in the base64url-encoded version of the DER format.  (Note:
Because this field uses base64url, and does not include headers, it is different
from PEM.)</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/order/TOlocE8rfgo/finalize HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "MSF2j2nawWHPxxkE3ZJtKQ",
    "url": "https://example.com/acme/order/TOlocE8rfgo/finalize"
  }),
  "payload": base64url({
    "csr": "MIIBPTCBxAIBADBFMQ...FS6aKdZeGsysoCo4H9P",
  }),
  "signature": "uOrUfIIk5RyQ...nw62Ay1cl6AB"
}
]]></artwork></figure>

<t>The CSR encodes the client’s requests with regard to the content of the
certificate to be issued.  The CSR MUST indicate the exact same set of requested
identifiers as the initial new-order request.  Identifiers of type “dns” MUST appear either in the commonName portion
of the requested subject name or in an extensionRequest attribute <xref target="RFC2985"/>
requesting a subjectAltName extension, or both.  (These identifiers may appear
in any sort order.)  Specifications that define
new identifier types must specify where in the certificate signing
request these
identifiers can appear.</t>

<t>A request to finalize an order will result in an error if the CA is unwilling to issue a certificate corresponding to the submitted CSR.  For example:</t>

<t><list style="symbols">
  <t>If the order indicated does not have status “ready”</t>
  <t>If the CSR and order identifiers differ</t>
  <t>If the account is not authorized for the identifiers indicated in the CSR</t>
  <t>If the CSR requests extensions that the CA is not willing to include</t>
</list></t>

<t>In such cases, the problem document returned by the server SHOULD
use error code “badCSR” and describe specific reasons the CSR was
rejected in its “detail” field.  After returning such an error, the
server SHOULD leave the order in the “ready” state, to allow the
client to submit a new finalize request with an amended CSR.</t>

<t>A request to finalize an order will return the order to be finalized.
The client should begin polling the order by sending a POST-as-GET request to the order
resource to obtain its current state. The status of the order will indicate what
action the client should take:</t>

<t><list style="symbols">
  <t>“invalid”: The certificate will not be issued.  Consider this order process
abandoned.</t>
  <t>“pending”: The server does not believe that the client has fulfilled the
requirements.  Check the “authorizations” array for entries that are still
pending.</t>
  <t>“ready”: The server agrees that the requirements have been
fulfilled, and is awaiting finalization.  Submit a finalization
request.</t>
  <t>“processing”: The certificate is being issued. Send a POST-as-GET request after the
time given in the “Retry-After” header field of the response, if
any.</t>
  <t>“valid”: The server has issued the certificate and provisioned its URL to the
“certificate” field of the order.  Download the certificate.</t>
</list></t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: CGf81JWBsq8QyIgPCi9Q9X
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "valid",
  "expires": "2015-12-31T00:17:00.00-09:00",

  "notBefore": "2015-12-31T00:17:00.00-09:00",
  "notAfter": "2015-12-31T00:17:00.00-09:00",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
    { "type": "dns", "value": "www.example.com" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<section anchor="pre-authorization" title="Pre-authorization">

<t>The order process described above presumes that authorization objects are
created reactively, in response to a certificate order.  Some servers
may also wish to enable clients to obtain authorization for an identifier
proactively, outside of the context of a specific issuance.  For example, a
client hosting virtual servers for a collection of names might wish to obtain
authorization before any virtual servers are created and only create a certificate when
a virtual server starts up.</t>

<t>In some cases, a CA running an ACME server might have a completely external,
non-ACME process for authorizing a client to issue certificates for an identifier.  In these
cases, the CA should provision its ACME server with authorization objects
corresponding to these authorizations and reflect them as already valid in any
orders submitted by the client.</t>

<t>If a CA wishes to allow pre-authorization within ACME, it can offer a “new
authorization” resource in its directory by adding the field “newAuthz” with a
URL for the new authorization resource.</t>

<t>To request authorization for an identifier, the client sends a POST request to
the new-authorization resource specifying the identifier for which authorization
is being requested.</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier to appear in the resulting authorization object
(see <xref target="authorization-objects"/>).

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-authz HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/new-authz"
  }),
  "payload": base64url({
    "identifier": {
      "type": "dns",
      "value": "example.net"
    }
  }),
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}
]]></artwork></figure>

<t>Note that because the identifier in a pre-authorization request is
the exact identifier to be included in the authorization object,
pre-authorization cannot be used to authorize issuance with wildcard
DNS identifiers.</t>

<t>Before processing the authorization request, the server SHOULD determine whether
it is willing to issue certificates for the identifier.  For example, the server
should check that the identifier is of a supported type.  Servers might also
check names against a blacklist of known high-value identifiers.  If the server
is unwilling to issue for the identifier, it SHOULD return an error
with status code 403 (Forbidden), with a problem document describing
the reason for the rejection.</t>

<t>If the server is willing to proceed, it builds a pending authorization object
from the inputs submitted by the client:</t>

<t><list style="symbols">
  <t>“identifier” the identifier submitted by the client</t>
  <t>“status” MUST be “pending” unless the server has out-of-band information
about the client’s authorization status</t>
  <t>“challenges” as selected by the server’s policy for this identifier</t>
</list></t>

<t>The server allocates a new URL for this authorization and returns a 201
(Created) response with the authorization URL in the Location header field and
the JSON authorization object in the body.  The client then follows the process
described in <xref target="identifier-authorization"/> to complete the authorization process.</t>

</section>
<section anchor="downloading-the-certificate" title="Downloading the Certificate">

<t>To download the issued certificate, the client simply sends a POST-as-GET request to the
certificate URL.</t>

<t>The default format of the certificate is application/pem-certificate-chain (see <xref target="iana-considerations"/>).</t>

<t>The server MAY provide one or more link relation header fields <xref target="RFC5988"/> with
relation “alternate”. Each such field SHOULD express an alternative certificate
chain starting with the same end-entity certificate. This can be used to express
paths to various trust anchors. Clients can fetch these alternates and use their
own heuristics to decide which is optimal.</t>

<figure><artwork><![CDATA[
POST /acme/cert/mAt3xBGaobw HTTP/1.1
Host: example.com
Content-Type: application/jose+json
Accept: application/pem-certificate-chain

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/cert/mAt3xBGaobw"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/pem-certificate-chain
Link: <https://example.com/acme/some-directory>;rel="index"

-----BEGIN CERTIFICATE-----
[End-entity certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Issuer certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Other certificate contents]
-----END CERTIFICATE-----
]]></artwork></figure>

<t>A certificate resource represents a single, immutable certificate. If the client
wishes to obtain a renewed certificate, the client initiates a new order process
to request one.</t>

<t>Because certificate resources are immutable once issuance is complete, the
server MAY enable the caching of the resource by adding Expires and
Cache-Control header fields specifying a point in time in the distant future. These
header fields have no relation to the certificate’s period of validity.</t>

<t>The ACME client MAY request other formats by including an Accept
header field <xref target="RFC7231"/> in its request.  For example, the client could use the media type
<spanx style="verb">application/pkix-cert</spanx> <xref target="RFC2585"/> or <spanx style="verb">application/pkcs7-mime</spanx> <xref target="RFC5751"/> to request the end-entity certificate
in DER format. Server support for alternate formats is OPTIONAL. For
formats that can only express a single certificate, the server SHOULD
provide one or more <spanx style="verb">Link: rel="up"</spanx> header fields pointing to an issuer or
issuers so that ACME clients can build a certificate chain as defined
in TLS (see Section 4.4.2 of <xref target="RFC8446"/>).</t>

</section>
</section>
<section anchor="identifier-authorization" title="Identifier Authorization">

<t>The identifier authorization process establishes the authorization of an account
to manage certificates for a given identifier.  This process assures the
server of two things:</t>

<t><list style="numbers">
  <t>That the client controls the private key of the account key pair, and</t>
  <t>That the client controls the identifier in question.</t>
</list></t>

<t>This process may be repeated to associate multiple identifiers to a key pair
(e.g., to request certificates with multiple identifiers) or to associate
multiple accounts with an identifier (e.g., to allow multiple entities to manage
certificates).</t>

<t>Authorization resources are created by the server in response to certificate
orders or authorization requests submitted by an account key holder; their
URLs are provided to the client in the responses to these requests.  The
authorization object is implicitly tied to the account key used to sign the
request.</t>

<t>When a client receives an order from the server in reply to a new order request, it downloads the authorization
resources by sending POST-as-GET requests to the indicated URLs.  If the client
initiates authorization using a request to the new authorization resource, it
will have already received the pending authorization object in the response
to that request.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/1234"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/some-directory>;rel="index"

{
  "status": "pending",
  "expires": "2018-03-03T14:09:30Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    },
    {
      "type": "dns-01",
      "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

<section anchor="responding-to-challenges" title="Responding to Challenges">

<t>To prove control of the identifier and receive authorization, the client needs to
provision the required challenge response based on the challenge type and
indicate to the server that it is ready for the challenge validation to
be attempted.</t>

<t>The client indicates to the server that it is ready for the challenge validation by
sending an empty JSON body (<spanx style="verb">{}</spanx>) carried in a POST request to the challenge
URL (not the authorization URL).</t>

<t>For example, if the client were to respond to the “http-01” challenge in the
above authorization, it would send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4 HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "Q_s3MWoqT05TrdkM2MTDcw",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "9cbg5JO1Gf5YLjjz...SpkUfcdPai9uVYYQ"
}
]]></artwork></figure>

<t>The server updates the authorization document by updating its representation of
the challenge with the response object provided by the client.  The server MUST
ignore any fields in the response object that are not specified as response
fields for this type of challenge.  The server provides a 200 (OK) response
with the updated challenge object as its body.</t>

<t>If the client’s response is invalid for any reason or does not provide the
server with appropriate information to validate the challenge, then the server
MUST return an HTTP error.  On receiving such an error, the client SHOULD undo
any actions that have been taken to fulfill the challenge, e.g., removing files
that have been provisioned to a web server.</t>

<t>The server is said to “finalize” the authorization when it has completed
one of the validations.  This is done by assigning the authorization a status of “valid”
or “invalid”, corresponding to whether it considers the account authorized
for the identifier. If the final state is “valid”, then the server MUST include
an “expires” field. When finalizing an authorization, the server MAY remove
challenges other than the one that was completed, and it may modify the “expires”
field. The server SHOULD NOT remove challenges with status “invalid”.</t>

<t>Usually, the validation process will take some time, so the client will need to
poll the authorization resource to see when it is finalized.  For challenges
where the client can tell when the server has validated the challenge (e.g., by
seeing an HTTP or DNS request from the server), the client SHOULD NOT begin
polling until it has seen the validation request from the server.</t>

<t>To check on the status of an authorization, the client sends a POST-as-GET request to
the authorization URL, and the server responds with the current authorization
object. In responding to poll requests while the validation is still in
progress, the server MUST return a 200 (OK) response and MAY include a
Retry-After header field to suggest a polling interval to the client.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json

{
  "status": "valid",
  "expires": "2018-09-09T14:09:01.13Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "status": "valid",
      "validated": "2014-12-01T12:05:13.72Z",
      "token": "IlirfxKKXAsHtmzK29Pj8A"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="deactivating-an-authorization" title="Deactivating an Authorization">

<t>If a client wishes to relinquish its authorization to issue certificates for an
identifier, then it may request that the server deactivate each authorization
associated with it by sending POST requests with the static object
{“status”: “deactivated”} to each authorization URL.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "xWCM9lGbIyCgue8di6ueWQ",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "srX9Ji7Le9bjszhu...WTFdtujObzMtZcx4"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key
corresponding to the account that owns the authorization. If the server accepts
the deactivation, it should reply with a 200 (OK) status code and the updated
contents of the authorization object.</t>

<t>The server MUST NOT treat deactivated authorization objects as sufficient for
issuing certificates.</t>

</section>
</section>
<section anchor="certificate-revocation" title="Certificate Revocation">

<t>To request that a certificate be revoked, the client sends a POST request to
the ACME server’s revokeCert URL.  The body of the POST is a JWS object whose
JSON payload contains the certificate to be revoked:</t>

<t><list style="hanging">
  <t hangText='certificate (required, string):'>
  The certificate to be revoked, in the base64url-encoded version of the DER
format.  (Note: Because this field uses base64url, and does not include headers,
it is different from PEM.)</t>
  <t hangText='reason (optional, int):'>
  One of the revocation reasonCodes defined in Section 5.3.1 of <xref target="RFC5280"/>
to be used when generating OCSP responses and CRLs. If this field is not set,
the server SHOULD omit the reasonCode CRL entry extension when generating OCSP
responses and CRLs. The server MAY disallow a subset of reasonCodes from being
used by the user. If a request contains a disallowed reasonCode, then the server MUST
reject it with the error type “urn:ietf:params:acme:error:badRevocationReason”.
The problem document detail SHOULD indicate which reasonCodes are allowed.</t>
</list></t>

<t>Revocation requests are different from other ACME requests in that they can be
signed with either an account key pair or the key pair in the certificate.</t>

<t>Example using an account key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 4
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Example using the certificate key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "RS256",
    "jwk": /* certificate's public key */,
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 1
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Before revoking a certificate, the server MUST verify that the key used to sign
the request is authorized to revoke the certificate.  The server MUST consider
at least the following accounts authorized for a given certificate:</t>

<t><list style="symbols">
  <t>the account that issued the certificate.</t>
  <t>an account that holds authorizations for all of the identifiers in the
certificate.</t>
</list></t>

<t>The server MUST also consider a revocation request valid if it is signed with
the private key corresponding to the public key in the certificate.</t>

<t>If the revocation succeeds, the server responds with status code 200 (OK).  If
the revocation fails, the server returns an error.  For example, if the certificate
has already been revoked, the server returns an error response with status code 400
(Bad Request) and type “urn:ietf:params:acme:error:alreadyRevoked”.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Length: 0

--- or ---

HTTP/1.1 403 Forbidden
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Type: application/problem+json
Content-Language: en

{
  "type": "urn:ietf:params:acme:error:unauthorized",
  "detail": "No authorization provided for name example.net"
}
]]></artwork></figure>

</section>
</section>
<section anchor="identifier-validation-challenges" title="Identifier Validation Challenges">

<t>There are few types of identifiers in the world for which there is a standardized
mechanism to prove possession of a given identifier.  In all practical cases,
CAs rely on a variety of means to test whether an entity applying for a
certificate with a given identifier actually controls that identifier.</t>

<t>Challenges provide the server with assurance that an account holder is also
the entity that controls an identifier.  For each type of challenge, it must be
the case that, in order for an entity to successfully complete the challenge, the
entity must both:</t>

<t><list style="symbols">
  <t>Hold the private key of the account key pair used to respond to the challenge, and</t>
  <t>Control the identifier in question.</t>
</list></t>

<t><xref target="security-considerations"/> documents how the challenges defined in this
document meet these requirements.  New challenges will need to document how they
do.</t>

<t>ACME uses an extensible challenge/response framework for identifier validation.
The server presents a set of challenges in the authorization object it sends to a
client (as objects in the “challenges” array), and the client responds by
sending a response object in a POST request to a challenge URL.</t>

<t>This section describes an initial set of challenge types.  The definition of a
challenge type includes:</t>

<t><list style="numbers">
  <t>Content of challenge objects</t>
  <t>Content of response objects</t>
  <t>How the server uses the challenge and response to verify control of an
identifier</t>
</list></t>

<t>Challenge objects all contain the following basic fields:</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The type of challenge encoded in the object.</t>
  <t hangText='url (required, string):'>
  The URL to which a response can be posted.</t>
  <t hangText='status (required, string):'>
  The status of this challenge.  Possible values are “pending”,
“processing”, “valid”, and “invalid” (see <xref target="status-changes"/>).</t>
  <t hangText='validated (optional, string):'>
  The time at which the server validated this challenge, encoded in the
format specified in <xref target="RFC3339"/>.  This field is REQUIRED if the
“status” field is “valid”.</t>
  <t hangText='error (optional, object):'>
  Error that occurred while the server was validating the challenge, if any,
structured as a problem document <xref target="RFC7807"/>. Multiple errors can be indicated
by using subproblems <xref target="subproblems"/>. A challenge object with an error MUST have
status equal to “invalid”.</t>
</list></t>

<t>All additional fields are specified by the challenge type.  If the server sets a
challenge’s “status” to “invalid”, it SHOULD also include the “error” field to
help the client diagnose why the challenge failed.</t>

<t>Different challenges allow the server to obtain proof of different aspects of
control over an identifier.  In some challenges, like HTTP and DNS, the
client directly proves its ability to do certain things related to the
identifier.  The choice of which challenges to offer to a client under which
circumstances is a matter of server policy.</t>

<t>The identifier validation challenges described in this section all relate to
validation of domain names.  If ACME is extended in the future to support other
types of identifiers, there will need to be new challenge types, and they will
need to specify which types of identifier they apply to.</t>

<section anchor="key-authorizations" title="Key Authorizations">

<t>All challenges defined in this document make use of a key authorization
string.  A key authorization is a string that concatenates the token for the
challenge with a key fingerprint, separated by a “.” character:</t>

<figure><artwork><![CDATA[
keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))
]]></artwork></figure>

<t>The “Thumbprint” step indicates the computation specified in <xref target="RFC7638"/>,
using the SHA-256 digest <xref target="FIPS180-4"></xref>.  As noted in <xref target="RFC7518"/> any prepended
zero octets in the fields of a JWK object MUST be stripped before doing the computation.</t>

<t>As specified in the individual challenges below, the token for a challenge is a
string comprised entirely of characters in the URL-safe base64 alphabet.
The “||” operator indicates concatenation of strings.</t>

</section>
<section anchor="retrying-challenges" title="Retrying Challenges">

<t>ACME challenges typically require the client to set up some network-accessible
resource that the server can query in order to validate that the client
controls an identifier.  In practice, it is not uncommon for the server’s
queries to fail while a resource is being set up, e.g., due to information
propagating across a cluster or firewall rules not being in place.</t>

<t>Clients SHOULD NOT respond to challenges until they believe that the server’s
queries will succeed. If a server’s initial validation query fails, the server
SHOULD retry the query after some time, in order to account for delay in setting
up responses such as DNS records or HTTP resources. The precise retry schedule
is up to the server, but server operators should keep in mind the operational
scenarios that the schedule is trying to accommodate.  Given that retries are
intended to address things like propagation delays in HTTP or DNS provisioning,
there should not usually be any reason to retry more often than every 5 or 10
seconds. While the server is still trying, the
status of the challenge remains “processing”; it is only marked “invalid” once the
server has given up.</t>

<t>The server MUST provide information about its retry state to the client via the
“error” field in the challenge and the Retry-After HTTP header field in
response to requests to the challenge resource. The server MUST add an entry to
the “error” field in the challenge after each failed validation query. The
server SHOULD set the Retry-After header field to a time after the server’s
next validation query, since the status of the challenge will not change until
that time.</t>

<t>Clients can explicitly request a retry by resending their response to a
challenge in a new POST request (with a new nonce, etc.). This allows clients
to request a retry when the state has changed (e.g., after firewall rules have been
updated). Servers SHOULD retry a request immediately on receiving such a POST
request. In order to avoid denial-of-service attacks via client-initiated
retries, servers SHOULD rate-limit such requests.</t>

</section>
<section anchor="http-challenge" title="HTTP Challenge">

<t>With HTTP validation, the client in an ACME transaction proves its control over
a domain name by proving that it can provision HTTP resources on a server
accessible under that domain name.
The ACME server challenges the client to
provision a file at a specific path, with a specific string as its content.</t>

<t>As a domain may resolve to multiple IPv4 and IPv6 addresses, the server will
connect to at least one of the hosts found in the DNS A and AAAA records, at its
discretion.  Because many web servers allocate a default HTTPS virtual host to a
particular low-privilege tenant user in a subtle and non-intuitive manner, the
challenge must be completed over HTTP, not HTTPS.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “http-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy.
It MUST NOT contain any characters outside the base64url alphabet and MUST NOT
include base64 padding characters (“=”).  See <xref target="RFC4086"/> for additional information
on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "http-01",
  "url": "https://example.com/acme/chall/prV_B7yEyA4",
  "status": "pending",
  "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from
the “token” value provided in the challenge and the client’s account key.  The
client then provisions the key authorization as a resource on the HTTP server
for the domain in question.</t>

<t>The path at which the resource is provisioned is comprised of the fixed prefix
“/.well-known/acme-challenge/”, followed by the “token” value in the challenge.
The value of the resource MUST be the ASCII representation of the key
authorization.</t>

<figure><artwork><![CDATA[
GET /.well-known/acme-challenge/LoqXcYV8...jxAjEuX0
Host: example.org

HTTP/1.1 200 OK
Content-Type: application/octet-stream

LoqXcYV8...jxAjEuX0.9jg46WB3...fm21mqTI
]]></artwork></figure>

<t>(In the above, “…” indicates that the token and the JWK
thumbprint in the key authorization have been truncated to fit on
the page.)</t>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>Given a challenge/response pair, the server verifies the client’s control of the
domain by verifying that the resource was provisioned as expected.</t>

<t><list style="numbers">
  <t>Construct a URL by populating the URL template <xref target="RFC6570"/>
“http://{domain}/.well-known/acme-challenge/{token}”, where:
  <list style="symbols">
      <t>the domain field is set to the domain name being verified; and</t>
      <t>the token field is set to the token in the challenge.</t>
    </list></t>
  <t>Verify that the resulting URL is well-formed.</t>
  <t>Dereference the URL using an HTTP GET request.  This request MUST be sent to
TCP port 80 on the HTTP server.</t>
  <t>Verify that the body of the response is a well-formed key authorization.  The
server SHOULD ignore whitespace characters at the end of the body.</t>
  <t>Verify that key authorization provided by the HTTP server matches the key
authorization stored by the server.</t>
</list></t>

<t>The server SHOULD follow redirects when dereferencing the URL.
Clients might use redirects, for example, so that the response can
be provided by a centralized certificate management server.  See
<xref target="integrity-of-authorizations"/> for security considerations related
to redirects.</t>

<t>If all of the above verifications succeed, then the validation is successful.
If the request fails, or the body does not pass these checks, then it has
failed.</t>

<t>The client SHOULD de-provision the resource provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

<t>Note that because the token appears both in the request sent by the
ACME server and in the key authorization in the response, it is
possible to build clients that copy the token from request to
response.  Clients should avoid this behavior because it can lead
to cross-site scripting vulnerabilities; instead, clients should be
explicitly configured on a per-challenge basis. A client that does
copy tokens from requests to responses MUST validate that the token
in the request matches the token syntax above (e.g., that it
includes only characters from the base64url alphabet).</t>

</section>
<section anchor="dns-challenge" title="DNS Challenge">

<t>When the identifier being validated is a domain name, the client can prove
control of that domain by provisioning a TXT resource record containing a designated
value for a specific validation domain name.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “dns-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy. It MUST NOT contain any characters outside the
base64url alphabet, including padding characters (“=”). See <xref target="RFC4086"/> for
additional information on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "dns-01",
  "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
  "status": "pending",
  "token": "evaGxfADs6pSRb2LAv9IZf17Dt3juxGJ-PCt92wr-oA"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from the
“token” value provided in the challenge and the client’s account key.  The
client then computes the SHA-256 digest <xref target="FIPS180-4"></xref> of the key authorization.</t>

<t>The record provisioned to the DNS contains the base64url encoding of this digest.  The
client constructs the validation domain name by prepending the label
“_acme-challenge” to the domain name being validated, then provisions a TXT
record with the digest value under that name. For example, if the domain name
being validated is “example.org”, then the client would provision the following
DNS record:</t>

<figure><artwork><![CDATA[
_acme-challenge.example.org. 300 IN TXT "gfj9Xq...Rg85nM"
]]></artwork></figure>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/Rg5dV14Gh1Q
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "SS2sSl1PtspvFZ08kNtzKd",
    "url": "https://example.com/acme/chall/Rg5dV14Gh1Q"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>To validate a DNS challenge, the server performs the following steps:</t>

<t><list style="numbers">
  <t>Compute the SHA-256 digest <xref target="FIPS180-4"></xref> of the stored key authorization</t>
  <t>Query for TXT records for the validation domain name</t>
  <t>Verify that the contents of one of the TXT records match the digest value</t>
</list></t>

<t>If all of the above verifications succeed, then the validation is successful.
If no DNS record is found, or DNS record and response payload do not pass these
checks, then the validation fails.</t>

<t>The client SHOULD de-provision the resource record(s) provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-applicationpem-certificate-chain" title="Media Type: application/pem-certificate-chain">

<t>A file of this type contains one or more certificates encoded with
the PEM textual encoding, according to <xref target="RFC7468"/>.  The
textual encoding of certificates in this file MUST use the strict
encoding and MUST NOT include explanatory text.  The ABNF for this
format is as follows, where <spanx style="verb">stricttextualmsg</spanx> and <spanx style="verb">eol</spanx> are as
defined in Section 3 of RFC 7468:</t>

<figure><artwork><![CDATA[
certchain = stricttextualmsg *(eol stricttextualmsg)
]]></artwork></figure>

<t>In order to provide easy interoperation with TLS, the first
certificate MUST be an end-entity certificate. Each following certificate
SHOULD directly certify the one preceding it. Because certificate validation
requires that trust anchors be distributed independently, a certificate
that represents a trust anchor MAY be omitted from the chain, provided
that supported peers are known to possess any omitted certificates.</t>

<t>The following has been registered in the “Media Types” registry:</t>

<t>Type name: application</t>

<t>Subtype name: pem-certificate-chain</t>

<t>Required parameters: None</t>

<t>Optional parameters: None</t>

<t>Encoding considerations: 7bit</t>

<t>Security considerations: Carries a cryptographic certificate and its associated certificate chain.  This media type carries no active content.</t>

<t>Interoperability considerations: None</t>

<t>Published specification: RFC 8555</t>

<t>Applications that use this media type: ACME clients and servers, HTTP servers, other applications that need to be configured with a certificate chain</t>

<t>Additional information:</t>

<t>Deprecated alias names for this type: n/a
  Magic number(s): n/a
  File extension(s): .pem
  Macintosh file type code(s): n/a</t>

<t>Person &amp; email address to contact for further information: See Authors’ Addresses section.</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: n/a</t>

<t>Author: See Authors’ Addresses section.</t>

<t>Change controller: IETF &lt;iesg@ietf.org&gt;</t>

</section>
<section anchor="well-known-uri-for-the-http-challenge" title="Well-Known URI for the HTTP Challenge">

<t>The following value has been registered in the “Well-Known URIs” registry
(using the template from <xref target="RFC5785" />):</t>

<t>URI suffix: acme-challenge</t>

<t>Change controller: IETF</t>

<t>Specification document(s): RFC 8555, <xref target="http-challenge"/></t>

<t>Related information: N/A</t>

</section>
<section anchor="replay-nonce-http-header" title="Replay-Nonce HTTP Header">

<t>The following value has been registered in the “Message Headers”
registry:</t>

<texttable>
      <ttcol align='left'>Header Field Name</ttcol>
      <ttcol align='left'>Protocol</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Replay-Nonce</c>
      <c>http</c>
      <c>standard</c>
      <c>RFC 8555, <xref target="replay-nonce"/></c>
</texttable>

</section>
<section anchor="url-jws-header-parameter" title="&quot;url&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “url”</t>
  <t>Header Parameter Description: URL</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="url-url-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="nonce-jws-header-parameter" title="&quot;nonce&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “nonce”</t>
  <t>Header Parameter Description: Nonce</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="nonce-nonce-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="acme-urn-space" title="URN Sub-namespace for ACME (urn:ietf:params:acme)">

<t>The following value has been registered in the “IETF URN Sub-namespace for
Registered Protocol Parameter Identifiers” registry, following the
template in <xref target="RFC3553"/>:</t>

<t><list style="hanging">
  <t hangText='Registry name:'>
  acme</t>
  <t hangText='Specification:'>
  RFC 8555</t>
  <t hangText='Repository:'>
  http://www.iana.org/assignments/acme</t>
  <t hangText='Index value:'>
  No transformation needed.</t>
</list></t>

</section>
<section anchor="new-registries" title="New Registries">

<t>IANA has created the following registries:</t>

<t><list style="numbers">
  <t>ACME Account Object Fields (<xref target="iana-account"/>)</t>
  <t>ACME Order Object Fields (<xref target="iana-order"/>)</t>
  <t>ACME Authorization Object Fields (<xref target="iana-authz"/>)</t>
  <t>ACME Error Types (<xref target="iana-error"/>)</t>
  <t>ACME Resource Types (<xref target="iana-resource"/>)</t>
  <t>ACME Directory Metadata Fields (<xref target="iana-meta"/>)</t>
  <t>ACME Identifier Types (<xref target="iana-identifier"/>)</t>
  <t>ACME Validation Methods (<xref target="iana-validation"/>)</t>
</list></t>

<t>All of these registries are under a heading of “Automated Certificate Management
Environment (ACME) Protocol” and are administered under a Specification
Required policy <xref target="RFC8126"/>.</t>

<section anchor="iana-account" title="Fields in Account Objects">

<t>The “ACME Account Object Fields” registry lists field names that are defined
for use in ACME account objects.  Fields marked as “configurable” may be included in a
new-account request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Requests: Either the value “none” or a list of types of requests
where the field is allowed in a request object, taken from the
following values:
  <list style="symbols">
      <t>“new” - Requests to the “newAccount” URL</t>
      <t>“account” - Requests to an account URL</t>
    </list></t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="account-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Requests</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>contact</c>
      <c>array of string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>externalAccountBinding</c>
      <c>object</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>termsOfServiceAgreed</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>orders</c>
      <c>string</c>
      <c>none</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-order" title="Fields in Order Objects">

<t>The “ACME Order Object Fields” registry lists field names that are defined
for use in ACME order objects.  Fields marked as “configurable” may be included in a
new-order request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Client configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="order-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>identifiers</c>
      <c>array of object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notBefore</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notAfter</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>error</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>authorizations</c>
      <c>array of string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>finalize</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>certificate</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-authz" title="Fields in Authorization Objects">

<t>The “ACME Authorization Object Fields” registry lists field names that are 
defined for use in ACME authorization objects.  Fields marked as
“configurable” may be included in a new-authorization request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Client configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="authorization-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>identifier</c>
      <c>object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>challenges</c>
      <c>array of object</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>wildcard</c>
      <c>boolean</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-error" title="Error Types">

<t>The “ACME Error Types” registry lists values that are used within URN
values that are provided in the “type” field of problem documents in ACME.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Type: The label to be included in the URN for this error, following
“urn:ietf:params:acme:error:”</t>
  <t>Description: A human-readable description of the error</t>
  <t>Reference: Where the error is defined</t>
</list></t>

<t>Initial contents: The types and descriptions in the table in <xref target="errors"/> above,
with the Reference field set to point to this specification.</t>

</section>
<section anchor="iana-resource" title="Resource Types">

<t>The “ACME Resource Types” registry lists the types of resources that ACME
servers may list in their directory objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The value to be used as a field name in the directory object</t>
  <t>Resource type: The type of resource labeled by the field</t>
  <t>Reference: Where the resource type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Resource Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>RFC 8555</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>RFC 8555</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>RFC 8555</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>RFC 8555</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>RFC 8555</c>
      <c>keyChange</c>
      <c>Key change</c>
      <c>RFC 8555</c>
      <c>meta</c>
      <c>Metadata object</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-meta" title="Fields in the &quot;meta&quot; Object within a Directory Object">

<t>The “ACME Directory Metadata Fields” registry lists field names that are
defined for use in the JSON object included in the “meta” field of an ACME 
directory object.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="directory"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>termsOfService</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>website</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>caaIdentities</c>
      <c>array of string</c>
      <c>RFC 8555</c>
      <c>externalAccountRequired</c>
      <c>boolean</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-identifier" title="Identifier Types">

<t>The “ACME Identifier Types” registry lists the types of identifiers that
can be present in ACME authorization objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The value to be put in the “type” field of the identifier object</t>
  <t>Reference: Where the identifier type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>dns</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-validation" title="Validation Methods">

<t>The “ACME Validation Methods” registry lists identifiers for the ways that
CAs can validate control of identifiers.  Each method’s entry must specify
whether it corresponds to an ACME challenge type.  The “Identifier Type” field
must be contained in the Label column of the “ACME Identifier Types” registry.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The identifier for this validation method</t>
  <t>Identifier Type: The type of identifier that this method applies to</t>
  <t>ACME: “Y” if the validation method corresponds to an ACME challenge type;
“N” otherwise</t>
  <t>Reference: Where the validation method is defined</t>
</list></t>

<t>This registry may also contain reserved entries (e.g., to avoid
collisions).  Such entries should have the “ACME” field set to “N”
and the “Identifier Type” set to “RESERVED”.</t>

<t>Initial Contents</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Identifier Type</ttcol>
      <ttcol align='left'>ACME</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>http-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>dns-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>tls-sni-01</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
      <c>tls-sni-02</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
</texttable>

<t>When evaluating a request for an assignment in this registry, the designated
expert should ensure that the method being registered has a clear,
interoperable definition and does not overlap with existing validation methods.
That is, it should not be possible for a client and server to follow the
same set of actions to fulfill two different validation methods.</t>

<t>The values “tls-sni-01” and “tls-sni-02” are reserved because they
were used in pre-RFC versions of this specification to denote
validation methods that were removed because they were found not to be secure in some cases.</t>

<t>Validation methods do not have to be compatible with ACME in order to be
registered.  For example, a CA might wish to register a validation method
to support its use with the ACME extensions to CAA
<xref target="I-D.ietf-acme-caa"/>.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>ACME is a protocol for managing certificates that attest to identifier/key
bindings.  Thus, the foremost security goal of ACME is to ensure the integrity of
this process, i.e., to ensure that the bindings attested by certificates are
correct and that only authorized entities can manage certificates.  ACME
identifies clients by their account keys, so this overall goal breaks down into
two more precise goals:</t>

<t><list style="numbers">
  <t>Only an entity that controls an identifier can get an authorization for that
identifier</t>
  <t>Once authorized, an account key’s authorizations cannot be improperly
used by another account</t>
</list></t>

<t>In this section, we discuss the threat model that underlies ACME and the ways
that ACME achieves these security goals within that threat model.  We also
discuss the denial-of-service risks that ACME servers face, and a few other
miscellaneous considerations.</t>

<section anchor="threat-model" title="Threat Model">

<t>As a service on the Internet, ACME broadly exists within the Internet threat
model <xref target="RFC3552"/>.  In analyzing ACME, it is useful to think of an ACME server
interacting with other Internet hosts along two “channels”:</t>

<t><list style="symbols">
  <t>An ACME channel, over which the ACME HTTPS requests are exchanged</t>
  <t>A validation channel, over which the ACME server performs additional requests
to validate a client’s control of an identifier</t>
</list></t>

<figure title="Communications Channels Used by ACME"><artwork><![CDATA[
+------------+
|    ACME    |     ACME Channel
|   Client   |--------------------+
+------------+                    |
                                  V
                            +------------+
                            |    ACME    |
                            |   Server   |
                            +------------+
+------------+                    |
| Validation |<-------------------+
|   Server   |  Validation Channel
+------------+
]]></artwork></figure>

<t>In practice, the risks to these channels are not entirely separate, but they are
different in most cases.  Each channel, for example, uses a
different communications pattern: the ACME channel will comprise inbound HTTPS
connections to the ACME server and the validation channel outbound HTTP or DNS
requests.</t>

<t>Broadly speaking, ACME aims to be secure against active and passive attackers on
any individual channel.  Some vulnerabilities arise (noted below) when an
attacker can exploit both the ACME channel and one of the others.</t>

<t>On the ACME channel, in addition to network-layer attackers, we also need to
account for man-in-the-middle (MitM) attacks at the application layer and for
abusive use of the protocol itself.  Protection against application-layer MitM
addresses potential attackers such as Content Distribution Networks (CDNs) and
middleboxes with a TLS MitM function.  Preventing abusive use of ACME means
ensuring that an attacker with access to the validation channel can’t obtain
illegitimate authorization by acting as an ACME client (legitimately, in terms
of the protocol).</t>

<t>ACME does not protect against other types of abuse by a MitM on the ACME channel.
For example, such an attacker could send a bogus “badSignatureAlgorithm”
error response to downgrade a client to the lowest-quality signature algorithm that
the server supports.  A MitM that is present on all connections (such as a 
CDN) can cause denial-of-service conditions in a variety of ways.</t>

</section>
<section anchor="integrity-of-authorizations" title="Integrity of Authorizations">

<t>ACME allows anyone to request challenges for an identifier by registering an
account key and sending a new-order request using that account key.  The
integrity of the authorization process thus depends on the identifier validation
challenges to ensure that the challenge can only be completed by someone who
both (1) holds the private key of the account key pair and (2) controls the
identifier in question.</t>

<t>Validation responses need to be bound to an account key pair in order to avoid
situations where a MitM on ACME HTTPS requests can switch out a legitimate domain holder’s
account key for one of his choosing.  Such MitMs can arise, for
example, if a CA uses a CDN or third-party reverse proxy in front of
its ACME interface.  An attack by such an MitM could have the
following form:</t>

<t><list style="numbers">
  <t>Legitimate domain holder registers account key pair A</t>
  <t>MitM registers account key pair B</t>
  <t>Legitimate domain holder sends a new-order request signed using account key A</t>
  <t>MitM suppresses the legitimate request but sends the same request signed
using account key B</t>
  <t>ACME server issues challenges and MitM forwards them to the legitimate domain
holder</t>
  <t>Legitimate domain holder provisions the validation response</t>
  <t>ACME server performs validation query and sees the response provisioned by the
legitimate domain holder</t>
  <t>Because the challenges were issued in response to a message signed with account key
B, the ACME server grants authorization to account key B (the MitM) instead of
account key A (the legitimate domain holder)</t>
</list></t>

<figure title="Man-in-the-Middle Attack Exploiting a Validation Method without
Account Key Binding"><artwork><![CDATA[
Domain                                         ACME
Holder                  MitM                  Server
  |                      |                      |
  | newAccount(A)        |                      |
  |--------------------->|--------------------->|
  |                      |                      |
  |                      | newAccount(B)        |
  |                      |--------------------->|
  | newOrder(domain, A)  |                      | 
  |--------------------->|                      |
  |                      | newOrder(domain, B)  | 
  |                      |--------------------->|
  |                      |                      |
  |   authz, challenges  |   authz, challenges  |
  |<---------------------|<---------------------|
  |                      |                      |
  | response(chall, A)   | response(chall, B)   |
  |--------------------->|--------------------->|
  |                      |                      |
  |  validation request  |                      |
  |<--------------------------------------------|
  |                      |                      |
  | validation response  |                      |
  |-------------------------------------------->|
  |                      |                      |
  |                      |                      | Considers challenge
  |                      |                      | fulfilled by B
  |                      |                      |
]]></artwork></figure>

<t>All of the challenges defined in this document have a binding between the account private key and
the validation query made by the server, via the key authorization. The key
authorization reflects the account public key and is provided to the server in
the validation response over the validation channel.</t>

<t>The association of challenges to identifiers is typically done by requiring the
client to perform some action that only someone who effectively controls the
identifier can perform.  For the challenges in this document, the actions are as follows:</t>

<t><list style="symbols">
  <t>HTTP: Provision files under .well-known on a web server for the domain</t>
  <t>DNS: Provision DNS resource records for the domain</t>
</list></t>

<t>There are several ways that these assumptions can be violated, both by
misconfiguration and by attacks.  For example, on a web server that allows
non-administrative users to write to .well-known, any user can claim to own the
web server’s hostname by responding to an HTTP challenge.  Similarly, if
a server that can be used for ACME
validation is compromised by a malicious actor, then that malicious actor can
use that access to obtain certificates via ACME.</t>

<t>The use of hosting providers is a particular risk for ACME validation.  If the
owner of the domain has outsourced operation of DNS or web services to a hosting
provider, there is nothing that can be done against tampering by the hosting
provider.  As far as the outside world is concerned, the zone or website
provided by the hosting provider is the real thing.</t>

<t>More limited forms of delegation can also lead to an unintended party gaining
the ability to successfully complete a validation transaction.  For example,
suppose an ACME server follows HTTP redirects in HTTP validation and a
website operator provisions a catch-all redirect rule that redirects requests
for unknown resources to a different domain.  Then the target of the redirect
could use that to get a certificate through HTTP validation since the
validation path will not be known to the primary server.</t>

<t>The DNS is a common point of vulnerability for all of these challenges.  An
entity that can provision false DNS records for a domain can attack the DNS
challenge directly and can provision false A/AAAA records to direct the ACME
server to send its HTTP validation query to a remote server of the attacker’s
choosing.  There are a few different mitigations that ACME servers
can apply:</t>

<t><list style="symbols">
  <t>Always querying the DNS using a DNSSEC-validating resolver (enhancing
security for zones that are DNSSEC-enabled)</t>
  <t>Querying the DNS from multiple vantage points to address local attackers</t>
  <t>Applying mitigations against DNS off-path attackers, e.g., adding entropy to
requests <xref target="I-D.vixie-dnsext-dns0x20"/> or only using TCP</t>
</list></t>

<t>Given these considerations, the ACME validation process makes it impossible for
any attacker on the ACME channel or a passive attacker on the validation
channel to hijack the authorization process to authorize a key of the attacker’s
choice.</t>

<t>An attacker that can only see the ACME channel would need to convince the
validation server to provide a response that would authorize the attacker’s
account key, but this is prevented by binding the validation response to the
account key used to request challenges.  A passive attacker on the validation
channel can observe the correct validation response and even replay it, but that
response can only be used with the account key for which it was generated.</t>

<t>An active attacker on the validation channel can subvert the ACME process, by
performing normal ACME transactions and providing a validation response for his
own account key.  The risks due to hosting providers noted above are a
particular case.</t>

<t>Attackers can also exploit vulnerabilities in Internet routing
protocols to gain access to the validation channel (see, e.g.,
<xref target="RFC7132"/>).  In order to make such attacks more difficult, it is
RECOMMENDED that the server perform DNS queries and make HTTP
connections from multiple points in the network.  Since routing
attacks are often localized or dependent on the position of the
attacker, forcing the attacker to attack multiple points (the
server’s validation vantage points) or a specific point (the DNS / HTTP server) makes it more difficult to subvert ACME validation
using attacks on routing.</t>

</section>
<section anchor="denial-of-service-considerations" title="Denial-of-Service Considerations">

<t>As a protocol run over HTTPS, standard considerations for TCP-based and
HTTP-based DoS mitigation also apply to ACME.</t>

<t>At the application layer, ACME requires the server to perform a few potentially
expensive operations.  Identifier validation transactions require the ACME
server to make outbound connections to potentially attacker-controlled servers,
and certificate issuance can require interactions with cryptographic hardware.</t>

<t>In addition, an attacker can also cause the ACME server to send validation
requests to a domain of its choosing by submitting authorization requests for
the victim domain.</t>

<t>All of these attacks can be mitigated by the application of appropriate rate
limits.  Issues closer to the front end, like POST body validation, can be
addressed using HTTP request limiting.  For validation and certificate requests,
there are other identifiers on which rate limits can be keyed.  For example, the
server might limit the rate at which any individual account key can issue
certificates or the rate at which validation can be requested within a given
subtree of the DNS.  And in order to prevent attackers from circumventing these
limits simply by minting new accounts, servers would need to limit the rate at
which accounts can be registered.</t>

</section>
<section anchor="server-side-request-forgery" title="Server-Side Request Forgery">

<t>Server-Side Request Forgery (SSRF) attacks can arise when an attacker can cause
a server to perform HTTP requests to an attacker-chosen URL.  In the ACME HTTP
challenge validation process, the ACME server performs an HTTP GET request to a
URL in which the attacker can choose the domain.  This request is made before
the server has verified that the client controls the domain, so any client can
cause a query to any domain.</t>

<t>Some ACME server implementations include information from the validation server’s
response (in order to facilitate debugging).  Such implementations enable an
attacker to extract this information from any web server that is accessible to
the ACME server, even if it is not accessible to the ACME client.
For example, the ACME server might be able to access servers behind
a firewall that would prevent access by the ACME client.</t>

<t>It might seem that the risk of SSRF through this channel is limited by the fact
that the attacker can only control the domain of the URL, not the path.
However, if the attacker first sets the domain to one they control, then they
can send the server an HTTP redirect (e.g., a 302 response) which will cause the
server to query an arbitrary URL.</t>

<t>In order to further limit the SSRF risk, ACME server operators should ensure
that validation queries can only be sent to servers on the public Internet, and
not, say, web services within the server operator’s internal network.  Since the
attacker could make requests to these public servers himself, he can’t gain
anything extra through an SSRF attack on ACME aside from a layer of
anonymization.</t>

</section>
<section anchor="ca-policy-considerations" title="CA Policy Considerations">

<t>The controls on issuance enabled by ACME are focused on validating that a
certificate applicant controls the identifier he claims.  Before issuing a
certificate, however, there are many other checks that a CA might need to
perform, for example:</t>

<t><list style="symbols">
  <t>Has the client agreed to a subscriber agreement?</t>
  <t>Is the claimed identifier syntactically valid?</t>
  <t>For domain names:
  <list style="symbols">
      <t>If the leftmost label is a ‘*’, then have the appropriate checks been
applied?</t>
      <t>Is the name on the Public Suffix List?</t>
      <t>Is the name a high-value name?</t>
      <t>Is the name a known phishing domain?</t>
    </list></t>
  <t>Is the key in the CSR sufficiently strong?</t>
  <t>Is the CSR signed with an acceptable algorithm?</t>
  <t>Has issuance been authorized or forbidden by a Certificate Authority
Authorization (CAA) record (<xref target="RFC6844"/>)?</t>
</list></t>

<t>CAs that use ACME to automate issuance will need to ensure that their servers
perform all necessary checks before issuing.</t>

<t>CAs using ACME to allow clients to agree to terms of service should keep in mind
that ACME clients can automate this agreement, possibly not involving a human
user.</t>

<t>ACME does not specify how the server constructs the URLs that it
uses to address resources.  If the server operator uses URLs that
are predictable to third parties, this can leak information about
what URLs exist on the server, since an attacker can probe for
whether a POST-as-GET request to the URL returns 404 (Not Found) or
401 (Unauthorized).</t>

<t>For example, suppose that the CA uses highly structured URLs with
guessable fields:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/:accountID</t>
  <t>Orders: https://example.com/:accountID/:domainName</t>
  <t>Authorizations: https://example.com/:accountID/:domainName</t>
  <t>Certificates: https://example.com/:accountID/:domainName</t>
</list></t>

<t>Under that scheme, an attacker could probe for which domain names are
associated with which accounts, which may allow correlation of ownership
between domain names, if the CA does not otherwise permit it.</t>

<t>To avoid leaking these correlations, CAs SHOULD assign URLs with an
unpredictable component.
For example, a CA might assign URLs for each resource type from an
independent namespace, using unpredictable IDs for each resource:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/acct/:accountID</t>
  <t>Orders: https://example.com/order/:orderID</t>
  <t>Authorizations: https://example.com/authz/:authorizationID</t>
  <t>Certificates: https://example.com/cert/:certID</t>
</list></t>

<t>Such a scheme would leak only the type of resource, hiding the
additional correlations revealed in the example above.</t>

</section>
</section>
<section anchor="operational-considerations" title="Operational Considerations">

<t>There are certain factors that arise in operational reality that operators of
ACME-based CAs will need to keep in mind when configuring their services.
See the subsections below for examples.</t>

<section anchor="key-selection" title="Key Selection">

<t>ACME relies on two different classes of key pair:</t>

<t><list style="symbols">
  <t>Account key pairs, which are used to authenticate account holders</t>
  <t>Certificate key pairs, which are used to sign and verify CSRs (and whose
public keys are included in certificates)</t>
</list></t>

<t>Compromise of the private key of an account key pair has more serious consequences than
compromise of a private key corresponding to a certificate.  While
the compromise of a certificate key pair allows the attacker to impersonate the
entities named in the certificate for the lifetime of the certificate, the
compromise of an account key pair allows the attacker to take full control of
the victim’s ACME account and take any action that the legitimate
account holder could take within the scope of ACME:</t>

<t><list style="numbers">
  <t>Issuing certificates using existing authorizations</t>
  <t>Revoking existing certificates</t>
  <t>Accessing and changing account information (e.g., contacts)</t>
  <t>Changing the account key pair for the account, locking out the
legitimate account holder</t>
</list></t>

<t>For this reason, it is RECOMMENDED that each account key pair be
used only for authentication of a single ACME account.  For example,
the public key of an account key pair MUST NOT be included in a
certificate.  If an ACME client receives a request from a user for
account creation or key rollover using an account key that the
client knows to be used elsewhere, then the client MUST return an
error.  Clients MUST generate a fresh account key for every account
creation or rollover operation.  Note that given the requirements of
<xref target="finding-an-account-url-given-a-key"/>, servers will not create
accounts with reused keys anyway.</t>

<t>ACME clients and servers MUST verify that a CSR submitted in a finalize request does not contain a
public key for any known account key pair.  In particular, when a server
receives a finalize request, it MUST verify that the public key in a CSR is not
the same as the public key of the account key pair used to authenticate that
request.  This assures that vulnerabilities in the protocols with which the
certificate is used (e.g., signing oracles in TLS <xref target="JSS15"></xref>) do not result in 
compromise of the ACME account. Because ACME accounts are uniquely identified by
their account key pair (see <xref target="finding-an-account-url-given-a-key"/>), the server
MUST not allow account key pair reuse across multiple accounts.</t>

</section>
<section anchor="dns-security" title="DNS Security">

<t>As noted above, DNS forgery attacks against the ACME server can result in the
server making incorrect decisions about domain control and thus mis-issuing
certificates. Servers SHOULD perform DNS queries over TCP, which provides better
resistance to some forgery attacks than DNS over UDP.</t>

<t>An ACME-based CA will often need to make DNS queries, e.g., to validate control
of DNS names.  Because the security of such validations ultimately depends on
the authenticity of DNS data, every possible precaution should be taken to
secure DNS queries done by the CA. Therefore, it is RECOMMENDED that ACME-based
CAs make all DNS queries via DNSSEC-validating stub or recursive resolvers. This
provides additional protection to domains that choose to make use of DNSSEC.</t>

<t>An ACME-based CA must only use a resolver if it trusts the resolver and every
component of the network route by which it is accessed. Therefore, it is
RECOMMENDED that ACME-based CAs operate their own DNSSEC-validating resolvers
within their trusted network and use these resolvers both for CAA record
lookups and all record lookups in furtherance of a challenge scheme (A, AAAA,
TXT, etc.).</t>

</section>
<section anchor="token-entropy" title="Token Entropy">

<t>The http-01 and dns-01 validation methods mandate the use of
a random token value to uniquely identify the challenge. The value of the token
is required to contain at least 128 bits of entropy for the following security
properties. First, the ACME client should not be able to influence the ACME
server’s choice of token as this may allow an attacker to reuse a domain owner’s
previous challenge responses for a new validation request. Second, the entropy
requirement makes it more difficult for ACME clients to implement a “naive”
validation server that automatically replies to challenges without being 
configured per challenge.</t>

</section>
<section anchor="malformed-certificate-chains" title="Malformed Certificate Chains">

<t>ACME provides certificate chains in the widely used format known colloquially
as PEM (though it may diverge from the actual Privacy Enhanced Mail
specification <xref target="RFC1421"/>, as noted in <xref target="RFC7468"/>). Some current software
will allow the configuration of a private key and a certificate in one PEM
file by concatenating the textual encodings of the two objects. In the context
of ACME, such software might be vulnerable to key replacement attacks. A
malicious ACME server could cause a client to use a private key of its choosing
by including the key in the PEM file returned in response to a query for a
certificate URL.</t>

<t>When processing a file of type “application/pem-certificate-chain”, a client
SHOULD verify that the file contains only encoded certificates.  If anything
other than a certificate is found (i.e., if the string “-----BEGIN” is ever
followed by anything other than “CERTIFICATE”), then the client MUST reject the
file as invalid.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>In addition to the editors listed on the front page, this document has benefited
from contributions from a broad set of contributors, all the way back to its
inception.</t>

<t><list style="symbols">
  <t>Andrew Ayer, SSLMate</t>
  <t>Karthik Bhargavan, INRIA</t>
  <t>Peter Eckersley, EFF</t>
  <t>Alex Halderman, University of Michigan</t>
  <t>Sophie Herold, Hemio</t>
  <t>Eric Rescorla, Mozilla</t>
  <t>Seth Schoen, EFF</t>
  <t>Martin Thomson, Mozilla</t>
  <t>Jakub Warmuz, University of Oxford</t>
</list></t>

<t>This document draws on many concepts established by Eric Rescorla’s “Automated
Certificate Issuance Protocol” draft.  Martin Thomson provided helpful guidance
in the use of HTTP.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="FIPS180-4" target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
  <front>
    <title>NIST FIPS 180-4, Secure Hash Standard</title>
    <author initials="National Institute of Standards and Technology, U.S." surname="Department of Commerce" fullname="NIST">
      <organization></organization>
    </author>
    <date year="2012" month="March"/>
  </front>
</reference>
<reference anchor="JSS15" target="https://dl.acm.org/citation.cfm?id=2813657">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="J." surname="Somorovsky" fullname="Juraj Somorovsky">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
      <organization></organization>
    </author>
    <date year="2000"/>
  </front>
</reference>




<reference  anchor="RFC5280" target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor="RFC2986" target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC2818" target='https://www.rfc-editor.org/info/rfc2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2000' month='May' />
<abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2818'/>
<seriesInfo name='DOI' value='10.17487/RFC2818'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC3629" target='https://www.rfc-editor.org/info/rfc3629'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'><organization /></author>
<date year='2003' month='November' />
<abstract><t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract>
</front>
<seriesInfo name='STD' value='63'/>
<seriesInfo name='RFC' value='3629'/>
<seriesInfo name='DOI' value='10.17487/RFC3629'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7797" target='https://www.rfc-editor.org/info/rfc7797'>
<front>
<title>JSON Web Signature (JWS) Unencoded Payload Option</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2016' month='February' />
<abstract><t>JSON Web Signature (JWS) represents the payload of a JWS as a base64url-encoded value and uses this value in the JWS Signature computation.  While this enables arbitrary payloads to be integrity protected, some have described use cases in which the base64url encoding is unnecessary and/or an impediment to adoption, especially when the payload is large and/or detached.  This specification defines a means of accommodating these use cases by defining an option to change the JWS Signing Input computation to not base64url- encode the payload.  This option is intended to broaden the set of use cases for which the use of JWS is a good fit.</t><t>This specification updates RFC 7519 by stating that JSON Web Tokens (JWTs) MUST NOT use the unencoded payload option defined by this specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7797'/>
<seriesInfo name='DOI' value='10.17487/RFC7797'/>
</reference>



<reference  anchor="RFC7518" target='https://www.rfc-editor.org/info/rfc7518'>
<front>
<title>JSON Web Algorithms (JWA)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification registers cryptographic algorithms and identifiers to be used with the JSON Web Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK) specifications.  It defines several IANA registries for these identifiers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7518'/>
<seriesInfo name='DOI' value='10.17487/RFC7518'/>
</reference>



<reference  anchor="RFC8037" target='https://www.rfc-editor.org/info/rfc8037'>
<front>
<title>CFRG Elliptic Curve Diffie-Hellman (ECDH) and Signatures in JSON Object Signing and Encryption (JOSE)</title>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
<abstract><t>This document defines how to use the Diffie-Hellman algorithms &quot;X25519&quot; and &quot;X448&quot; as well as the signature algorithms &quot;Ed25519&quot; and &quot;Ed448&quot; from the IRTF CFRG elliptic curves work in JSON Object Signing and Encryption (JOSE).</t></abstract>
</front>
<seriesInfo name='RFC' value='8037'/>
<seriesInfo name='DOI' value='10.17487/RFC8037'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7807" target='https://www.rfc-editor.org/info/rfc7807'>
<front>
<title>Problem Details for HTTP APIs</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Wilde' fullname='E. Wilde'><organization /></author>
<date year='2016' month='March' />
<abstract><t>This document defines a &quot;problem detail&quot; as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.</t></abstract>
</front>
<seriesInfo name='RFC' value='7807'/>
<seriesInfo name='DOI' value='10.17487/RFC7807'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC6844" target='https://www.rfc-editor.org/info/rfc6844'>
<front>
<title>DNS Certification Authority Authorization (CAA) Resource Record</title>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<author initials='R.' surname='Stradling' fullname='R. Stradling'><organization /></author>
<date year='2013' month='January' />
<abstract><t>The Certification Authority Authorization (CAA) DNS Resource Record allows a DNS domain name holder to specify one or more Certification Authorities (CAs) authorized to issue certificates for that domain. CAA Resource Records allow a public Certification Authority to implement additional controls to reduce the risk of unintended certificate mis-issue.  This document defines the syntax of the CAA record and rules for processing CAA records by certificate issuers. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6844'/>
<seriesInfo name='DOI' value='10.17487/RFC6844'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC5890" target='https://www.rfc-editor.org/info/rfc5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<date year='2010' month='August' />
<abstract><t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5890'/>
<seriesInfo name='DOI' value='10.17487/RFC5890'/>
</reference>



<reference  anchor="RFC6068" target='https://www.rfc-editor.org/info/rfc6068'>
<front>
<title>The 'mailto' URI Scheme</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='J.' surname='Zawinski' fullname='J. Zawinski'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document defines the format of Uniform Resource Identifiers (URIs) to identify resources that are reached using Internet mail. It adds better internationalization and compatibility with Internationalized Resource Identifiers (IRIs; RFC 3987) to the previous syntax of 'mailto' URIs (RFC 2368).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6068'/>
<seriesInfo name='DOI' value='10.17487/RFC6068'/>
</reference>



<reference  anchor="RFC2985" target='https://www.rfc-editor.org/info/rfc2985'>
<front>
<title>PKCS #9: Selected Object Classes and Attribute Types Version 2.0</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #9 v2.0 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from that specification.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2985'/>
<seriesInfo name='DOI' value='10.17487/RFC2985'/>
</reference>



<reference  anchor="RFC2585" target='https://www.rfc-editor.org/info/rfc2585'>
<front>
<title>Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='1999' month='May' />
<abstract><t>The protocol conventions described in this document satisfy some of the operational requirements of the Internet Public Key Infrastructure (PKI).  This document specifies the conventions for using the File Transfer Protocol (FTP) and the Hypertext Transfer Protocol (HTTP) to obtain certificates and certificate revocation lists (CRLs) from PKI repositories.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2585'/>
<seriesInfo name='DOI' value='10.17487/RFC2585'/>
</reference>



<reference  anchor="RFC5751" target='https://www.rfc-editor.org/info/rfc5751'>
<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5751'/>
<seriesInfo name='DOI' value='10.17487/RFC5751'/>
</reference>



<reference  anchor="RFC8446" target='https://www.rfc-editor.org/info/rfc8446'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2018' month='August' />
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='8446'/>
<seriesInfo name='DOI' value='10.17487/RFC8446'/>
</reference>



<reference  anchor="RFC7638" target='https://www.rfc-editor.org/info/rfc7638'>
<front>
<title>JSON Web Key (JWK) Thumbprint</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t></abstract>
</front>
<seriesInfo name='RFC' value='7638'/>
<seriesInfo name='DOI' value='10.17487/RFC7638'/>
</reference>



<reference  anchor="RFC4086" target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7468" target='https://www.rfc-editor.org/info/rfc7468'>
<front>
<title>Textual Encodings of PKIX, PKCS, and CMS Structures</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='S.' surname='Leonard' fullname='S. Leonard'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document describes and discusses the textual encodings of the Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS).  The textual encodings are well-known, are implemented by several applications and libraries, and are widely deployed.  This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.</t></abstract>
</front>
<seriesInfo name='RFC' value='7468'/>
<seriesInfo name='DOI' value='10.17487/RFC7468'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CABFBR" target="https://cabforum.org/baseline-requirements-documents/">
  <front>
    <title>CA/Browser Forum Baseline Requirements</title>
    <author >
      <organization>CA/Browser Forum</organization>
    </author>
    <date year="2018" month="September"/>
  </front>
</reference>




<reference anchor="I-D.ietf-acme-ip">
<front>
<title>ACME IP Identifier Validation Extension</title>

<author initials='R' surname='Shoemaker' fullname='Roland Shoemaker'>
    <organization />
</author>

<date month='February' day='14' year='2019' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificates for IP addresses.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-ip-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-ip-05.txt' />
</reference>



<reference anchor="I-D.ietf-acme-telephone">
<front>
<title>ACME Identifiers and Challenges for Telephone Numbers</title>

<author initials='J' surname='Peterson' fullname='Jon Peterson'>
    <organization />
</author>

<author initials='R' surname='Barnes' fullname='Richard Barnes'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificate for telephonoe numbers.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-telephone-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-telephone-01.txt' />
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>



<reference  anchor="RFC3553" target='https://www.rfc-editor.org/info/rfc3553'>
<front>
<title>An IETF URN Sub-namespace for Registered Protocol Parameters</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<date year='2003' month='June' />
<abstract><t>This document describes a new sub-delegation for the 'ietf' URN namespace for registered protocol items.  The 'ietf' URN namespace is defined in RFC 2648 as a root for persistent URIs that refer to IETF- defined resources.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='73'/>
<seriesInfo name='RFC' value='3553'/>
<seriesInfo name='DOI' value='10.17487/RFC3553'/>
</reference>



<reference anchor="I-D.ietf-acme-caa">
<front>
<title>CAA Record Extensions for Account URI and ACME Method Binding</title>

<author initials='H' surname='Landau' fullname='Hugo Landau'>
    <organization />
</author>

<date month='January' day='15' year='2019' />

<abstract><t>The CAA DNS record allows a domain to communicate issuance policy to CAs, but only allows a domain to define policy with CA-level granularity.  However, the CAA specification also provides facilities for extension to admit more granular, CA-specific policy.  This specification defines two such parameters, one allowing specific accounts of a CA to be identified by URI and one allowing specific methods of domain control validation as defined by the ACME protocol to be required.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-caa-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-caa-06.txt' />
</reference>



<reference  anchor="RFC3552" target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
<abstract><t>All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>



<reference anchor="I-D.vixie-dnsext-dns0x20">
<front>
<title>Use of Bit 0x20 in DNS Labels to Improve Transaction Identity</title>

<author initials='P' surname='Vixie' fullname='Paul Vixie'>
    <organization />
</author>

<author initials='D' surname='Dagon' fullname='David Dagon'>
    <organization />
</author>

<date month='March' day='18' year='2008' />

<abstract><t>The small (16-bit) size of the DNS transaction ID has made it a frequent target for forgery, with the unhappy result of many cache pollution vulnerabilities demonstrated throughout Internet history. Even with perfectly and unpredictably random transaction ID's, random and birthday attacks are still theoretically feasible.  This document describes a method by which an initiator can improve transaction identity using the 0x20 bit in DNS labels.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-vixie-dnsext-dns0x20-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-vixie-dnsext-dns0x20-00.txt' />
</reference>



<reference  anchor="RFC7132" target='https://www.rfc-editor.org/info/rfc7132'>
<front>
<title>Threat Model for BGP Path Security</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<author initials='A.' surname='Chi' fullname='A. Chi'><organization /></author>
<date year='2014' month='February' />
<abstract><t>This document describes a threat model for the context in which External Border Gateway Protocol (EBGP) path security mechanisms will be developed.  The threat model includes an analysis of the Resource Public Key Infrastructure (RPKI) and focuses on the ability of an Autonomous System (AS) to verify the authenticity of the AS path info received in a BGP update.  We use the term &quot;PATHSEC&quot; to refer to any BGP path security technology that makes use of the RPKI.  PATHSEC will secure BGP, consistent with the inter-AS security focus of the RPKI.</t><t>The document characterizes classes of potential adversaries that are considered to be threats and examines classes of attacks that might be launched against PATHSEC.  It does not revisit attacks against unprotected BGP, as that topic has already been addressed in the BGP-4 standard.  It concludes with a brief discussion of residual vulnerabilities.</t></abstract>
</front>
<seriesInfo name='RFC' value='7132'/>
<seriesInfo name='DOI' value='10.17487/RFC7132'/>
</reference>



<reference  anchor="RFC1421" target='https://www.rfc-editor.org/info/rfc1421'>
<front>
<title>Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures</title>
<author initials='J.' surname='Linn' fullname='J. Linn'><organization /></author>
<date year='1993' month='February' />
<abstract><t>This document defines message encryption and authentication procedures, in order to provide privacy-enhanced mail (PEM) services for electronic mail transfer in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1421'/>
<seriesInfo name='DOI' value='10.17487/RFC1421'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIADRebFwAA+y9+3rbRrYv+H89BYb9fRMpLdKSLduyenfvpiXZVuJbJNlO
srunGyRBCTZJMAQomU58HmteYF5s1rVqFQBKcpI+e/rM0ZeLRAJ1r3Vfv9Xt
dl2VV5NsP+n0l1UxTat8mBxkiyof58O0ypIX6Sw9z6bZrEqOZpf5opjR7xv9
gxdHmx2XDgaL7HI/wT/dqBjO0im0NVqk46qbZ9W4mw6nGf9nAs2VlcNWz4vF
aj8pq5G7KhYfzhfFcs5NJO/g73x2njzFz1w+X+wn1WJZVne3tx9t33UjeHk/
ubu986gLf7mySmejf6STYgafrrLSzfP9xCVJVQz57yQpi0W1yMal/3s1tX8O
i+k8HVb+2+XAfzIrnPuQrWCEo/3kv4ZhTbaSZ2dnr0+3ktffHm8l3/fubz/6
u3PpsrooFvsu6UI7SZLPoI+TXvI4Xcyo6SThtTnJhxfpYmS/KBbn+8lBXg4L
+jObpvlkP1lMBn/N55e98mPU5je95FkxHk/TWbc/Gy2yK9v4N+mwGLR+T30c
PXlie3hfXqR/zcbjHnwZ9XHYS14MD3CAK9P4YTrLs0n8DTX7PKu+KuF4DBer
eWU7GM6Xf51kVZnxV41+YC7fpmWVzaIpTLPSfkxdvJnll9mizKtVUoyTF7CG
+Xk6iyYz+kDv/HU5hW972WjpXD4bFws805cZbExy0H/85PHJPr0lp/6gf+fx
orgqs0XypFgsp7AtZTbJZ1lykv20zBd08nkF/QYnYc9qb9N3/ozudbcfcV/p
4jyDE3VRVfNy/86dYToY4+O4HncG0mF3YTrswlVa0m933MxO4cnx69Odve3u
bjSLl8enZ/RVQt9tJafZcLnIkmdpeZGc4iWBE9cyCV5xfFs+oF15Cb0Vs3SS
HM9K6GAJVADWXJspE/h/cpYNL2bFpDhfbSVveqe95DCbp4uKaAM8fFBMp9li
mMULcre7fa+xILge5WLYm+Vl1TsvLu/Ml4MJ3jMYQ3lnnM/5PzQx+q1Lv/bm
ozG09c3p6c79aC1ezZLqIuMVkONy9hwWpnePBv7dm+ODpH+ewkyr5F2WfoBL
WMKBy2dwnQ9O/7CTXO707uthhjGsXbazfFAs4LieZwu7emdwP/1nbe998//8
34vz5HR4cZXNPtg34TbYT1vfXS7S98lpMS0WxWX5YVV/Pf6ifu5Gkx5QYjp1
w7yiFe4Nx9P/zEd/vru3c+/B/Yfw2snR6Vm0oP0FXLYqG1bQ9wSOwWqS8RnA
ZT7Myvx8hov8MquQmHfxPI9gJOPqKoUjaN7O2u6REMVilZxdAPspkydAY0bA
AuzUgI5GH+uJ2t5uO05XV1e9fFj2lsMcycCd/zGWd/FolXdGOWz4gqd/pyrm
vYtq6pzrdrtJOiirBRB/517TIUy+zVZwC8YLoCyLJc0hWZbIn4jqJxvAAb7f
TAxvgJWhZ2AJ4IonaTJbTgdAHmCB5svFvICjtuVw4aYFnD9cO3qRb83VBVCu
JC9pZXGZ4DbJTcCvR7A+cExxxcpeAuu1hLZC3/gUr21e5TCQjYN+uYnnGlt7
lw2QXdHoiKHCAKsiAZqaj1fwRFrBlibpfD6h0TgevJlYMsnOoV2gRNlklSyy
OWwn0idq3YxsI/Rp3u65folTqC5gdlc4wNn5Fv9FQ9Dxw98jYObwDfD/8wsc
QjGZwOmRJUhHyUUxTKZAfYAZldOy584u6CUml8koK4eLfID7kMwXBQgCxUSm
B9Saji2wDT/PBP6Du4VrkbL8k9HY4d0hEAbsMxogNmDm5eAsLdPZMKP9yEKX
6aQs8K/LHEaUjNNhPuFdwYUtoIdF1Mw0SFnj5YymW26BNALHAa6E3QaQtgoe
S4/P7DQfjSaZc3+Ag1otitGS3nbuwB7Kn3/+P06eHNy/u7f9+XPbkaDTCJLP
tJjB7tLx5RXRI5i5ttOX/KbT59advuTXnD533elzh/l4nC1wfavVPKN9jW4t
yIR4zJKRfw7E0BE9B8cmOgLFOMgVOOlBsazqPaIg+R7ag4XqHPLCvU0n+Yhe
6SQbh283XYNqDFZwUBaJpw68HzRgOV60O5e+ISIkMLwcx0/CA23bPFvg8HQh
Dt8mekr9sUYaE68/PomNgIgOZ/MCTh0IhnjxLmFiBZ6sCV9gf9v/i8Wpv8vY
eByzonJ2LGlVZdN5FdEa09FXJTydTrrAOSajBO4KnLZqBS1u0LWGf2AgxRzp
JjXXebUAsS//xEsfLemrt5t4O13n6CNIgSN4Pvr66G1Mp7eA2maL+LJjjzN5
GccOd9hFo26MVJfET6i36dzRRxBlkEnosbcHw94R7Ao7QgKUJmVWBRLnlJIw
xbAt+M1EWuQHYo8orN+xXAJgxtjo4VsXTz7FYwV/TLDzRZJ9hEOTZ9gqLEJZ
TDOgzTCDSf4BxE73dfI0m2ULGr+ISdtCU+4+2nsANMWqjKfI1eDlE14UIAWn
J5s9aORgWdGg5yio0/jgG1zygqgz6BBXsGJzoIT49GugnjD4K+i4vMjntdMH
lwUZhXw4Bi5RXGGnOPJiVJJ4AW0smfB3hRQD8b5IgaHMzmEm+FU5z4Y47mQ+
SYd4wag5HAYsC6xp7+Z2YDBpcvjyFA7BEHRFuC0LoE7zYoYiB24vtsgiCss0
PANp+SQbZnjHrhnlxkUxz8bLyWS1SWRyNM1RWIbtKBZduZsTeIkUIe4iHYHm
Bye6dSzc/5bKcLNEHsHv80rXQPeDG9RNOYT9mBQpC394ErNRfLzxTIJoDcMP
beULugqnsqLuXV5dUAPZx2E2V97uzwPoi5OxlzAjMsmsYqFdowgBjMDhJ9gj
6u6gbyKPEEmBrvYIZU/m/fjgkB7LywsYOxwj2Be6rdjZxRI4saMrAYvBp4po
AkqFuE2zlMTg7iSdnS9T2n0WDZFjJ+NFMZXFS2B7kMvDiGcOepmmIAeDlpfj
CJHRQ+ek6dAw/G3nqwuDWNHdLbd4oW0nMAeHbCofLieVGSaJJinSEitWjpHd
LozwUszGIMIKkSA2hjQgHaCAAnQOLmyJ41URtFggURzx7tLyw5mY4gVeIHcE
EpbMMpjBTvceLPhygYwlKQYV3lEkx3oYYnbODF4uQpIcXUIzwq4GSDJw7jx1
uJYfkOX6tQKxSDTR/BP0G0TBxAsFcEkKkOTT4STTM38F1wqEw/mkWOHiOzhv
ZMShNWF5DGX5LjyC9B8WrlzBHKHVQcaLCqc5n13kAzie2uknLxBUafkBmTDa
uOgetRHsLTMAvn2RMLdWkJ3BPYF1LvMBzAd0kWmGihavodjs5Pha1qACWxAX
wmWgpV1ksM2p0k0md6VcYKvxuFJ1ubCz0aW8guuMMhBdG39Z6IS9KTMv9usZ
dyU8DTx0keKpAqoG5xXvo3DZsEZJtEnMqLFleElYL20ZKZyupi4FMTswUtZM
4cuzRToDireokufpCh7xtoKNs+enm06F5V1gbLAvx3AWeMSDDOUb3GC6Bxf5
JBPuM1wG9cZvIfxehPUH1dWK0DRCVQnxXdw73IhoaWP5eYttpOVyjoMvnRwL
ojzQ2rKUzZCZs2wAyi9d4XDKSZ6Dd5HYPCmQ+adIlLZc2qqjZURuYSrnBY6P
zp4ILTQc7NofPHhfBluTbyukLMKEjl8rgyLV5D+Pu4e9YCzO5yBP4I6LEess
m2TzC2T2xyrsnGSXeZnjTmycnh2f1GVp21fl32ZNvKVD/whtN80J1UJS4QaZ
1YZYP0TxCORSkByquiKRGEUuA6LmWMicFbOuvj5ScVOkfhgpkEekodmotiHC
I+FCzdKJQ761hHYHOXPzcZaSQWKjzDKYlD7Xlee68tznz5syHWYSbKrXxlT6
ZKmUCZqw2Yv0EqkxUOZzuC9C14QYYUdbNC3bGmkCKLNjVyWfDnxHhBF/SMph
NksXeSEdwejgWiUrkH8HmSNBxy/2KGjBEYGDZW8X9O1JgN0EtfgwEJQXxSib
0Nl6Nc9IfkqOvOSLFDhLzpc5rS6uCknPeLxpJngHiPo1bik+AlwRT2TpNphk
iXS8t7MHG6ACOTTBnC01ImZd7YCDlX4gAwwJuAtQBhcqtJVbhhZ6C0WrdhC3
WtP18tIOAIjqkgkxds3zCYIi6NSoQL+NujFcxZsNhhfZEN4eTtIc+CbrxTDK
Ob6WWe7ojEKZWuNR0u3aN/R04C0Eho6DJYmtJhaSEYZYDx5PK63pGtmGoG+0
kZD4tUBJEcYOghmd3bRy0yzVC7CEtVt4PWmYL4Cuo+wxJAUKLi0ICHNPo0UF
3Io0MaCpyE/r6rcMxdsxshHrRay48ySPcR6zrDIMDGm7mwETXlbdYgyMD94h
iZUnfYnUkUSJ13C5SILFg0ua7kz4Kp5deJ7PKG//FumedBAKvRUy6QlJx7CX
qI6KGn8eNEGU07sobMZKAJ52Fud9e1fEREAUzFIQTNaNRGyrPGimfV4tvVIO
HCundJZJQz0z/X0lxGc4yfHa8+DLeEh6yP0lqRkx1SoC+k98V/GKogSKLfSk
47g3Y5sKK4B8OYUxl+wg6Yu2IDZftPbABKEzWPBYWPbWEHr3CrkFSp+gexQ4
oiqHe+NFG1b65yzO52Rxl95wxMv5iNWoQkYMykB+vmT1oLfZmMo0P7/Q5ZO1
iNZvnjJdjexhQl/mIC1UvdrG4JEhtonqLn4pdooBSPnoBp6xShcNAolFOpT1
FBuuXDa5qDkq1kQEWtSMa/ZYR+ctfEpzaBVD7wu8fNbM0zgsA3S4AMNUQTw6
D2KOY7GBJGN/vpAQEO0cZGT4xsOGB6Xd4uaH3SImwBx4t8T6hivB/cugcWjy
Rg9INnnJ2UKNEqQ1YDDdM88iE5KrirYC0PLIs8fPidPFPI7L+grvbDBPlnA2
Slhf2F7Uo3CryobNVDmbWTyXeBWHydFI7A+ltTQADQa6OwfRHAggPQbyBHA7
3Q09fdDaZZ6ynWQrOX1xupVk1bD1DsNxKFQ9qR9AIoKVXKZRbFXEGIIqnaM5
5hXxldgyVoHIVqJli70EG68OTl9viv2FtH2kFHAwMrzZ2aQ0dM9aVT9k2bxm
qPJ+g5QFHFRTh/A4L0kJo8UXR2wNV2HkKl3RhvhOZlm6QOmrTLK0XNEbRKyV
fB30u02jD+oN8v1ajvBkuUBNAkUZPq94oGG/VJjD2+BaW5fB6bFG2xeaLIDr
gcwSM74kOUVZcTgBncrhN+cL7zyj3aVRWo7jZVWiElNgvbmeRC+BulgjjVUN
enMVmaTKOci21p4UW+wckf0pDlRuN1JwtOOVy6lXsFT9H6l4AVzlMi/g8JTs
DWPZ9gyWNGc/PIuvH2AwGLFSJp0Xb07POlv8/+TlK/r95Oi7N8cnR4f4++mz
/vPn/hd+wsEfr948l+/xt/DmwasXL45eHvLL8GlS++hF/4fOFpvgX70+O371
sv+8w6O3SrHYEQZMlBcwLZJ+ynjGjw9eu51dFaJ3dh6BSsh/7O083IU/UKRh
WZjIJ//JWzEHIZaFwcnEAS/MgUSgwFaiGn81S1Aj6/FqVVcFHcQEaC1r23RM
cIwdpgQd6qPDp6Ujrg5LKUjpRtYYvI2Fktx1mmFad/AFtWbhjE0oSfqzmB+n
q2SxRJYRaRBbOImJ/wPZLPIaUvidkAc2ZzHXkbtUshQvvuxIcUqSVwuiDFGP
JcZ44IWXNqmxUZGR2yfhE5w1yPpgSaYQVTGZghmTc+paLd92raU/GEjJZvt2
v+PKsWxATZOUE7NAWHFhxno/A0OXPUnyseX+eenCuNE4EO+HdZCWamqUwaLN
l3QJVHJmSUc1bryh8zT3h6l5jvJLXDZ8Tq0x+g7JnhhvgdrHFDQJOFFIEViR
D51z085L1cJsObKGWov9cX4eaFxhxorEU6xs2pHz5m0ecw8pkOdlr6C9yzy7
EguK0FUvhdz6VogSoP4w9016mZ4CZQAJ9BX5VJOXBQdvJBvfnL56uRkWYpgu
QFsYsVxs1fC9u/cDBWGdvOeO9dIFrQPPTjYdUIBLUqGBUjgqOUPqatwWEgyW
31M2fgLDZbYwS2S7t5wXVSPRlGkXnnocd5u0513Zabxi+cwBfc+CAsMSCYu/
8ZmOXeB42Mb5AjZgfiFuQbVraFPNvQozYeaJJ9RcyfgMq2rIC1CugJ9WCzlw
dHwj0T11s+zKrxMIabzWQM2ZGJCZhUUvq2DAyp0vssyb9xbTEq35OJ4c9mbj
rDjdpNW9g1JrWRbDPBjIo7mQLUtctfKFIxsCW0qZYvZ4grixeOR0XVCmZTFH
l8XPfhRdYRGys/WKRY4X6X/4H4l7OuCnvvyHvWxOmvmvA1nB47CCf9fvYKmS
Pi4m3j//aX/kj/1hWqX6OXp12eDY9tPln7+4XzFi+enL3rw5eX6rVv5D+mxp
ggmFc412/uvvdiFgD2Cp2NyiG1vqNEu7Jz/vczTcnzvaxYGciM5n6OYV+1z8
8aKAjPMcnWTipESFbIEK6XIBNO89smgyHpkDgSZgZiIp2jUK17AE7Du30wMZ
dzDN6WYGOhCrvSJfkTzq7vbEk26NbrNV5B0IJKMZPOPuYfAdnAZggaxNUa+w
ZCUNhK8Pem7dbi/pX6Wi4PkQhdH1LmMmTLwGQGTXzSn4w9hJVJIuZCbh5pMl
EtkxEpVwhCn2j9V6FAbpAAONT5HbGX8yCjDiVwmrgN5oPizBpOXtQA4tMUKF
UPTJR9nCO3FYsIsJfl4F0SS2Bjkb+tsgFNMlHktSoNFOMC4WTRmLrEJ+z4Ge
RPYBmA4HFAWPskyD3lPVKuYAo2xazEhnyZxYWWJjSM29tJ71JMlj8aHSRSBv
PXm4Q7AVKKJ09MWsDCy2QAdJqZGPjegtZ3pvzmh4URRoukd5JXafSpCNlzLl
ZFBcwBxNz4s8Mhz5XmB1iSGhcZscNYbv1bbVSSderZctzSaTaKQkOUQj8S1i
/JUGM4x6dEO8zJ15n2KLuSp6kb/wHfSEUOGnda8wRz/pm94UE6ye3oITDKOm
S2D0ZHGwB3nLjmssFKRcR0JcCCy6OZYoOatteIv04+qmpSmSVSScl6AspYMQ
G+Cl2X8ZE36F8/0XMNLAAk/UOtSPPHl+BCd6Fr9wFNcM4z90sYL7TT/5SxA/
Tk/+pfPWn/7ww6y4mmQjViZuMe6YU9XG/frV6Vk3LbtPj868ZPC7jRV/DiwD
rL/y26UUe4VUz0FJ5aygmJMPWZ05masK6iSaV1W+DfaIIPxyPBDe2jojYtGD
+xjt/35XqnahThqDutUp697mXPsf3blu4xu4TctJyyH7fTcuTBK3DrReDcCi
wBPV3UYZ0FbVQ7IZhc2PJ6DYaERXARR6NoI3PBd1Pga6xsOB+82GufcpwJ/T
dLEKvnCN2hAvLAhBNtil0oBTDnqIol18VgRau0KnjQiUideCDeu1zubALq3B
0P38c3i+G57vhucxqEQCEUx79bQKYrVLox2HQCK7VpHcNGbbto8llVQGkc8d
yVI81OSiuMLJlbH0hIuTzYbFyJp7NZEAONcVcVyVfNpXw3DryA9ERpqDixRd
4vDdEXaDF9f1ZQasi3u7WakGJfSUkMcHttrYvMota5LjeAQ7JG9XxwgDjPsr
WduYzZcVGxpG+XnG0e3wkQSckI164FfBsUkG5/Tm7El3DycqE0DZiu049x7c
ffT5cy8JF8OuKUv2aguOA4TQqEnRLRXFpqJROJN18aK8DGwj6533tsg7xgeZ
LBIUA+Io/OX04Pg4DE/28uNcrgnMvt8FYSMDmdkEhCZv5EMQZfqzFakLbt0Q
gsWcEiQogEjc+2TSQIVgyh4Q+I7Wy7dFu/+C7WMh7M05zM9bzjTLDtqurjDQ
J62ZNylbJjLBpgt2VBob25bsFhrjOM7Xk+CNb96dbsp2Pby/cx/uYOXTYsQh
GlS1UsLwnAkBwQMTGzpRqHexqhIZPtnu51NvdNxxeCAeWnJ+i3+Mkw4oLplG
hVPu+tjwEGe3lcCMfOP1oMPC2o6/8mo1usnJZ4mXpcq7i2w+ScnKVbEvZ0si
ZdXmqtoHT0VbeXPyHLfzD/KxSMQg4h2loEcwsRIfINnba2HONQ6vNlZoRFxw
1GwwV0brukW21ZXfZr8l1qRqba0+9tPxaGFA6nvqJTRgEP1Ln9gF9Nvc0G6w
CsOJgXsCVDPW/6V/0c5LZi08SecXQZUY1ja8rdaPnaLvWPI/Fg2ZB1vhRQnm
aG46RKXYKyJsj98Tn3XkxzZxI/45Pat1/wY5mZFgqmp1ZZQ9ogye3u97h7x5
1JlH4euv0DXf3d75Kry3JakK+hIe+K9GsxKfEme4Ne+WiTgBJcScFSwM+IIT
JLQDTs7PP/8nXfC798Uz5wNLREQEIos5uD72nV9F/5bti0i2GGF8zu6L/g8S
uij8B/kpHuCEXdUwjDTZ2O6enJ1tavwhqavjzIdu+83wXJVzDODKDSfLEdmr
2+5lqbGV/E03fINBlexhZKMKizzO+4LVWS/yDTlxFllaFjNrDZyRHwxN5LKU
M2b1DKaAE9OYNXFsQJc0016icaq8Jsw/aVVSvHeLbv+cVPMsJWsa2sDIDIRE
YTEi0xwFkwlpvntvB68sLZ59R7df1okWkuL08IhTPr6nenJsNFQc+xLKrpRk
zYscRjJB2uLsgdamerWpypB4sjM0+Wbzqvtc8zGi4d8wYxxZNiNTwKTAqHIf
0J9ki4XhPPVbEdJQTNzmQF0AFL86RJsKmZwoPYLjbN3BoijL7qtFfg5DO5FQ
muT0giMGNg5enZxueslRuX5oinjfgBEHJNFalwXu4Lt7B72To4MuTLjs3t3e
2d3e2XlApJjCImpXGgUp2jdqvnvApr1uH++ajjBaTNlGoDHLLOn87esOrMrj
fIYKghhZRXYlDlGQCT4mn5Ggy0IDTuLB7nIxCeJPFAhwKiziPtMZ3LvdB7t7
KMzTxpq0JridY1SMhG1nyFHbhBLT6t3QKosncgf8WMh1miLrJYriIjm0hxJV
Tjbgr/78lRUCVZzFuw0iKJCBIxFsafU0bE1v1Q2tLDJcSpImHZBQEo7giMlC
skyg9rF+JJGwlC+eTeHrYnpG4RUzM1fJoBituC9oMZ2DZitJ0PlCJRdyi91S
wOON31LzQZDkxTnyVRn5x5azCUUxI1W8ykuzfWJjFd5IAzQua5TD2BjuxIBZ
8+nTmst08CsVo2C6Ocd63CDK6YrBAuOTeqBLDnisrSoNb5rxnTLpiEa8hUMN
25qnPloVW9U9lquTPJlg9gIuHK32Kb7g6ZJd53obGJBDOs10OalQhbemhvDs
m5nev9e8tcmruW374aOHsIe+RUl/iBoQLghNPGPyEG3/Na9qj/aRUVaBMBg/
Vm+fnrcsKCwvEx5M9vw66aST806y0Z+cYyzIxXSTzDNf841mEuZ7Fi0u6cA1
yDoU3+jVpPgKJQewWsnGi/7BJrB7aZrVQorP92IlHXH/ALv/gDQyNeM1Fi0N
Tkv/4M4zbLLHI4dRDGEYG2rLyWdrhA5+HMhl82E6iF34qusVCX3hKCfNs/P+
6kOHgyboGn+brTZx6p0P+Qg+J6yLw00KlNI7yMJ3iHuxl9FLczT1ztHp3fsP
OuHUmcXwB2RPM3tErKi1MDo87be3EKgIPHX3/v2dRx1gRHA3EIpK0xOJz3SG
i8uOkqS97XsPKakHzxZPn8K5aMLCtMgbtZQEiOwjnLIyv8x6YnGUm80k2F93
dojpIRoA8RKX2yy7UgdxiDmSWHGxiqKFzxheTAQRjT+yyyL+lAqMSilSmQgN
v9c43TqoON7HtSYCR3RYspwovEgIrEyKjHJ0gsKcDKE1sRASutOMq2ANtzGR
sA/XTyQNoQGof2DCNC6WQzO9mU+0+ixboW4XRXSpdRspjY3goAwpPW7eqybn
XWPcnGgnW+yGq2rsaZHBsSUrCouP1HDJMb9IdJPd7e1k4zGQQGHXm6wrruYZ
XurZPuak7WOM3bTcx9S0fWpnf5COPMv15E3jx4A+gGg4DZZYHoWNTOHRRGSU
ItK0qVI2QVfCgbqRUuhXcIkzdWXxBSVKzjnDhtGyOvZpSkDP8wmqMmSjCbA5
Xqb2ZkYUH0VBq4XpefZKRofEcl85EJ5NuiablDhQcpurlS/poHwLfXTPYLE7
kWBL7lrElhD8EcIFel+U2R/fg77WYdd/6k+7j3cUbp+X1n1/w8nws2+cDbe7
cz/ZeDMLK/4Cg5ETHO8my3jojMLzYp1TagVKfv7DvAD6Dx+fZ1XkLqhJNmjX
lYOPC1sXi9BkpF7xSGYsCLwhkQxMEho1cCIiYqRnIhYY5qenC2dcaHhwjijl
P0SckfZci3bOfZQzNDZ2ZjHl8uMFNu1SbMXaG+jiGwir/IIwItBwnJC6k402
k3ARp+mEs7A6TDzSYC0pLzjMc5xVFN+hVCYk/ss4N1gmoNB1F2RbyfJQGRym
sCkHRicgOjxusd8amgRTLF52u2DpoLjMIjATkbJEu8a30BroPmWLootGIMwP
BvGqIu1kds65iUzfKXKciXtH2lHSIFp+uIuejku+E62gXCUiOqRccB/JRqeD
h/hdpp6TcaYGbHQrlUnHHOqOOS+vZrLnxEycXRJYJjunDTa7LUtSbTgyVOZg
A0QcDdueWPmSklnEPIFKBnotWPX2kVOL5QTJ1ivdz63GPa8wKkzNPRJBWdrE
oDKdYlyuxh+ltZPs7wU+Z5lYXRNik5i9WyFrE0jRsCoWHMkLPPElSpdOGzNG
LfkAxMStusGmxQFeOumhDCMr1eTGZpTSmyPQdFEUFcYPzRnhxduIavRIwiwj
LRb5/LFKsZSBz8EpU/armYQMnbSQpYryIVjhQwsifi02XbKlBBeov7HyJucI
6TZNinNK+ozzJOXUdXSzFkAT4Y2OmxCMgPAmBuSqp3KrH8XnaRFrSjkXn/Ae
JohwuXIzxtHzU8loIvDYLLMoI7rQZZH46CxKBKW8dDVFR4djlM2AS2LmqA+W
PSxAfQ8aBh+0UnIzKBtmkWdlSIeXxEOxYsRRX0kcTEcsxskjkSdjK2Gnmn0X
d5zSWQ1j9gZissIg5akKp84jSXplh4kHAdkSZUymBLdLkB41R5bntHI0kZrF
gAZBOe5MDalv9rr0S0F+iJSt+CR//sxZwdYw4OUWlmRSx7qbzJIkvazyRydf
JEG55mf0fjXeYDW+JOYo4w56aHBOMDFomEZiusrRijMnhJ3zqCXbT3asTugI
JVc4zpo5wWbVFjdEUWLizahgMSoFXrpWbKIBIekw5HQ5i3IyahJFIH9KpKJt
USJIEX8+nIFuNoywdD4RJQoOUwea9zIezwLhNfkXljRGQTXC3Ct37YIxQfqI
8drCOP1wogEkG+xMduRMNjktyLQWWdfbLyUjGGa2GZvTRAPX3FRc4VhFlP5h
joy2Qsn9W9axk2ToxvMikNc2MH67PnqfisOhBoYh+vepg8TnJ9HKqvjuiB1K
o/6utC9jr2E1DKdIW3a1U6RZP62TTsao0RCD+kPyf/60LKo/Qcf8C0jssLRE
m8RY9dpv589/QGMM/vv+quzyMLt+mJ/FKNF+FNQAU+qKaswDo62Zy54TZfRX
V2+8N5+u6UCFN+NZEhs6kx8nbwQpUtpj8798fEPjqSyo80AHuusMhxZc2ifs
envtORG5ZL0XRIZVv8MS37uiaGFykIgLD5TDdPhBQlWcFaZL5btTxJASKSn4
/jwjUbrrP8CltVn2mlxFeawCChLS+8mg57PTKURW00M1ByanlcHR+0A7EQHj
LCu6O8Q9JKic2u41bHI+4kH7DlcuWM+IqPNid0ksjF2ELrL9WSskNUq+pPrt
8haFqF1X98NhRjNNASXq8XISNGFC/4sUHmMilFk5Qt+qWxA0yAiZADVPRh0h
17VYFjtWknYxXLnObYlkOzXH1s/1VsjNZ0oWgu8oAo1e45Vqv/K4fCBJoHKM
hwRHG4GFGD9qm9NDbFLxDYzHipqePODDtP354ARin1/FO5yuPw4kJmASBx8p
btfhWea4KmkgdoW0iQqaHIF7SCEKW0pvSB26SlesCPHA6b6g4nIpCRXE5d+h
fJAGO8B7gZHw9gsP01ba4SZXTOrJS0ye3g000xaVE4q0GYwHKlrSJbnWbLcl
SZIeFk+2jc/nbex5tNodzvCNTzWr+7S3/jnb8DWXTndP0hDG0OSFLEbdoklq
OK8Kn4JFht4KOVUFuX/TiYPpwqekWguNXQUoMWPhrvtiuZevSse9l8NiTvJA
McmHq01QoZvip1+ArWBxESLAY7PCZKBooN86pYhsDgXyVWaCA+rN2gG1Bq0E
CwQVFDqZKzZCJN+B7uYifA1ZN0JpsRg4C2gQ6PXO3b3uAA4SHzqURVU64jk5
gmwIDELyoHgMfJyQV37IdFjCBRT2xQIN4Jwwl6Py4YTELThbJ0dLDNqE+BQs
snMsNlEVYbrUMRAsc7wMAAWd4yinmxqlyFWJIHC4nTrQnkR0lxypU0oKOJw2
6ZBhxBZokqL3thxrf4OVioFoj5ydTzDph9PT5M2Aom5CVXvuWXGVsTrO2KUV
x6XlsxpLqV8fK4+zFUhjg/iQWqoYrObaZnAIMRhgtAg8P/LJU/y1SLEVKc+q
ETPEW0KMioAzRaSM2CYLhfajTj2kRUOWZDu6Pu90DeE3EOejjMSoSPQVyQcm
PV6Spb5mjI9zyWnd/PEP7MguXkSS4G+530jmyawcDvIs/2lJA6PLItE2wmYv
8nPS4wcCTcqXZDmDCw5kt9IEHhCg0KI6yEoSfuwlRvsLIcQQ9mbO2fyBEViq
YIdcyp2erISkRAw3mpxxVw3IJGENqz7SxVJHIuw+6CW5PuilJTwl3Dbo1IHg
WFBECwM5RGPzrhqcQv/xyyceBP7ernhs6vOJhTb2speaxOESM+4/J/3nr5/1
kzvJ4fHT4zP4f6fbwf/+o4NZEdFA/pzsfB3CfLgtWte1gkcSoEc4NoKOPC2N
tUrY8Kygm9GNVO2M2l6rn90osMl1XCMPBpE71aNsbqBaROmOMLrUwhHgHVuy
KJDyfIZZtULI6B6ieFUMh8sFRQ9e1727SYdLmjpcy4FeO7s1x3rLB+k3uP5v
OdfH7OfxQ0vXD4xh5gW8pDYIE7xFdTZm0fo37AG4FZi+qC4f0UaRJDzPpzlG
V2uit2R0iuqpCH5UmwCfNFFuPkoQowtLJKljBD9YUnQJ+sFRFCePyWCJjCWA
ZYXmcJKIjo0soylSi53GeRiD4G4m7fomART7ec6j7vRcSPifrKK+olBL5ErA
art9YF0LvytROKXJC7vSpaeTHNgJ5V6QFoiE8Zzhn4/HIWopLAEjXaMzEaHZ
t0SZ5gtFoHfs8yLhwL7EOKfsuaEekNa5trFwyhSa2yar4HXxB63kwPB6HCth
OnXhVIyIjXTY5R37yWrCw5blxygn0ZIqvKdOfZLPPiSEkslINLyAnefwcW29
9+7uYSgNQewJX1H3f70ohU9iMGeLs8jQMYW4aSa25iKbzDvxOLj8BF2LI/L2
g65N/zcglj5pno4/hsMkom0QuWbvCCUy5YjcGMLRnZrHI1U6uU0yVy++azAY
J87fYB7Q60GjqGlZpNht7H7/PW7B/e+/3+zFmWgxDhDnKVt9U1FqRM8gNzj7
khuYV4YQmSMgo72Nc1rVX9NCLeVcSQC3RsJObEAxgYhR9RKdhkSRBJwuudh7
2w/Z6lNoERspYsGYfM6K3BwNshVPXvaVr20I3FMMd3jvQxbwq9Vf1KkoTIOv
1IYcG/xCfDIvORtrjjUbriN0nU0QX36hIIq2DM9fsH6VD8/73X9+cb/sd9f8
rP/md/mBrjVq6hCUOThNVJVEZn1mVOlg7zMAJjGyV+ZfveWs4SogfVydcB6w
+W5d1+uTiBMBoy61UcakXtSb1q5B60PcjuawGOoTC0zULUKskI6WojiCgrcg
nK7NL9vrRBXO9q5DABq5I6MhWBv0rK2JW3Qd0oVPKNMkWnCTLk3fBX2tjGhX
7Ga6bdfN6DTfNUpYyGquibVrhNn5JKCbuh6maft3Jr8eJ91XgLgYHgGLVPU3
E4Y9JRo0yDl166DPBhjFc4nPJ3VdTOeIV9vs+tSnDRJJRrzpPGRyhmBVJXXA
W4T6lp2EIu96N8zaxwLUuza2eTZUiQ1nRvJuYROfxQPzBT/Y9Qhm0b7gZySM
XaWlYSYSL4EJZ2xIHLHjsD21+4auFXZeIjw94EVMUijqL1hHgzmOlrrWxmNG
yFc+s7ZraA99o8NKUTT8rP0HPip1lI9mX4lXmyUIFVq+iuFRbrfgotoripdZ
8L4HR0P34Jghej2+GTqcxCrwa36wa68U1b+LF1yi5q+sGvWr+jRdG/3kmq5Z
PyKhLMi2v7lrSbY5DmfUdG2t53i3GHemUQwA9z2vNXBz19w4476nk/qspesA
iT7yQS34NBObXzvranLNva4FXyK3xpAk7lGu9O3ucVvXkTGy0bUwTawCBDxk
iVWPPPJmoOO/ctbLEG0bXbAbLhfjWMzs6yGztBxewP3+kq6jk/YLOoTM0ckV
P9R2Vq0RZ285a9jO/pDlBKGhMuu3WFSFKaXaTTs+MotQ6TQpOkhuFdH9W3Xt
Aop9roLlRQoEm/ItzlrVI9YpQNVHPK9IK8hLDdzG/Lxj8UmJOwSfVoWSvCG9
JE7oQNNilBoMOoULOgU5cLhrHCeOOXBsCxR23H/ZD8k+EllJVWVg9F1qjOt/
HMTpq6O8JGGP/M0NCwLaNLh7BetGqoehBt6eZ/XL5CrzkxF9SoYq0iX5g8jk
OGZAkuBPBH3NAlOQlraE7mE96ugslDTAb+IQ4GX3FUvbX3W46VJLxDBpUBWQ
5ADZPHYi3+AdhSY7YtQ9DdJR8vMfjKz02blTLAWRE7wMxVWi8JwpvjAdH29b
kc1sOIk0Iq7FCFZrMa2qRT7AYtjSFpdqIVHPotHJogXHQ4o+yi7HslgrmCa4
6BhtI1xSxsfzwVCkSA4xnJ6vJgP3damoqFLZp6HJ422yyTSxwCm54QHWRBI9
Qw5IvUE4MeSu8QWLbQd4RMI8Ok4CCY7HGiYu0eXmmbakHw0qCI+5jZ9/ztNZ
2g0f0cU6u6Y18R/4AHWOvquKeTLJLrOJt1g1ZggDjmszaBPkzfKr13P2dNJB
EV0qJJ6QSRGPvq/cs9LIRz1ZQVYMQxOrW5T5ToeGkQ2lbNOapSTzeRinI6H8
Ile9Huc1F3gZQddXi2w+TmpIOly6pUCUPnRIoF/c+NTGAYZUto6qmpLIHyE0
KiaGvwo+oJNvatlmg2KD9lVh1zzZIEoDAhBZLa8KR+SwiCGVNptIHfHqlQqi
ymyDh2QuAW08GXIpWNtezSZDqA9coQQJz+DOTm8n2d2+h0sH6iU05Gwu0n5i
046kJco8cu5nymBlwrl/rZ0r5Kxs8TvCUuCtU4KCr2NqWcxX2mGVe7UBSyT2
k//yUGc/R6Bnv2Zs/t0wxmNRVQgKohyyT9ODLiV/6/zDlBf5W6fekLkB+7UB
RoME7bX2Kn1NLAm/t710ouc++78+b/2GpWgqF+vXhIQlIPw1XQMZw986OtBZ
Vv3rlsN0snY16Le/u8/q1/1DhN75wuP4hJojPrPrKoD6sqLcDgvv66EzZSIe
J77VfUfpzXVIZvqQIDcFmtgk1OJXRuCOzEH0ZRtyYuOLYGqT6FVxCwrBxllq
4uOIQ9uQEghih7nvwWUXLOMem887GwkwoJ7YinKbjaptliQPGguMfwOlUq4L
KD4XTFcIH1rEpU0ny7e2s9B0QLkqAwq91Ye5b6KvoWfsIbbE3aqnWOlDmWwo
teJx7wzPwtnaZ+OeD3xx5bW9mgLMHsA9ws9u9Gc8VlHXvMw3+7NoYOaIrd3n
BoC2LLHCbMNDXThRXfOELDjceM2N6IS4e3xVP/YPatZY/JxUSu6mGg4cnpbj
GT+/7nDxK3TEai/A1cBgru4YK1sbQDCFafXvh1z6uAX7UrB6+9c+ZKsDSmFq
Hyh83cVi2l1Et8OXGnl36k6zS0mQAs0V86hBlL4UIKwxzUSAEPWjNnInMGkG
0s0FqSO1WX6TAqsGISWhok9RGgd0toU5YipDklwjgqfjaoiUz2HTxUPTnLNz
RnktNGy0YIs9WeEKxtmVCzOp+bAl5OjR3l6AYVg2XMy5xPpxeHXzdhJlscG2
aSvtCGkR9v4igsXsnAprcx0azGPD7iTODPH+HKWFqT7M+XVtdzEaSD3916tr
zkicmikM48lnXIqvpaL5UOtvabiqx0Gn5qLqH1GAbj1FtIMWgo8t66sKTDGT
aEqdUWQ2wcLiNnlU5xrSULREiT6mdUU8+4J1PAexJwGphQuPZ1o6T8+Egk2a
MXiFz9kAXHqPYPkwYl5qvZuGYqjNwYqPqPdspaWkIZlERenxK0bX8YTV49E9
J1c1nQtB7YRXMZYMqKzfeA5qiA56G3j42h+/eLcBIf7lNg/9sdv9S8j0/ZJW
/xhcxo1f/1j/GP7Q934xbbX+Gv0e+vu1770Nn7X/Gv2evIX3DBoI/wFE4xP/
ytJNkhhEliTxvOGGsd7y67etX7+lr1M/ruhrVqRpyf/iEfNbtrPRc9shaTxE
rSItuf7hty1f4xn4Syx+XXvKfkn+rxu+/4X4wLUPvb327IcYovYyLch4T0K2
5wyjY+WyXuTzsvO5TrjYVGrJVupr/1qYVC/umoKMDj6A1/Pygq19jZpJPoW8
RZQ0guSWVjF1ETg7AQgxI5m1lZ1kzFqKiUvHVRbKsUvsdqf7lw6nBk1nWNUj
H0qBlecaFaAxliGgDHkWVbMaWR7zS9JvcTyzJ7SOkr927+te1LVRMl8QI9N4
FD0dT7PKCDNhAAhq0PJF21jvbm9HH0irzRiNX5JnR/1DT4SvX4GWVkl5zWqU
AR6lxLiIlF3T6k6C11SexFalVlAh9K7R6qv4i2ta1Saw1Sd0Fg34uGlVQSPo
+YbOtlyQo7F1BU5CSUDTtIw1biZId9Lg+nV9DRecTrsE2q0d63Ur0GjVF0SK
XpWx6tSVguMgb9Xqv2ash1p/yVKMNbtlH/GjbmnVnbV6pBTQ2QfGk6yokFBj
A38fJeI7ay3B9HCBGo4xe7F+S6nY/PD1VDxEh16cinKGMZbVqz1ezaEXy2xy
qWIeyYVk4/V6WaZ42s6byWPQ+xBUaagImxgEx4xzhBKxbJHShWnxkgLEFaNk
QDLEnqonFj51SxyfbNYPlRRGi/RqFpDQvR4SHJHiLNFvEK+YKwlgcwLfofgN
kcbocBmI0j+Jg2J+IfkfxOG3FFNjTliD9LaTbTyLNfL4S/ISmGWDmMqTluTx
k2mdCMqTlozxk41rom2KEGjarEcScBSIEQyZZ1HVlOgK0ZNeatQ2EUbRfmJu
DBUJRtRnk6sXEBoauhUFuMzFaZNXLhyqoG/7ZHEDWRJChFXbwT1VH0zUFsWH
TVKQW+gySOFDRocp4wwqNLZ+jX6kQqFegmU2LSXqWwvoUsLAu1CcGlXhq5ST
2TETEgU7OrlFgdoduofvdDTO4tnZi+dJB2aGhbhTtNVQ/ilmAXiygA2EheJK
5OSK4bbQ5o4e5NqI6SJGw66VN2BFPHQVqWqNXjoBXdA24sMYA74l6JmxWRBv
aONDBmKS5MRiqrEYemxrKQZ1HVxhuTAN0zizg0816UyBFHvAReuTzQOcV+oM
AfoTE0OfxV+FfnJavByLClON2ColxHJWiUOum0IN1YFMbBHRuijuG8PWheJJ
MIcSNnyElksqxojdB57U2tNwXqk46KvxqaIdaYnRLUll2tx3+0mf6RrL4L5k
vKaKUBNJqC8KY73KBiUMbF1zkm7ggaew9UkxFFT+RN8ONU4RN9E1zffNRRqm
KbsuqDKG6T7ANYZx4IriwWem4dO/YwIhCWh0E8itupCdY3x8H8s2Xy7mRclu
iYN+XyJmbdBXHQsBzX4P9nZ3KXmA6z1wUqTkL6k9yrvIrYpFRVUcpUSQRmLG
bwPwMBSO41ox7IYzpJMOOm3giUOq6uNeQtsdtpjiwFm9KgRXAFqhyC0sNgKn
Mj1X1A8pXmwqDmDmLELsGI45FJfcwlYQUs98owpCWDbkruuCWc2mDopikqUz
2sxjka808qkNc68DMlTWMUBKB31VURWwfjLBkrvd1LuSPNxmAAW9PkS2Vk/X
NXRdqbZIIYnyBUxXg58kKyvmclgG0BcksVh4km8Vm6MjQ5v3r6OA+urbaxzr
waEeLPX7SQcrZJT7d+4Yxy/xjju4Tpx/uCXvqIfjprdk1v49dnPc9BbJK6Ev
Ivc39kRP0TvGHXLdW/wYeVb4veAPue41dIsw8hu/RWxEXcudmMpe2xA9egc0
yofd+9172xprIDTRvnp1ddWzr+ujEQ3EwISO9dn/XZ5ac73g+XE6KdGk9lld
1uq3BkUirh5cBoSdtOZ7DfSr9HXKA9PSO2KzHfQmNLy4IVDI5kaJNgQsTDTB
DTU2bdVpvDygGpj2BLqkQCIZYb9DBBtoRGeUYSQngj/jn5iTKkdopLDCUubB
Pmi0GvVTeJs4k8puPoONoRrY/kVyc6Psiyif2sl1TQmsQXtTPUEe5mnLqSzJ
uaQRuzcwRthU/zGpfHXeYvAStEmTCThW5oGwvxPaZU089msfBU2alkkKRiMh
wXFUUspA3UXM9uuzt7k7mE1iFBDgfzmrpz3HknqQIRBY08cLU/kKiksGLUBD
VJuu2V5dYqLa4OuZEnEN5gSBN80k3rHGZDx4Zsg9B3a1FTxMpqQXWo20KrlJ
aq5LYhYxXKIj8TixedRFFa9gZkRg110klgGNFy8Atch7Uqg285UPPVGQNFiy
zyIGR566tA0+dSvG7aU0V268i33R8ltTNhJaPuVIF+Xm4odyKH1UVgeEj0lV
7OPR6KYjEFL+amniVvRQ83v4mshmp23voRPaJ/yeB3stfedH7iw+PS2yfqdJ
Yv/AcSVl8hxmLIXLdB09+KQvyeS7vHF3xFKtm75+a9o2pidJJVjSU3UrxQkM
SHZGKdJodB2dl8rSGmmRQFmjWzgfLsluaQOe4KlHC0yjCmhzkZO4Z2dw0jDU
VZ+SRTFFiji6TsPX7RBt3L0zcfeUWuLLQeNyb9lAgxQ9pR9i0A5Fx50B92UP
tAseaI8MIFn7WjMTVsYjzFKtI6mb9VvEPBzafvIftzul/wmaXlks/nz3L3+C
0f6ZRy+Soj/xctGub/HO2SvQ8472FuPzQm/dDW/sHu08GAye389Pr+SNO18z
jj5xJkqFvMDylOPAUZIBArmBvvL1nVv1McseP/vh+fhqe3pOd71F8GHzWUPs
4YMqZz4SeRoVDtmdVK+4nZdOuTtDbkmw7DlVYS0k1lgsthcLhk4qYu/VUnBU
eRjORxm3K8ytBei5gcjSIgD3hjcbVSlCXpQrsCXFMFct0RsowjmmHwhY5YG7
aGK9L5fh+L2kXYQTEgDHpUPZ0CjNhQJI+JcKeRSWJHe/wyUbXKvgRHJEbFGo
DZCSLCo4XuJfDJkJVh/3QH9hFgHwT0FjhAjx5tXBJgni9N69RwI0aTVerR5J
YB4KG8GJJbokVMuGp+vxBXll2eLlogwLsx2eInK7DTHRRPppz15o5GmiBYGD
3wu0OnKGVtuGJ4msKD4QNa0zbgVOoFjdOOaQMgS4EAeffF9wyOJo1DMmoA22
sq7Y2FvScFkou268NiWNbEPwHpCnx1SB65qTEy5kBDoUXo1Mi9Gllc9QnHNy
XKK5mcNCYyFgml81FH7zdxoJ5z6ZYZhDhcOQ1CuifILzJBW9a3XM6GRJjsWq
5+LrUI8vvh6/w7ka9Ws7/Ga5UJuIZY21NNTSyxml4xqq6bhC23rSrHxfolox
f85dF0tLhQpU7VjOmHKNbhoXgkfokELSRip8yxKFiB75TWAhqdaJD/8g8zQi
0ol2oHirhHX5J2wFK0wRsEPFsuTO/k4IHbvI5z4kLhCUqDy45M6sGQDrm+Rs
VtFvQ1O9hBoiYVROQDQx21zPFCkdxC+Xmm9RUFuxg7Iujc/q3vlI7BaQqlbJ
2znvI79OMWNJlrA7KL8fGsfWWLIg56GpG98aeCBuZvi95KzVInjna9scFIHU
whXL4xq2D/0NqN4r7PN8OYnrP5vzrenDoRMXxXNe55PwNXIsNIqCoRAIigfz
jLIaI+HjViqlSAD46d3tnfvd7Xvd7Z2znd397Uf72w97jx79CM+5KLUkiMU/
1zJKWjJIUM/UzJlrHq8Z/TqUXvJ37tlzDBnkAxghDnJ7e5/++VGMp0LNo6f2
oqfwsfhw3ELCJ1vrndf9Wf52Vv44zMsbJXx+Y7H77Kfnnxani/lxJ0xGz97N
yrRVKu7417gVcy6ubQifu/P+3cFo/Ozt0x/uvqgr5liB3oo4YwGQw+0JBp04
gRVVRUFSRy/KEKGc2A3iuM5vScHotLW9pF9/iH0lJDCiA4IvG4PAAlnOFnn5
wdRaZdOoBpzLc5SlXGLGZHhwo/O3r3udzdoLtXEp6xbIKaX0p0tWdPoTsh3D
XUPfUXKktd+x3pwiaO5tEwBZnfD5ymsxig4rR20rYATSkLFqK13qYnAIoJ+x
zhNUsnH+UWZQi4qPQVaWmVI3GWL8cL3EplOyBJdSxu1ThdsMeeLCzSaCbaLY
krV7JjqJISIsfgg0znS65ChMCmOmCrsNuHmq3snhFeyJEzB2rC/HZS5ZoGFF
pRKoWScWol5iC3oVA2q55Ph8bFKlvzWt+mJdTswuRuXJYo1HA/IbK6DiVnjD
o1yPJ3gAkZfFbzkv0Bz0CYeh5JJKaueikkjDXFEwiStsIeL+DKVHCg6tNXjF
NpjJGBgZMxCspp5rJmxJLtJZS9gC6PGzMtUMlRgmGyVVHKF4T33uvdqjCNUr
dOqrKeiVdmu7CkXSamvlC9yZcz8TacD5FUYlJ9TDe780cPEN4YWCAco4wdet
30VvzxMzCcZ+EP5PRgkVgsQc6vGYoGGLqMEHXcrClwhvTbkdCNVlTBWa+dyU
eFG8DPBo7Jj3dYal9yABNyQ/JItalSD1lQIkKzpqJKoiEA6HNGpT4tjP0Bbj
Ii3KrT6HbdZBqSckGls4J03fcnAt64WUKjKZl3RMTryJDvT+fEQqrS6UVGhK
Pm8NVYCTuljkIIzG1XQTRl+32c0UFr/2aIwv4wi+Inj4YxtBCyCpjR+vn2fn
7el6qryfkmtsbQk8d2ntJUKeahFLBJPnggUqmJpQv1DXngYa5nGIMFGcenqT
w6ICqPIG4dlMVrLvbAnRtHWpvV82p0iWAFxtz2PQL2oKubWpKJ31lDVsleKK
yMb8WjMPXwwqq0wL1Ypq8ettMl/sL7YLeQubo/cgqzrZcCaLMuEtkMav/D/Z
AlnnC2yJdArL/lstkVQOMbZExsbHmAKh4heuw3rrY9mwwMS0XsoYhKbq1g6E
whUuS7U6TBGlyyy59sZx2h3Nwl3ba+IhhPUqjzzuzRe9jmV8p/NKAr+x0pY3
OQgCTTA8eJpKix1gmiOmGmdOaodYaMUDcHLogfRMpgBZLQJkpkUpzbsSOetr
z8j7/qyRLdW/aXbGGbwygnn5kLWQVZUWvX6wxt1er49dq7yKUjgzklgy0CSe
tHRpZNvwYdOq0kUQQDGAi1aUMfD28jShwfmhsz4iJ4GDiWvnwNlI04EQUrzg
DLjSJJeqranbXSGXfGZrSnrRKqGabXiBnVUxNyryEZIuK2hB9msdSkwTyMiL
vzOVgSEzSg6XPWKV2CjfRCEIm9wG0rq28g9sCcUyshYP/2HAw1fdMkYr4xJQ
VCysrtbJ/R9k57mBk6AIyu4BFmmsiJwfKSA/b5HrfJz9rfu3bqeBvE2D2HsE
gyDaz9GRVNmEZtNL3rXosaXbYAL4t687KkqM80VZcRbtZgTHZMs5tIlMmAox
dg3BXO4+nLvLbNUmQWGnKCvqwKJT7vBA0/FqnOr68TUhlF4LrqlPdaW4cSPX
6Mi3AYLwMSImtsxQewIOMAaN0Mq/0Nhngv0a2DFNa1+xIE/zZ7FS+bEHi6Hk
dVL5wGstV/junfni7T8eP1wdrfq7Hq/GDwTfhfGHL9rmzG8gMh5+fvh0dZK9
nx6ANvXwcvfl+PDp4bfjfnjQszRZot3uzl1aorv72/f37+/1dh78yKmrxj7p
T4TGGDbd7AF3pKE6BM54rdpQjKVutudyqfO++JizpzGMJGnZCkx8RRDDb2aT
/INYe4hUqywjuq9UFq9C3koVrG8ev92L505iAGozEROOtag0H8KKziDsOEmG
MXHlAq8/yMjhU/qylly5ZxJpB67ebClO+4Sj6SZ6nRrts3ugFpx1ixoEAlHI
IjUH0pYS1sQRFDw7ojvnBdFqjnLAdaRgDnLGgGgwvMDY8uKSZXkHnIyQDbWI
Z0OXDSERBqSB2RU16ewDpaYzUPU2jMduLhT6fERUUPHV+9WpRR7KypFZJtI/
bfyBTCiU/9BiUlKuQAqBh50KxcglAa1bFTEwjvd/ifxFrA6kGZbfhK8ase86
318koPWMUciUGGhOpxHEGWRHZ+VNc6698YvxKf0suVhZPMGeew4XkQvK14pv
EbnXQmICGyiGK1lpVqN6mIdkjjUKSt53VRe+p8VlVvrNYypJimP2JymEyxde
gTyvf18VQW5hDRCGHKUonz/O7scUO4IXrn2qjq3o44BRYHzm/xHQKeRdwTX4
RYSpRGocLtY95he/ourRHAJYf/aPEQ5G20zcaXAb0itPSK1xZn/o4/C3s0Ac
5jdXg8Mw/b1t+fyta0H8VoWsFSbhlM7Qmb/SfOAajArREvptotrt6AacTVaQ
XE11reHqNs2/MiihGqpfh0vZ9qIpVN9+ykMZcrU38nUurS5omZSqpiVaulzb
FZEIjuZgKFQD2nOyKGtH3Zxu3WWPVTOHa/rIDePU5ck5AJbFPbfh7TKbW5RC
Gow2SRQrnWzUDDockxGC8BEAbNYSmEGUiotyRP4v6NrbBm/EyVGbR1sC8R/b
Xkjar4i5l+E04x6iqHDDC/Jj4NRv9cKRQWD/xXZrL2VMKlov/TVDaqcG173Q
SibWvtBaMqDx0c2QRNcO6X/SC3+sHZ4bz1K9yRt7uP0Lwn/0CfZZ0J9nAbTF
vsAXhp4Il5Hf9/pb25DeXv9n7YWoho4lCPQj9OJLGEergwSZxyvjI7sl03gV
x/XUI9hi1hH54DjmPQqAYpIYPIKt5Jbjaa20Kw9bgce1SLve17y+XJj0IcFJ
LkSABHx9du+ydMuGWYmDViFHrRwutj15rhDhxIWC82HS2azixIAaK2WG6HkZ
hSWiaZZNm2IQxUfJGEoKY2NdGtzKLiCx5HgV46dR7syrRP0AOAi2qNIqxjsv
s0g5dkzeNzB2OrUN44nwHIh9VZbB1XlSOwdietFCfn+RL/ritf9U/0KHU3uj
hTDjF+zCbWV813QuonPzCx/kVv9Cz+VtRmVk7C8a1UEElkEfMY8UCfwXjV8z
r9ZIiHDsdWN761rY06+ReKMMCJJ2o6ykdpIVS6OwPkOMJtbUFpcqbmfknxgK
zlMoJ8LUwwYbOgN+4pOUVGY1rsn1MhwucaswRmJhdG9jvNDrlDj/w8vb/Hwd
4w6fWi78x/gsGaYY/Sjv1DTQXuMJZZa+lzahR49Lk8/V2vkyhhenDOPJCTaF
MiCvl2LpKX0gMHrjI4eC2nichFmxSYyx6IPpA0umF+qoC4U59AEKFeH01KRc
zYYXi2LG0RoMI56JA+sqBEO0WD28mtS37cKI0IhSJmuirvMpoahW2WTlWnpr
ROlQr0qi/cFDPO2njDMM05Ki6JIrEGACCGerxlv1gGuMQD0oncMV3RhO+0VL
wT30kC4rP7C4+LApoUwhGIRKOkxL4IcmcZUXmfo5Lyqsg5BK4xQubSJrwq32
1exNnNCU8KhKX91Eo1KwYBvjC1KrWwkXLsTlRFMROVzCotjsJnTMMofHUo64
hjwuhiPCvL5s4T2RZ9oTL5X0ZcWbbEZltwjxrrYLHjjBR2WoVddDu4bgH8og
k8DlKAQxXV8c3EV+SjPExKRD0h7Y0qqYObjx6tvNlmr2JJwsAvicCVBXkYto
OM9mS0IoBZwc7QYrNyiAaW+wDYDUfQPv0jqVTfUQ2THCIbu7vYtFyxPJcKzJ
JrTeNXyKRJMj3TM4k/uJ8aG4RuKkHcl+Ujy5nE2evN65Or44mfxwevf9Wfr9
oO8O0uFF1j1giMp9WNtuWSFEjXVnvF4UH1dwAdBsfS5g9VJ01yNSNU8C2SPI
fOkUmI3roJPwQmcEXVr60pzYLZbjmWSpOlB9jU2tj2RCyWpHKJpIS66q3HOe
Xkegj3EkuS0irK7F5nS2auEVVNTbmUWJDg7XUFaGESojJDeURhDyaUkaLaPK
Ec4nUIeyObIeBJuVLcibTcxoWoy879yL4rEckpv0Ag2aBXHId00fldfDnMaQ
Li202vnrb6ECPNp4QvcpTsVmV39ZLQe1jHFLD2iSoHyJn4fDexRWg+Pd9m8N
FHGKZxHjOGkaZZuwJPHddKQiL3qj1sIXYiv83n1jdMUJ0a0jZQBfCjXk91iQ
QepwQ7UgbRC19IhGRyVnW7DHSNOoVWJMNfylNCTiQnOToviQLOdWdEbd2YaH
6ucfMq7FBm/9/POYIYzIaClLs1xMuudw0+ETxPznkLt25KM1mXz9WQgO4KVC
OjGQd4RetEAjBe7bFRg7fUZcRD7E1Q9WG+VRGipMF6sBPHQdQ7gmcb4oM1N1
CKXBiusB7dMKP9iFNduQIIB0co6u8aPTu/cfaBTA+6sPGCXQ6/Ukz0ckKHju
wene8U+vnv7wMHt+d1I+Lc5+/CEfn+uLN8UAWEwljCrYpCCGebpCTNO20d2A
Y9GCoHFLDI0bUDQwt96Pr9SKyDi3kx9fv5r9ULwud15fvC8/PYFF6s4uHny/
81P16snrx/d3Hh3Xc3IaXO18hhIwGmQk7CdUcBaJVdAKWH8gl4CeCCCnOUUA
4+9WTyRMkqsMTRdlyAkWSukEKzLcVQ8Yx9oonnDpjMLW67mT4yUuAEu2cdiW
L9klr9MUPceLIrIlmbAGH+g8rgvwTokF2GqQIbNoYVEsT1H/vJmoa0x0RqHx
+XA5SRchwAuDmTQLYTnzL4zingQWgKh4xLXakeY0Mp0wRjJV+9Tz67QstgTC
c1qSBpeaEyNCcItPPBQ19Wvhb4NCvIGoxzYVApfzIEKRGaGn1gjpUbsqoy78
avmRU4d8iToCSWRqY/qFDfi6/mEBnyXbYW3ENh6xTP55wTvwTwlme7D9YO/z
Z9SAppyKTGX9MvfPdDRadPFc/lOX4p9V8U8u7D3LZmJy8ao1BsAtxfQYhiVD
cT5N1V+WaZZVovrDscY0rrQljYUDNKok1GsOmKIemUJMUI2atMuStRBni8Py
qoaDGgBdotKdQHgb1W87nNzlUrmLc5vVym9zbH9ahTJV0ZkyXj+Nj2XUP65z
Xz82N04tnD8nhXUHXNlKPVVEDNdIIWtm7m3POuvGiiNGVya6CVnurPKLeVfI
U0iUJUwqxoUNEem+kEnOGjYnPnHJGd0VW86GJs2wOJSLwa16RJwh1TdR4Iw6
3B6Ku1FUkAV59cgFNZTqLVeLqZH1otPYChEpZ5tOtkLWuXZWK11HsJTNArh4
zdNlVSCEy5BwamlVnV/VAUFZpEA94eUTKlG7xSzBXx7eGxL6sagxF8MWsyvC
hAQUMW01ppNemTHGWKR5qA/yWZ4vByAikTzpc1coFpfm/82702Qj72U9KWqK
MpDmQBqTkdf58egs8ahWvPfMIP0iO686t2JBaaHMCH3Mx4DBXUGk/g2uIzDa
dKrBbgXJ3YrN9Ea9/oMgA5/VnxUcH4VY/YBmb1YD5IDhLM3USEFBNQwxXc0p
kiBuV5N55fuubYGCCmQB4rGECk60yZGpxhTS0lLVxSxasRoMGyXirEWb2pGy
DKObIKdiw8rhXrl7eHf6vNx7O+ueF++Wr7/Lvu07Xe39ZH3S+HBY3ckuX42/
vXj55sH21fmNYFZ4+rv+fguIFVeBcuuCgP9lKHK3hIlrzPKOyq7NoNknov2g
acMcg6eovcEJ/jZbNfkl2ZPERlHzoyQomHtkTrrYodRyHtTRizQiC4yuk0Vl
0kKhqaB1kjV41uC9wcrJJcdaDJNsrBG5R5kCRUyhHzYk+uJXa65tzXSSG+Oq
CSe2hEAd5iU7X9mlHplrE4/gknur9Z9ulqg1Hp4l8NFavV7QLFxNd0cmj5ym
afawpIBth8Wl+N6tGYnORBrM8srP0RbgV1fSLr1SbnmAF+MItd5Y2ZiZe1fg
ddaMhrgH/BMo12Dlrndk1GxielaRxjLyoCi/ckhdp2ndaWXCycbPbY+yaozG
BbtmbOPn3FA/QAmn1sH5advpGhGwVQpbfxV28So8TkdaS0gif0lku6aorozm
EAbzsqhoWlo83lMMAgX1hKJxLBg0lA+5BZarKbJ5cH3gvvkS1jQTrctk34+h
HY2Bs11LddxGCKmIECa31pg2ZKuFl0rgY7cYd+lp/EVkUYrSq5rh5BtSZyKV
C8rKXjAkWvxdjfSrGwvW2Qki0uxYE2AaxHNt6im1A5IGCmnPisiv6/Vr52IU
XrPJQQ9u2WvKegjCQjgujmtD4AGoGZblGOyvM8412N1/k4kOxbYvYsuduiUv
/Xj/ZFZdHP40/8cP491/PPtx9uT5tH9bS16z/VvZ86631ikU4+9pr7s4/P7T
5fD93tmD8eDJYDrr9XqLw0/ff/p0+Wl+snqw+3K7aBNVJAEEue+ZghXLVXWu
b6VOSa1JrUPHa4QU8tTEPz7of1V6EGSvXpKnpVI8/uspRM5+4hrzrwonOlpd
kKLUCZrTiF6sIzBLyIufhWTZqCo3amiZWOd1hj5y8eVpXFtgMDhbxPLMPuK5
R3nMqHBOzeo0kMBdv5jN3HMbQBwG+WiUzQKTubZyO+qXXPrOg8mLUOPWebDX
IOTGpVk7dSJNGDk0UwQXL6UCiXlA5JszlkBj0D+P7uNPDS9G8HPbUg9a2ceH
nBiU3jQAr1nHP6c+s7qBlXWWUwZL56S0vMzxFEh04FiKB2GClmpiVNnLGlAu
Mq+Y17Qv2KbE71JNwTrb2xmMflwUP949Pnt3CqLh/Gzav7pRVzLlBx50txXx
t7ED19BgWXEmw/rYc7giS1A7gZArbdbsxC87UUSJuFwavnxWv29keJEbyQ/7
LbyW7uoduvOflAP553d7xxf3XpdXh909T8eYhB0pvopKTuIFix0SBBPNxhfN
cVUv+Q31Q0h6dupSBIJUqx3OqryqC2ICU8uLL6wQYEBi/5priPK5hOB02S2+
AgVnGhBPCK1ouCwr0KEXCO+ZIvPhCJhsRkhUUTfiidsSepxIeTihvdbz7oOO
rEZnXfiSUP+if0AKDwMM4G8WzIWNoOy5z3Df83KaAHlEuyrVyYEG2VoDbzaw
xAa8TpgJLm5tflb7FKXEOlfg7nr229X8dRSRthjA4GM+xWDSoeSV5xPEoVbw
Sr/M1Bz6Jmj0tOaMVW4WQC1xdk0qrpkznS85wkAdn6j41CqAN4CAgLJMOLQa
riv0n3o8yGgHYd4igasOpaoydpKXrW84zj4NNgAK/Pjm3be0NNqeSmPNkDHe
DvUHuCA4ql/AIzWR2GZTyk2xcdi2Lvu64aEC3ryY6ltkjzNvacWvik+GTQSu
l+E66GsjEvBmmpF8fbmt+hxKebWsd9EyKw3gYZIg1kI4r9AvLIMAogVJK85m
JfVWQFz86PGscmtyLgJr83enOSXPTP4/6CG/83Vk6fj6Tl3G/vbB9uN3rxcv
vnv66PTw4+PD0398rDw8/O/vLTfStUrL0uhfUxjTalosy54G62t9nWtd7PzI
Gj6wH5L/r1tAu4jPzCIaPQYWsna2yXwOZFnX9NcsGP7wovEYWxYOOi4V4nIm
Rn/WGr++E960CgW8gYeVybke2zBaDyXQpovcP3uX/3T8w3fj48Nx//l3l6CL
fHx0cHd6vvfN09cfJ/cHx7uGh4MALyabRvWvVreOrw24vvKXCoeRtG3Zmo0H
MnG97RWYvLvKfYG7KgS/06zUvNtWzMxrEDfWMqtb5xxGA69CqE7sLF03HyA1
7y6ymS64tTw3hmYDV2fuptGhQQVBHSmvnwMiYEBkFY2cUMIlozXylpjwXCS8
zFrDGMild7385q297VaXZIPRyslxUzjT+zoRigZRKTKSrYGVzTFWb6eXvNVW
RBeJ0NtD7RWKY+kiRwZWgOzmbvNV5DGBUfO7yJdLY/pRpuzu9ZITyryX2FS9
uLFBWvhejRTpNQic2e02h4MtFsGBRsuVU41jlinTSjt195tvRxIMt1Az8xOZ
IvGyJLAtEaSR3pit8Qy66cuM4Sb0uU22rvvUPIxwQNhFxJAsA1w5ytZt0aJx
icJpuvKhAmr9Dpb4Wim1Vsmvvh/ObFbNgejjfYSSsEM11ttvupkm2LUh6+gl
ccYlosl1q8ZqYXJTvBgUKyNu+LonIGCmR6ZtLDd8gtcG1Y6f/6A2WyzZt4CP
u/j5ZxPAa2uQGRxd4+jmaKjymjp2Qcc3LhhJceAbMoVbNs1LKrUJv5L9OAPq
Os2r/Fxl+By0iCGjkWEIC1ZEQ2jTuAXWxsxI+TyvG1pbnoKr+Vd8rd8QN6wc
l1zUVMqYTvyEg6BgGxx0W6rxXp9WiROPLI/6UvIrIz+V2qqxOfQRUgNSazaY
vmptsT7jsUjVy+X9UKHwM7cqL6wbojzl/BCDO49L9QDJ8C8x4F3AlbENqJ6F
e6CRFXjY9QiGY3rmk92i3rSyudknzlzhothLigdyoeRkgAgi66lq27E/Tp0v
MhVnRGxgIj7cYC0qpoXb96yKtD4Omfe4Q4Jj5NXGWBHCDQIJE0Yr1W7rQZqt
ntsmfn/WKtpwnJt4Hs1IMb57MkJCYCYI6qmfHaqqnjVEpQpkV0UZt3o4aP/p
vFxO/AFo7ojIjflsli06yBi2Iu86u2e06Icl69QjWXjMywjJXEw17kZ4mzcr
EfPh55Q+VRdxogCFXZnjF7G2SAUH0WgxJYBlWi2GLBdvMCn/xAwZ9+Km2BSa
wO262HKedQRBR0u5D7PSmwFqbQrOPrNkOTge/XLL0rEaJS/GLomIyjzNF71r
OvFcjbX8el8NlX5NW6Z0eZRF5xui7cEtDBDf5G0wdJjoWxslxomU6Ef36Nqm
budlTUZiauUBjaurgl/navXWCq04ShH15MDmGZ9gzvGhznihfeFoKa5s34MJ
kYsYDnSJafMcIc23Y4DxATDrCeOGBjHF3oYMjoVwTReBwdX4hfAJLWYkG72e
bWAuUPM9pQMyDnPbQt+c6Ch10etmt4gdBGq/NmHBUJN/V2fo6aPv01fDj6/v
vxjOZ2fDd6+PL35YPr6tocbUVL6VneZ6a0nbFK3JSc9FMI184QCDVeSaQeI4
blEle93SYvAY8TEeswo2aiDR/iPzyPfZ3uNHuyeH97b7n97fzdJer7f3ePrj
8Uk1PP329elo7/xN53ewrIh55dVMdHwktuYI+xKvRrxkO4lk37UotyhE15Hc
q9Ucg2FZG/ToYKIGW6C5KGyIS4mSuyE1SH8sdLfHPeJKUrKY0KcuUWKMtMZ0
MdCcDwRHf72u2aZzezNA5akZ9gTfIMzGvUazsT4eG84DT6EwJ6uR9lCZrjUV
Hm+o0aKds/c7aub+TRMNrTam25CHcKYbacPNDxN/0OiG+auBsI76Q07neSyz
DuXMPfew2ZheulhfbwpsPkeiCiIvjtpKvdO04vxVq1tYw4BxNkg+BrQQbAM9
t9ccoFzrm8bHQh22pwZWOzKN1bSfwQjoDhD87aOo41moj0JuwVKC52xzubGT
pKU9KjKOdpmrcTp611pEmukJPs7rYk18I1YyJnSCod0KO3QvSiJpNzIfnh01
bHDUg6slwL+CtxaMNmmG5BE6YwNoPeYqdY2gg5piRu95a2SAyau7ZinTJBJO
RVdqLpd4KpdlVgvkeJRsgIgwhrlzsKBrBtAmtw+gtdgddDDruqaeQGMJMdkM
LKZrXJxT68YsUtWStcXhTf0nn7ilsJmhKM/6ajy2no5eq3GsckWGo0MT1WcT
vNOZhRwzU4UjOS9kD1WU1Zi6RpyjJhLZAqw4ngh6yWSFWLPUSGRIDyKrl0Ku
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
vP1liCPLG55mKp2GgbTVusUkMbOKASB4cUjHhpaA4xA0hCz7gacXH8Z90iIn
CSytvkiRs6m82cZVl6OFgVrXS8kBseQ63jAxWTC9HcR/rrdVVDvUkJL6D7H1
ncjuYVqIU3S8WuOyEwsko+RAYAX+XWZsCix04VPV6Yo4SoFg7wKqIv0QIGdT
z95iP4fE/4NXbx9AHNFfHtmFUaYBMpg/1OwCSU91HoKfLmWFiX85/rheBJHC
d8ku2t6lP3bVDnNMb5NNKzILS8HfBZzUnK+UmF/TBOo21HEVGjBeiqNA5Msv
lhN6zsRYk/WsWOZ01kbsT6cZZHOO7le2chsjiGzW49VMpDDz9NKVua5At0Wv
Xyj81R14jQjE1BEx/LkfQwgf9Gjno55EXaeAXuYnoKlvKnW0ZH7+uRKgYlet
FxUdEjq3QRltOU/NOybPRIdPWLO79x7n40pgiHwt1OdkyB+4yonmM+WVcAaB
8UOvPBQu2AOSR6BNhHJOajScKxmPa21r8NvBNpghrVzLgztckEmMluh88mov
iypMyEJKtbsAQ2J2JrFCjxT/TJT4pmTzgPj+tv7rj5M/ff/4rw9fHo6/+eO7
8fz1l0d7x4f1/VW1++Ozk/ri8qd3uz/tr3+8044q7oZqZrEInXeOsmDi4Az8
iRIh6Nr4qCKPm126pIsfwpsb1Y/Iw+hrgON297SDQSg1AVvRyjprvCGjqTaQ
mCoizRpSYdQmVCkh2FKvsbeLkroEjTNea8s9e1cyAXZJf8kGt3cuytlsBPpQ
rOsohowGQ40DRB9mOmntuRLZnRTODT0zW54/3D3aOzjoJqfahKXkIul+5eSi
6/ps22tnZ8e2UQuzVC9PPyXhA46KUcOo4nmW9TS/85ufTh88+uHpffrsZH7v
7vyvxwfJtt3SYoTIzR7mAwYDJX4YtWNEvNl2++aHP9A2Ne+NTXV3O7n0zeV6
MTFX50nFN45gTApamW13fFoVTS3NXZ0unLosBhRPMKm0p97SDzqGut1joCKh
s9nMWdiWGv9q0MLv/nhw91X9unr4cv3jz+/WP375/ZcX3975u6aRfwZCLEkU
jvG0RHMJolMQwg3Z5OUGIRa5dKOcTEVDkJqaxadbz8vOLBOr3LndYpRauKd8
RIzjmlWiA95qWkwXmYpM2ooSBg0qaiKKOCzlpWTBbvJz7KMdC9rKTFDfOBLJ
Cm99vp7FMBbik3Rs4I6XO/nRwy8ZA55rfQ9a/ffSnavr5NV7zNoViVoklz7B
NvrCy/8QmIPVWPuvRBuHt0qnZ/oVQA2xEfVu9rQh33RF+L2d/PtOQonx2YO1
lwQHj4eVDZ6x+zv5szJUUg3TE7DIuNtcUqhpXWZhBS+vqvXU9+O9Vyhxlz++
03ND7mQPun30aRFJ4WXf2e5O1huc3pma6MprQFcsyejzYlJ6hawIbHz2RmER
eJh2qyus27QKblAcOJqcxQPHXWozPtfLHjnrvBjad7m0aRYkVtaItTwNa+Q2
8U4w+YVufA3/nT43lFpTBu0zGr5khukaYE4WPzBGn9KplCTqBIQsZGlzSYJB
96HUZu/fsyPuFOgaMpRTnKbquQa/yVP4jYX3xEmgHdfaGRHbKbQockas8KB6
Xl0iQitVOCCVdiLKUlOnxQmrehp2XmSCKITmm+eGk6mbmB94VjRZCLIeR1M2
sNKP2nw7KrC8sDJ2DGdy1aFYrQ9fRE7QaqfcGcZfmYqeJWWp4rNnWr5SBPnA
fILLJO7dX1xAVRgUw2gA24p0IDJ1jdKUsLT2Rn4RTeGeuFxKKaIxhOzcABwc
lgQVZCjrI8G780svA/nKculWrnK7nQF13IrjBrbFuCT9quJ6lzpK9XWQeYgt
h4DCqKm4AqXUnGdZvJ5x6g2C0nRjfZUzYT89MAz9C6X1Mudlo419Up0CBwGX
xnm5HDnbpmiqBrAFMzbgNym5LA2Pk8fYJINsIviNPfkC/e7EbvBg1lolL4tk
9ppL0tPf6UEyZkRx/pgFq95kJyeDltC1gZVsk90e3m9lR9EFiPV+C3pm5Rw1
fAGmtKzqhyqzRDOILibzXanLnpo6/vE4njTxu5hZLz+gkUH7IiEjR0JihcGj
5MRG4se6qYdD6cb+aRwc+ac5OLLu4g4d6e5mf0afOyPrd2fkn+XOcDxun8nh
9lFvRvm2+P27k91nzaPzo9fje9/uvv3NwX+e3P3y2er+T+t3v/9m9Gpv9Zt7
F8tRvfs382ZIDOVv482Q+Lpuq83Bf2e8523j/fgsHKsWOZD5PZPs1LibQt1y
A+/Je9NeOqOldYV3PNbleYxY5DPap7Ns8Of/m+rjg2s0bJNAw46jB0Ik00GG
xEWdJlkR5+yGdOjNmnAvzXrEXsIB4fQWozVoVTaDs8dwnFkM4Ka4k9YE7Lh3
7OT379zJDw4hIgenJz/95se/kq35+vTxw8WLQf9m/sf7FtwZ/lfzLRwd3WuO
ZndfrZrzt8//887jN4ern/8w/TTfghdh/y/7Fo4dUKUQMZMkGAR4Xrnka6ZJ
jwvAUgHCDRl4QxGoVlp3WGRX/1EgHHTyRekQOIX5e/tlF5vXbVvXsyO4sJJv
FBpcRwz9DeyiRe2wIeDP4rDWMJJZ4fMEpW6sBNO6ZTFlicXUejWMrk80nOTt
W832P6MJ9W/5we7hbig7bUhH0opfoJzATYuGkPBF9NOuSaid4U71RPwJkY0B
yUMu4qv9FzmXMeVAod29Q5yqpWUkKqrvwaPHCi0vs/YTgMb59xhEE32EXmnW
Imu3k1UWnvRhsYBqZgOpWBQoTsnvUtTu7tPD53EhFQVfgdVDCz+pRy3/i7xG
+zlvTv+CF/2lrGd/kQx/rgvVIXi4zwOhweY8WrsykcslFQZ+m7fbzb/YojY7
HysqEyVTAzbAIDOkhF8KLVgAOcnNefytwJ4ZwdCskhwy85cBqtJfyAh1k6Iw
89mYdmYMRi3fyf3Ke4VRXOVUCER38r6qJPFMZqqIWxDDV0TiHnIZkGU1Xgsm
dCoA0MWK6f2SFOVMgVku1ci3BW4Kaq5Wknt/QVSLYdB2pZlYUO+8tKq3Uh0P
LHFIB4Q5Y8216F6Ok3uAT7ImrZ5WjBmMSvUgHtNmoN8vL2mr8CeQ3cnpzbKj
9XgVv9pwmF8byTLyNblQYfMkP6SVoYtWEzF6vtq3M5R6x57kX5J1R2/ud549
yffAZAxI5PLyfFWfLovzM7Jp28XOgbKPJFWdghtmaMZCKEqSzE6xXAonO7DF
Qdjxitxv90tG9WotlTSmwdjG909wLh8/fPiQZF+cYN2FgUEm9uVJWjoEGohA
JobeBcsuvRVSOTuNOvS7c9MotqQzG9StXjP2CZOZPeNtLnE6Oki0vaSuY8J6
+yRf3C7oty+KU1qMxXo+Lpd0i9nHz1mUBroXfLFD2wkPTEia1M2ZiFu9CqZl
eDh7ReMkIfOrnFGBs4h6rOXKmAgo9GS9xEz4zsNgF4x6cyvfNfSLJSjosgJO
uW6QjLz38sWLl4e8p0UoYj5RDgFfoz/S4A0a3xPQmvp1ZiU9c7B//Dz/1Wz1
Fe2z0//DWc5stvzqdPUVCvPlP7Dn/w84+9+9PgiKVhstlZ54ubOvO/dps+7s
Z1sRKR+iQ5BW//5uWdL1XCxPy9VvB6jv8/jh4PZ/bNOW4K6BieodyYvEGNs4
aDrR/kCE9Acssx2OIV3XQHSE9q6ueC0kHSZZ2cPbu4o2j7npMk1fA5b46XP0
gpaPC9vI86QpOfn4QT+lfcza0yHb2B/yV2Rv1RO6QD/kRwJgzOmvr0NcSf98
yD48GXX+uM/6/xo+yj6ko5RGc54o/aullPPb3VQu5SkYa1dX1A+esF/9dV2v
viJrSv4CGi4d3CsT0vn7f2MirJ8umpGAPEdBfl99+sSC1+uHcpwfmdmGiB9d
ACzAgb5rvT+9nL7o9u8Q9xHsy76vn5Xq2uad8t3rb/t+8x0W2wp5Yht+88P+
kOeDM6xlF+8lu/jo9/RNuo2fbdrGPH8b5/DKrQRW5/q1wE/++VdDnAIfXQ9s
4n/AisgsXjOXsirfvT7MSe0Z4Y5DGJWFMG7jrT5mim1aIMhA+nKEBz5jUXAt
9L6ZpF/4dZA3cc4iZ4VbpaF79woGjwp2ZDn9jlNtHz68f3X1JNPWyVCBhpeJ
OG/Jav44qi8kiuqmYuOGP1fcwMXFxQ4XXuXL7LYQmMPVfVuaO+DaLjIN/NBh
LRDe6CxnZQUxRloA5hLQblWcOgSTE3BprUKVuj2W4afi+8BK7apj5aU48Z5L
staWVodVt8vV1Ta7OPDAS5g5/T+HCcQ/vm+tJw7tDe9gIk5+6IE+JOnHUL3D
j4DU5x891B+9NjdA+jvzDvBPH+lPn1n9HLK9VwVZN0W7C7RDCn7iS33C8Zuk
zcfQFf/8sf7ccaDQG85q13K0p/gBZDqKQwGxeFsP2DHiRS6QLKC29oDmr55j
KT1L5YsQaidh9LZa1thC+RZ3Zjvs/QF0YRjB03m1sKNhr0k2rrNMpJC01s67
e+/R1dWOkPA+DyUg0j3T0LFONoumJ27eXvH85Vzi3DLYRVcOtSSsxh8LFURn
FdNurkClN2AeE+mZprrQ/h+YHs8FMgdWm85XtS+yRXlhPQ7gFeq5CgCI7+eh
W0lQzzFBAu8Ze29SCjeHcvdaM6L6czPGo6DBPrRmZq4lu8mrhvm4rmdlQXYw
uDM45TrX76hh5Ugik2pfOAadW4qkdwmvVJFbGfmQoWsxZGorst4HGJHxOWoh
VK28icEMtYxEiEzlbdndMMjpC3p9eTHIR6GHoboNfa5bYgB1Az8u7JP0Acdw
I5pJ0BefcG2EZUImWsWikCREJcHOXKky7Za+zyyj8ZZN0o3fv9cXjnRzYfN/
8Lps+se+gldAPwlDsH+aktuv3W5UZ1uf+H+yotuYHt3+88H2qfuEpn0YJjOq
vtC4g23Y05LtOmvyIy2x2boku1iX+GklMTluSYNEaZ/8P9OWqJ158/LkSNJq
dk+XbKPLD/VI3LQlLbB4w3liL1l/Sy0Z6K/BIAHl/vPyr+e2/GXST7yM/wuy
Lymm+K8m+fZCgDgM9Un+VDeGwq+5w8bf5WJChgOSYsG5EcT0F0X6+wgdLMX1
IqcraPTjPTcFH5M2G8TPpwma7rHRj0Hev+kUaumEX9aIZ4/LE/HkpcsH9i9v
OsV8xFdKqXl9Tz7WiGR2/pJGhIrmF05si/eyK7Jv0oiVxflFPfGe0s9spK1n
9lgPUduE2ZDompuNjZvJ3BAq6qicfSTzPcI3u4HwzaF49tX6/f9C+B8phJMl
uUYY96l8NxbCn6zlOaxkrxJ1rYDxkrtP27mxxP7kh11ab4+Y/sjDVhBGvuuq
ex8TIN5/oMJC3AdeWLgfdYSD7sYgF4T0v2LyCHY9Ze3v24g8ASnmAT/QJj1r
TLC0T/xxOKSAsOnh9OJjBWj/YYwoaUHAiAXLr6WFZadj4mPczc/W82IxYv5c
bF93Qgz7gEf7T6FR+H/8EIr12TmDOqYV3o2DKNRvzCyEnLpY7TEeK5lZzXc5
r6uFJr5UTRpM3AlVdb2vSPdEcBX5bZH+tLMzVmEgwumoSfDYCfx8ZtnaLPlh
d8v4qmUeqjiH++Mj4t7L5+ukfbthLJSR/nSkfoDPYIdFUYt2N63x0rd3/Vr3
6q7JrLqT+wuVVWhi5YWL9VCjh0Y7kWodLf0tuCHcU4X7ZNNTYs/5d9Xuk43v
Yl0leSpVAHqecuVhbLJAzZ5qWe2n3pSX6v3Xp5hubeI+6e0huz+Tr4OfNNWr
r1HVeJdIaIYb0yDNy0i9CM0nOmL1Gz2JcL/6U7jRY3sjPa5PjWupRR2ZOuA+
OJFtBBpZ+3T9qylpfwfNKUzRR7xl/c6ym3jHrlebuv4i/86u5tLSNsoxUnza
fz7+5KQoJFDAiUDJk1232bV+suB879N2OoeuE5zQU+RiE/4stX9+/Z3mTWw+
TwbXVvTWRyyi1tn4lq+Y7mV2vl5t0pRWaXqQu9B6biVPNHmjewn92bDp2htq
umj6p78n2KML4GI9fgG6D3SWwM+6AVkumJAMS8Bc9bwMAfLs0p/ck2SPAho4
x0tuNcp1Bc4WperMkhLHy4DnF2d7yjxoRLYYSGsT6YplkQ8GgNQoTmWmJ/Vs
PQ9a5Me24zW7x610UHwdelhGTI+0Gk9FacJLCrA1cGT8qIDCwElIrXA/n+SD
Pw0sdaPzqptN3lesix8OBHd2UTXlpo3cbd9vZc2n1g3DiqWVJkHyFh9M0jnB
X4lYoiXwKUlVNuECtchlAc8ME0zZT9UMB81EWKJBql7TCDID5Xf3gf3o9f7R
/uvv958NduLZ03SMJh49FWmtVugTzN41t8HGC6B9bJXlRt4jZ9gL5j/1yXFJ
Jcs/6ZnVrBk1i4qfo6908PGZw2ufuXfTZyRnsmThqSSXMU1Zii9EBEHAYkds
A6yDmODIPAjLULexXDQgC7a8A915kprkgBeo8JJP6FZaDrOIZhZTMZDlJ7X7
mBRqVpxr+bN31JJLd4q7vGFKGSC7fT1JIenMQ/6vkrdqGkhAd4IHpTbe6qxh
bUOZ/QsFI/pi9xe1I7Du60lkt2noVgqrK0H0+MG9ASz+cOhcgjRJ19KcBSDO
Lke8llobMdLUJxYqaK1LZtbNur2SxUGrUmQ9fZ98I0xjPGtyuyKXHlqmkG9z
vRMa3vfd1jVFQ05/bbxe9BuedqydEE07aPu4zOLWaJcHKvK9XaUa4Cq8kqEs
P0aNlba8djzVDEFeWz0g3o14c0DBYi33dnez9+9/dzB6tsPOjZHAKYtCAAp5
gEG3cy6MLRvk84IK4j0FvoJ2RVC1IVYrrS8R74zbTNswloCmFItYKzccxxLm
NdLftQendYHL2d7MRXrttJV5oENgTR07Qrk7LRPF/9wIMPTF2jUx25OOs92D
W2my0hwqZu/nnG1XgSsoq6xOCGFDipDPxYvhUo4NVy1ugmrpM7Ea5Y1grlHa
5px7hKGPl2XxhvfXBfuBmWyTjh+SVIxGln+mKKSX6OPiBhVr0OvTctWpWK9K
QbFq1cK4x61PSjcDw1b9xFudwmH0DpVA1fwcom4Gug4riVksFEYujSDzw1O5
D+lUcm7EZN2oan2GmrXzesoOPcnspt0JdUNUab1cWeHLgieJXnDGHMPGN5Fs
rsZsat0g8Q20gj+UUgbId6JLVLmsmjfOcRVoBk+KiRTPYaOV3Rs82mxObZWz
WbEoa1Tq8idMsGjH0okX3AklXLRXaeIW8gIWnECOF46XdTGdXcr94AYUf6gD
y2TqAhzvHtKTuLATWVCXP/MR5gaNfJoWiqS++gMXb7wxrxxsuMQKybuGwJEV
Da8VBsdiVrMdTzuXa9gsFuWsGUAv3Y3KHn86FA7EyNeGL4WaMSklWr5TFlNu
o1UhYHND7UxGl0PvYDyrJCGyj0EpOUlJku2vvVr1a9JTcpECoo6Ef+1JL/G9
Rn7o+z5r/detJjumNT+Y9X2a/vn+2t+0un3dT9MhffSnQhr70Z/++tPH/MEb
gx/+vXfu0h7krQJrWILWmz1FwpOcpOis/O1gr57P14uQ6KKPNvl3Kseg6V9B
fEX6dvh6RTDUKnds72MLs2QMNPlW/kAIv6GQwPkW1CwmW+V7UVQQtU7DZk/o
h6S6lXt2knb/HIU3Fk/iudB2hPfYeBDplWOoQzh+xtRqCkT7TJng7R5FpsCI
DWm6a+ZoeZ+q8CJdrngDJ5zI7GrepGpYccqJmivLkuJXckos/g6qYBBuLDLO
WUurGXA/2F5jJa5FOkPzzIPdkoIMKHewLTxQBbWkzQae57qSImvduePeuBRj
iEEe3ctF57egmDfZw0O0UgOz4pKn0saC6w/2qWZVZZ6OngNN1WJEjY/m1XRK
aubWi2r1YjvQJqu643K0cn3BYioUIuM1Jk+rgPCPg1ZHSmQ5O+HiT5LdD7vE
5j+2qF3mF2eB5pfsDbZV2WyN62L8+FbH65mlPHLLhzIBZG/vPTtsUKcyk0GN
63elcSRwrideRabIYqKkZK+WdLEvxKBLx4MpRwnCDCpg4LhjtcUWVlpGorZt
654tTMt/a6VVfDI6JKSJr6o5LohEd2KdRjlImujI0IJu8SnO6+T7mf2sWWvm
t61IXSTKkhUI0y83bPAy8qhLoRPD3NTdDbeTJbaFLIWbhAmMReYpp0bG9Smp
JYNxMQ2pGruzUxrj6mw+yFo1R1FI6GJxuiym8bK0iWToa7MacTUoVraamPlh
7Ymi6bEMYsNAeZbhaAHb4DTVAj9eHG3Z3iryjPbPNk6rmHZdXY0rBVQhXJqU
q2SlURSwA2dWdCvsQDoJ8zqJGj70jnjdRevVreApmi6DFSd53JnTn9Ugt5p9
HVxhKFhdrHrIaLwlJOe+Tagne5xMrVwSjBvbKr21ljI3kB4jKnrneLJhGyVc
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
O2cKytM1XURcwVuPuSqWDJHZyf4HLv3J14BGAgA=

-->

</rfc>

